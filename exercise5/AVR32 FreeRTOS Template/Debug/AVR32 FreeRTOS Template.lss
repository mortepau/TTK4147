
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00003ab8  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80005c00  80005c00  00006000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80005e00  80005e00  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000184  80005e18  80005e18  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  80005f9c  80005f9c  0000639c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  80005fa0  00006408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  80005fa8  00006410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  80005fb0  00006418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          0000000c  0000001c  80005fb4  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000005d8  00000028  80005fc0  00006428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000430  00000600  00000600  00000000  2**2
                  ALLOC
 15 .heap         0000e5d0  00000a30  00000a30  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  00006a00  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000cd8  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000019df  00000000  00000000  00007708  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   00025b95  00000000  00000000  000090e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000047c8  00000000  00000000  0002ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000e756  00000000  00000000  00033444  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00001db4  00000000  00000000  00041b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00007e8b  00000000  00000000  00043950  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    000043ee  00000000  00000000  0004b7db  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 014ad906  00000000  00000000  0004fbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00000d60  00000000  00000000  014fd4cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	5f a0       	srle	r0
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	06 00       	add	r0,r3
80002088:	00 00       	add	r0,r0
8000208a:	0a 30       	cp.w	r0,r5
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	43 28       	lddsp	r8,sp[0xc8]
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	5e 00       	reteq	r0
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	4b 14       	lddpc	r4,80002158 <gpio_configure_pin+0x1c>
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	51 64       	stdsp	sp[0x58],r4
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	4a 64       	lddpc	r4,80002138 <board_init+0x2c>
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	4b 28       	lddpc	r8,8000216c <gpio_configure_pin+0x30>

800020a8 <__do_global_dtors_aux>:
800020a8:	d4 21       	pushm	r4-r7,lr
800020aa:	48 e8       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020ac:	11 89       	ld.ub	r9,r8[0x0]
800020ae:	30 08       	mov	r8,0
800020b0:	f0 09 18 00 	cp.b	r9,r8
800020b4:	c1 41       	brne	800020dc <__do_global_dtors_aux+0x34>
800020b6:	48 c8       	lddpc	r8,800020e4 <__do_global_dtors_aux+0x3c>
800020b8:	48 c6       	lddpc	r6,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	10 95       	mov	r5,r8
800020bc:	10 16       	sub	r6,r8
800020be:	48 c7       	lddpc	r7,800020ec <__do_global_dtors_aux+0x44>
800020c0:	a3 46       	asr	r6,0x2
800020c2:	20 16       	sub	r6,1
800020c4:	c0 68       	rjmp	800020d0 <__do_global_dtors_aux+0x28>
800020c6:	2f f8       	sub	r8,-1
800020c8:	8f 08       	st.w	r7[0x0],r8
800020ca:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ce:	5d 18       	icall	r8
800020d0:	6e 08       	ld.w	r8,r7[0x0]
800020d2:	0c 38       	cp.w	r8,r6
800020d4:	cf 93       	brcs	800020c6 <__do_global_dtors_aux+0x1e>
800020d6:	30 19       	mov	r9,1
800020d8:	48 28       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020da:	b0 89       	st.b	r8[0x0],r9
800020dc:	d8 22       	popm	r4-r7,pc
800020de:	00 00       	add	r0,r0
800020e0:	00 00       	add	r0,r0
800020e2:	06 00       	add	r0,r3
800020e4:	00 00       	add	r0,r0
800020e6:	00 10       	sub	r0,r0
800020e8:	00 00       	add	r0,r0
800020ea:	00 14       	sub	r4,r0
800020ec:	00 00       	add	r0,r0
800020ee:	06 04       	add	r4,r3

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <board_init>:
#endif



void board_init (void)
{
8000210c:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000210e:	30 3b       	mov	r11,3
80002110:	32 3c       	mov	r12,35
80002112:	f0 1f 00 0a 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002116:	30 3b       	mov	r11,3
80002118:	34 9c       	mov	r12,73
8000211a:	f0 1f 00 08 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000211e:	30 3b       	mov	r11,3
80002120:	32 2c       	mov	r12,34
80002122:	f0 1f 00 06 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002126:	30 3b       	mov	r11,3
80002128:	32 6c       	mov	r12,38
8000212a:	f0 1f 00 04 	mcall	80002138 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000212e:	30 4b       	mov	r11,4
80002130:	32 1c       	mov	r12,33
80002132:	f0 1f 00 02 	mcall	80002138 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002136:	d8 02       	popm	pc
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	21 3c       	sub	r12,19

8000213c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000213c:	f8 08 16 05 	lsr	r8,r12,0x5
80002140:	a9 68       	lsl	r8,0x8
80002142:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002146:	16 99       	mov	r9,r11
80002148:	e2 19 00 04 	andl	r9,0x4,COH
8000214c:	c0 70       	breq	8000215a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000214e:	30 19       	mov	r9,1
80002150:	f2 0c 09 49 	lsl	r9,r9,r12
80002154:	f1 49 00 74 	st.w	r8[116],r9
80002158:	c0 68       	rjmp	80002164 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000215a:	30 19       	mov	r9,1
8000215c:	f2 0c 09 49 	lsl	r9,r9,r12
80002160:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 00 80 	andl	r9,0x80,COH
8000216a:	c2 40       	breq	800021b2 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000216c:	16 99       	mov	r9,r11
8000216e:	e2 19 01 80 	andl	r9,0x180,COH
80002172:	c0 90       	breq	80002184 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002174:	30 19       	mov	r9,1
80002176:	f2 0c 09 49 	lsl	r9,r9,r12
8000217a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000217e:	f1 49 00 b8 	st.w	r8[184],r9
80002182:	c1 88       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002184:	16 99       	mov	r9,r11
80002186:	e2 19 02 80 	andl	r9,0x280,COH
8000218a:	c0 90       	breq	8000219c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000218c:	30 19       	mov	r9,1
8000218e:	f2 0c 09 49 	lsl	r9,r9,r12
80002192:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002196:	f1 49 00 b8 	st.w	r8[184],r9
8000219a:	c0 c8       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000219c:	16 99       	mov	r9,r11
8000219e:	e2 19 03 80 	andl	r9,0x380,COH
800021a2:	c0 80       	breq	800021b2 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800021a4:	30 19       	mov	r9,1
800021a6:	f2 0c 09 49 	lsl	r9,r9,r12
800021aa:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800021ae:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800021b2:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021b6:	c1 50       	breq	800021e0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
800021b8:	e2 1b 00 02 	andl	r11,0x2,COH
800021bc:	c0 70       	breq	800021ca <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800021be:	30 19       	mov	r9,1
800021c0:	f2 0c 09 49 	lsl	r9,r9,r12
800021c4:	f1 49 00 54 	st.w	r8[84],r9
800021c8:	c0 68       	rjmp	800021d4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 49 	lsl	r9,r9,r12
800021d0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021d4:	30 19       	mov	r9,1
800021d6:	f2 0c 09 49 	lsl	r9,r9,r12
800021da:	f1 49 00 44 	st.w	r8[68],r9
800021de:	c0 68       	rjmp	800021ea <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021e0:	30 19       	mov	r9,1
800021e2:	f2 0c 09 49 	lsl	r9,r9,r12
800021e6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ea:	30 19       	mov	r9,1
800021ec:	f2 0c 09 4c 	lsl	r12,r9,r12
800021f0:	91 1c       	st.w	r8[0x4],r12
}
800021f2:	5e fc       	retal	r12

800021f4 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021f4:	f8 08 16 05 	lsr	r8,r12,0x5
800021f8:	a9 68       	lsl	r8,0x8
800021fa:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800021fe:	71 88       	ld.w	r8,r8[0x60]
80002200:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002204:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002208:	5e fc       	retal	r12

8000220a <gpio_set_gpio_pin>:
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000220a:	f8 08 16 05 	lsr	r8,r12,0x5
8000220e:	a9 68       	lsl	r8,0x8
80002210:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002214:	30 19       	mov	r9,1
80002216:	f2 0c 09 4c 	lsl	r12,r9,r12
8000221a:	f1 4c 00 54 	st.w	r8[84],r12
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000221e:	f1 4c 00 44 	st.w	r8[68],r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002222:	91 1c       	st.w	r8[0x4],r12
}
80002224:	5e fc       	retal	r12

80002226 <gpio_clr_gpio_pin>:
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002226:	f8 08 16 05 	lsr	r8,r12,0x5
8000222a:	a9 68       	lsl	r8,0x8
8000222c:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002230:	30 19       	mov	r9,1
80002232:	f2 0c 09 4c 	lsl	r12,r9,r12
80002236:	f1 4c 00 58 	st.w	r8[88],r12
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000223a:	f1 4c 00 44 	st.w	r8[68],r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8000223e:	91 1c       	st.w	r8[0x4],r12
}
80002240:	5e fc       	retal	r12

80002242 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002242:	c0 08       	rjmp	80002242 <_unhandled_interrupt>

80002244 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002244:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002248:	48 99       	lddpc	r9,8000226c <INTC_register_interrupt+0x28>
8000224a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000224e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002252:	72 19       	ld.w	r9,r9[0x4]
80002254:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002258:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000225c:	48 59       	lddpc	r9,80002270 <INTC_register_interrupt+0x2c>
8000225e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002262:	fe 79 08 00 	mov	r9,-63488
80002266:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
8000226a:	5e fc       	retal	r12
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	5e 18       	retne	r8
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	5d 3c       	musfr	r12

80002274 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
80002274:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002276:	49 18       	lddpc	r8,800022b8 <INTC_init_interrupts+0x44>
80002278:	e3 b8 00 01 	mtsr	0x4,r8
8000227c:	49 0e       	lddpc	lr,800022bc <INTC_init_interrupts+0x48>
8000227e:	30 07       	mov	r7,0
80002280:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002282:	49 0c       	lddpc	r12,800022c0 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002284:	49 08       	lddpc	r8,800022c4 <INTC_init_interrupts+0x50>
80002286:	70 05       	ld.w	r5,r8[0x0]
80002288:	fe 76 08 00 	mov	r6,-63488
8000228c:	c1 08       	rjmp	800022ac <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000228e:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002290:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002292:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002294:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002298:	2f f8       	sub	r8,-1
8000229a:	10 3a       	cp.w	r10,r8
8000229c:	fe 9b ff fc 	brhi	80002294 <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800022a0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800022a4:	2f f7       	sub	r7,-1
800022a6:	2f 8e       	sub	lr,-8
800022a8:	59 e7       	cp.w	r7,30
800022aa:	c0 50       	breq	800022b4 <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800022ac:	7c 08       	ld.w	r8,lr[0x0]
800022ae:	58 08       	cp.w	r8,0
800022b0:	ce f1       	brne	8000228e <INTC_init_interrupts+0x1a>
800022b2:	cf 7b       	rjmp	800022a0 <INTC_init_interrupts+0x2c>
800022b4:	d8 22       	popm	r4-r7,pc
800022b6:	00 00       	add	r0,r0
800022b8:	80 00       	ld.sh	r0,r0[0x0]
800022ba:	5c 00       	acr	r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	5e 18       	retne	r8
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	22 42       	sub	r2,36
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	5d 3c       	musfr	r12

800022c8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800022c8:	fe 78 08 00 	mov	r8,-63488
800022cc:	e0 69 00 83 	mov	r9,131
800022d0:	f2 0c 01 0c 	sub	r12,r9,r12
800022d4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022d8:	f2 ca ff c0 	sub	r10,r9,-64
800022dc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022e0:	58 08       	cp.w	r8,0
800022e2:	c0 21       	brne	800022e6 <_get_interrupt_handler+0x1e>
800022e4:	5e fd       	retal	0
800022e6:	f0 08 12 00 	clz	r8,r8
800022ea:	48 5a       	lddpc	r10,800022fc <_get_interrupt_handler+0x34>
800022ec:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022f0:	f0 08 11 1f 	rsub	r8,r8,31
800022f4:	72 19       	ld.w	r9,r9[0x4]
800022f6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022fa:	5e fc       	retal	r12
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	5e 18       	retne	r8

80002300 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002300:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002302:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002306:	99 a8       	st.w	r12[0x28],r8
}
80002308:	5e fc       	retal	r12
8000230a:	d7 03       	nop

8000230c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000230c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000230e:	ec 5b bb 9f 	cp.w	r11,899999
80002312:	e0 8b 00 04 	brhi	8000231a <pm_enable_osc0_crystal+0xe>
80002316:	30 4b       	mov	r11,4
80002318:	c1 38       	rjmp	8000233e <pm_enable_osc0_crystal+0x32>
8000231a:	e0 68 c6 bf 	mov	r8,50879
8000231e:	ea 18 00 2d 	orh	r8,0x2d
80002322:	10 3b       	cp.w	r11,r8
80002324:	e0 8b 00 04 	brhi	8000232c <pm_enable_osc0_crystal+0x20>
80002328:	30 5b       	mov	r11,5
8000232a:	c0 a8       	rjmp	8000233e <pm_enable_osc0_crystal+0x32>
8000232c:	e0 68 12 00 	mov	r8,4608
80002330:	ea 18 00 7a 	orh	r8,0x7a
80002334:	10 3b       	cp.w	r11,r8
80002336:	f9 bb 03 06 	movlo	r11,6
8000233a:	f9 bb 02 07 	movhs	r11,7
8000233e:	f0 1f 00 02 	mcall	80002344 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002342:	d8 02       	popm	pc
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	23 00       	sub	r0,48

80002348 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002348:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000234a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000234e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002350:	78 08       	ld.w	r8,r12[0x0]
80002352:	a3 a8       	sbr	r8,0x2
80002354:	99 08       	st.w	r12[0x0],r8
}
80002356:	5e fc       	retal	r12

80002358 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002358:	79 58       	ld.w	r8,r12[0x54]
8000235a:	e2 18 00 80 	andl	r8,0x80,COH
8000235e:	cf d0       	breq	80002358 <pm_wait_for_clk0_ready>
}
80002360:	5e fc       	retal	r12
80002362:	d7 03       	nop

80002364 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002364:	eb cd 40 80 	pushm	r7,lr
80002368:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000236a:	f0 1f 00 04 	mcall	80002378 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
8000236e:	0e 9c       	mov	r12,r7
80002370:	f0 1f 00 03 	mcall	8000237c <pm_enable_clk0+0x18>
}
80002374:	e3 cd 80 80 	ldm	sp++,r7,pc
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	23 48       	sub	r8,52
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	23 58       	sub	r8,53

80002380 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002380:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002382:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002386:	99 08       	st.w	r12[0x0],r8
}
80002388:	5e fc       	retal	r12
8000238a:	d7 03       	nop

8000238c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000238c:	eb cd 40 c0 	pushm	r6-r7,lr
80002390:	18 97       	mov	r7,r12
80002392:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002394:	f0 1f 00 06 	mcall	800023ac <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002398:	0c 9b       	mov	r11,r6
8000239a:	0e 9c       	mov	r12,r7
8000239c:	f0 1f 00 05 	mcall	800023b0 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800023a0:	30 1b       	mov	r11,1
800023a2:	0e 9c       	mov	r12,r7
800023a4:	f0 1f 00 04 	mcall	800023b4 <pm_switch_to_osc0+0x28>
}
800023a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ac:	80 00       	ld.sh	r0,r0[0x0]
800023ae:	23 0c       	sub	r12,48
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	23 64       	sub	r4,54
800023b4:	80 00       	ld.sh	r0,r0[0x0]
800023b6:	23 80       	sub	r0,56

800023b8 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
800023b8:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
800023ba:	58 0c       	cp.w	r12,0
800023bc:	c0 40       	breq	800023c4 <pcl_switch_to_osc+0xc>
800023be:	fe 7c d8 f0 	mov	r12,-10000
800023c2:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
800023c4:	fe 7c 0c 00 	mov	r12,-62464
800023c8:	f0 1f 00 02 	mcall	800023d0 <pcl_switch_to_osc+0x18>
800023cc:	d8 0a       	popm	pc,r12=0
800023ce:	00 00       	add	r0,r0
800023d0:	80 00       	ld.sh	r0,r0[0x0]
800023d2:	23 8c       	sub	r12,56

800023d4 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
800023d4:	5e ff       	retal	1

800023d6 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
800023d6:	5e fd       	retal	0

800023d8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023d8:	fe 68 00 00 	mov	r8,-131072
800023dc:	70 09       	ld.w	r9,r8[0x0]
800023de:	a7 d9       	cbr	r9,0x7
800023e0:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023e2:	70 09       	ld.w	r9,r8[0x0]
800023e4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023e8:	e0 19 ff 80 	andl	r9,0xff80
800023ec:	f9 e9 10 09 	or	r9,r12,r9
800023f0:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023f2:	70 09       	ld.w	r9,r8[0x0]
800023f4:	a7 b9       	sbr	r9,0x7
800023f6:	91 09       	st.w	r8[0x0],r9
}
800023f8:	5e fc       	retal	r12

800023fa <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023fa:	fe 68 00 00 	mov	r8,-131072
800023fe:	70 0c       	ld.w	r12,r8[0x0]
}
80002400:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002404:	5e fc       	retal	r12

80002406 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80002406:	fe 68 00 00 	mov	r8,-131072
8000240a:	70 8c       	ld.w	r12,r8[0x20]
}
8000240c:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80002410:	5e fc       	retal	r12

80002412 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
80002412:	fe 68 00 00 	mov	r8,-131072
80002416:	70 8c       	ld.w	r12,r8[0x20]
}
80002418:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
8000241c:	5e fc       	retal	r12
8000241e:	d7 03       	nop

80002420 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002420:	48 28       	lddpc	r8,80002428 <udd_set_setup_payload+0x8>
80002422:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80002424:	b0 6b       	st.h	r8[0xc],r11
}
80002426:	5e fc       	retal	r12
80002428:	00 00       	add	r0,r0
8000242a:	0a 00       	add	r0,r5

8000242c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000242c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002430:	a3 68       	lsl	r8,0x2
80002432:	e0 38 fe 40 	sub	r8,130624
80002436:	70 0c       	ld.w	r12,r8[0x0]
}
80002438:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
8000243c:	5e fc       	retal	r12
8000243e:	d7 03       	nop

80002440 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002440:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80002444:	30 38       	mov	r8,3
80002446:	f0 0c 18 00 	cp.b	r12,r8
8000244a:	e0 8b 00 35 	brhi	800024b4 <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
8000244e:	18 99       	mov	r9,r12
80002450:	f8 c8 00 01 	sub	r8,r12,1
80002454:	a5 68       	lsl	r8,0x4
80002456:	49 9a       	lddpc	r10,800024b8 <udd_ep_set_halt+0x78>
80002458:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
8000245c:	70 0a       	ld.w	r10,r8[0x0]
8000245e:	58 0a       	cp.w	r10,0
80002460:	c2 a5       	brlt	800024b4 <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
80002462:	a3 69       	lsl	r9,0x2
80002464:	fe 6b 01 30 	mov	r11,-130768
80002468:	f2 0b 00 0a 	add	r10,r9,r11
8000246c:	74 0a       	ld.w	r10,r10[0x0]
8000246e:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80002472:	c1 10       	breq	80002494 <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
80002474:	70 0b       	ld.w	r11,r8[0x0]
80002476:	30 1a       	mov	r10,1
80002478:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
8000247c:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
8000247e:	e0 39 fe 10 	sub	r9,130576
80002482:	e0 68 10 00 	mov	r8,4096
80002486:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80002488:	f0 0c 09 4c 	lsl	r12,r8,r12
8000248c:	fe 69 00 00 	mov	r9,-131072
80002490:	93 6c       	st.w	r9[0x18],r12
80002492:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
80002494:	fe 6a 01 00 	mov	r10,-130816
80002498:	f2 0a 00 08 	add	r8,r9,r10
8000249c:	70 0a       	ld.w	r10,r8[0x0]
8000249e:	a9 da       	cbr	r10,0x9
800024a0:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
800024a2:	e0 39 fe 10 	sub	r9,130576
800024a6:	e8 68 00 00 	mov	r8,524288
800024aa:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
800024ac:	e4 68 00 00 	mov	r8,262144
800024b0:	93 08       	st.w	r9[0x0],r8
800024b2:	5e ff       	retal	1
800024b4:	5e fd       	retal	0
800024b6:	00 00       	add	r0,r0
800024b8:	00 00       	add	r0,r0
800024ba:	07 18       	ld.sh	r8,r3++

800024bc <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800024bc:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800024be:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800024c2:	30 38       	mov	r8,3
800024c4:	f0 0c 18 00 	cp.b	r12,r8
800024c8:	e0 88 00 03 	brls	800024ce <udd_ep_clear_halt+0x12>
800024cc:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
800024ce:	f8 c8 00 01 	sub	r8,r12,1
800024d2:	a5 68       	lsl	r8,0x4
800024d4:	49 69       	lddpc	r9,8000252c <udd_ep_clear_halt+0x70>
800024d6:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024da:	a3 6c       	lsl	r12,0x2
800024dc:	fe 6a 01 c0 	mov	r10,-130624
800024e0:	f8 0a 00 09 	add	r9,r12,r10
800024e4:	72 09       	ld.w	r9,r9[0x0]
800024e6:	e6 19 00 08 	andh	r9,0x8,COH
800024ea:	c0 51       	brne	800024f4 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024ec:	70 09       	ld.w	r9,r8[0x0]
800024ee:	e6 19 10 00 	andh	r9,0x1000,COH
800024f2:	c1 c0       	breq	8000252a <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024f4:	70 09       	ld.w	r9,r8[0x0]
800024f6:	30 0a       	mov	r10,0
800024f8:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024fc:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024fe:	fe 6a 02 20 	mov	r10,-130528
80002502:	f8 0a 00 09 	add	r9,r12,r10
80002506:	e8 6a 00 00 	mov	r10,524288
8000250a:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
8000250c:	e0 3c ff 00 	sub	r12,130816
80002510:	78 09       	ld.w	r9,r12[0x0]
80002512:	a9 b9       	sbr	r9,0x9
80002514:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80002516:	70 09       	ld.w	r9,r8[0x0]
80002518:	58 09       	cp.w	r9,0
8000251a:	c0 84       	brge	8000252a <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
8000251c:	30 0a       	mov	r10,0
8000251e:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80002522:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80002524:	70 38       	ld.w	r8,r8[0xc]
80002526:	5d 18       	icall	r8
80002528:	da 0a       	popm	pc,r12=1
8000252a:	da 0a       	popm	pc,r12=1
8000252c:	00 00       	add	r0,r0
8000252e:	07 18       	ld.sh	r8,r3++

80002530 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002530:	30 59       	mov	r9,5
80002532:	48 58       	lddpc	r8,80002544 <udd_ctrl_stall_data+0x14>
80002534:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80002536:	e8 69 00 00 	mov	r9,524288
8000253a:	fe 68 01 f0 	mov	r8,-130576
8000253e:	91 09       	st.w	r8[0x0],r9
}
80002540:	5e fc       	retal	r12
80002542:	00 00       	add	r0,r0
80002544:	00 00       	add	r0,r0
80002546:	07 4c       	ld.w	r12,--r3

80002548 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002548:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000254a:	48 48       	lddpc	r8,80002558 <udd_ctrl_endofrequest+0x10>
8000254c:	70 48       	ld.w	r8,r8[0x10]
8000254e:	58 08       	cp.w	r8,0
80002550:	c0 20       	breq	80002554 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80002552:	5d 18       	icall	r8
80002554:	d8 02       	popm	pc
80002556:	00 00       	add	r0,r0
80002558:	00 00       	add	r0,r0
8000255a:	0a 00       	add	r0,r5

8000255c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
8000255c:	d4 01       	pushm	lr
8000255e:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002560:	78 08       	ld.w	r8,r12[0x0]
80002562:	58 08       	cp.w	r8,0
80002564:	c0 b4       	brge	8000257a <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
80002566:	30 0a       	mov	r10,0
80002568:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000256c:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
8000256e:	78 38       	ld.w	r8,r12[0xc]
80002570:	58 08       	cp.w	r8,0
80002572:	c0 40       	breq	8000257a <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002574:	78 2b       	ld.w	r11,r12[0x8]
80002576:	12 9c       	mov	r12,r9
80002578:	5d 18       	icall	r8
8000257a:	d8 02       	popm	pc

8000257c <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000257c:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
8000257e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002582:	20 18       	sub	r8,1
80002584:	a5 68       	lsl	r8,0x4
80002586:	30 1b       	mov	r11,1
80002588:	48 3c       	lddpc	r12,80002594 <udd_ep_abort_job+0x18>
8000258a:	10 0c       	add	r12,r8
8000258c:	f0 1f 00 03 	mcall	80002598 <udd_ep_abort_job+0x1c>
}
80002590:	d8 02       	popm	pc
80002592:	00 00       	add	r0,r0
80002594:	00 00       	add	r0,r0
80002596:	07 18       	ld.sh	r8,r3++
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	25 5c       	sub	r12,85

8000259c <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
8000259c:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
8000259e:	fe 69 00 00 	mov	r9,-131072
800025a2:	72 7b       	ld.w	r11,r9[0x1c]
800025a4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800025a8:	30 1a       	mov	r10,1
800025aa:	f4 08 09 4a 	lsl	r10,r10,r8
800025ae:	5c da       	com	r10
800025b0:	16 6a       	and	r10,r11
800025b2:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800025b4:	a3 68       	lsl	r8,0x2
800025b6:	e0 38 ff 00 	sub	r8,130816
800025ba:	70 09       	ld.w	r9,r8[0x0]
800025bc:	a1 d9       	cbr	r9,0x1
800025be:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
800025c0:	f0 1f 00 02 	mcall	800025c8 <udd_ep_free+0x2c>
}
800025c4:	d8 02       	popm	pc
800025c6:	00 00       	add	r0,r0
800025c8:	80 00       	ld.sh	r0,r0[0x0]
800025ca:	25 7c       	sub	r12,87

800025cc <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800025cc:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
800025d0:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800025d4:	30 37       	mov	r7,3
800025d6:	ee 0e 18 00 	cp.b	lr,r7
800025da:	e0 8b 00 99 	brhi	8000270c <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025de:	fe 67 00 00 	mov	r7,-131072
800025e2:	6e 76       	ld.w	r6,r7[0x1c]
800025e4:	1c 95       	mov	r5,lr
800025e6:	30 17       	mov	r7,1
800025e8:	ee 0e 09 47 	lsl	r7,r7,lr
800025ec:	0c 67       	and	r7,r6
800025ee:	e0 80 00 8f 	breq	8000270c <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025f2:	fc 06 15 02 	lsl	r6,lr,0x2
800025f6:	fe 64 01 c0 	mov	r4,-130624
800025fa:	ec 04 00 07 	add	r7,r6,r4
800025fe:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002600:	e6 17 00 08 	andh	r7,0x8,COH
80002604:	e0 81 00 84 	brne	8000270c <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002608:	fc c7 00 01 	sub	r7,lr,1
8000260c:	a5 67       	lsl	r7,0x4
8000260e:	4c 14       	lddpc	r4,80002710 <udd_ep_run+0x144>
80002610:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
80002614:	6e 04       	ld.w	r4,r7[0x0]
80002616:	e6 14 10 00 	andh	r4,0x1000,COH
8000261a:	c7 91       	brne	8000270c <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000261c:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
80002620:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002622:	6e 03       	ld.w	r3,r7[0x0]
80002624:	58 03       	cp.w	r3,0
80002626:	c0 54       	brge	80002630 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002628:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
8000262c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80002630:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80002634:	6e 03       	ld.w	r3,r7[0x0]
80002636:	30 12       	mov	r2,1
80002638:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
8000263c:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000263e:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
80002642:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
80002644:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
80002646:	6e 08       	ld.w	r8,r7[0x0]
80002648:	30 04       	mov	r4,0
8000264a:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
8000264e:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002650:	e0 49 ff ff 	cp.w	r9,65535
80002654:	e0 88 00 07 	brls	80002662 <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002658:	e0 78 00 00 	mov	r8,65536
8000265c:	8f 28       	st.w	r7[0x8],r8
8000265e:	08 99       	mov	r9,r4
80002660:	c3 58       	rjmp	800026ca <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80002662:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
80002664:	58 0c       	cp.w	r12,0
80002666:	c3 20       	breq	800026ca <udd_ep_run+0xfe>
			if (buf_size==0) {
80002668:	58 09       	cp.w	r9,0
8000266a:	c1 71       	brne	80002698 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
8000266c:	6e 08       	ld.w	r8,r7[0x0]
8000266e:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002670:	bd b8       	sbr	r8,0x1d
80002672:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
80002676:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002678:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000267c:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
8000267e:	20 15       	sub	r5,1
80002680:	fc 19 02 00 	movh	r9,0x200
80002684:	f2 05 09 49 	lsl	r9,r9,r5
80002688:	fe 68 00 00 	mov	r8,-131072
8000268c:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
8000268e:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002690:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
80002694:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002698:	e0 36 ff 00 	sub	r6,130816
8000269c:	6c 08       	ld.w	r8,r6[0x0]
8000269e:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
800026a2:	30 86       	mov	r6,8
800026a4:	ec 08 09 48 	lsl	r8,r6,r8
800026a8:	20 18       	sub	r8,1
800026aa:	12 68       	and	r8,r9
800026ac:	c0 b0       	breq	800026c2 <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
800026ae:	6e 08       	ld.w	r8,r7[0x0]
800026b0:	30 0b       	mov	r11,0
800026b2:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800026b6:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800026b8:	a5 6e       	lsl	lr,0x4
800026ba:	e0 3e fd 00 	sub	lr,130304
800026be:	9d 1a       	st.w	lr[0x4],r10
800026c0:	c1 18       	rjmp	800026e2 <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
800026c2:	6e 08       	ld.w	r8,r7[0x0]
800026c4:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800026c8:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800026ca:	a5 6e       	lsl	lr,0x4
800026cc:	e0 3e fd 00 	sub	lr,130304
800026d0:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
800026d2:	58 0b       	cp.w	r11,0
800026d4:	c0 31       	brne	800026da <udd_ep_run+0x10e>
800026d6:	30 08       	mov	r8,0
800026d8:	c0 68       	rjmp	800026e4 <udd_ep_run+0x118>
		if (b_dir_in) {
800026da:	58 0c       	cp.w	r12,0
800026dc:	c0 31       	brne	800026e2 <udd_ep_run+0x116>
800026de:	31 48       	mov	r8,20
800026e0:	c0 28       	rjmp	800026e4 <udd_ep_run+0x118>
800026e2:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026e4:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026e8:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026ec:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026ee:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026f2:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026f4:	20 15       	sub	r5,1
800026f6:	fc 19 02 00 	movh	r9,0x200
800026fa:	f2 05 09 45 	lsl	r5,r9,r5
800026fe:	fe 69 00 00 	mov	r9,-131072
80002702:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002704:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002708:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
8000270c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002710:	00 00       	add	r0,r0
80002712:	07 18       	ld.sh	r8,r3++

80002714 <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
80002714:	58 0c       	cp.w	r12,0
80002716:	c1 11       	brne	80002738 <udd_sleep_mode+0x24>
80002718:	49 18       	lddpc	r8,8000275c <udd_sleep_mode+0x48>
8000271a:	11 89       	ld.ub	r9,r8[0x0]
8000271c:	30 08       	mov	r8,0
8000271e:	f0 09 18 00 	cp.b	r9,r8
80002722:	c1 a0       	breq	80002756 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002724:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002728:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000272a:	48 e8       	lddpc	r8,80002760 <udd_sleep_mode+0x4c>
8000272c:	11 9a       	ld.ub	r10,r8[0x1]
8000272e:	2f fa       	sub	r10,-1
80002730:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002732:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002736:	c1 08       	rjmp	80002756 <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002738:	48 98       	lddpc	r8,8000275c <udd_sleep_mode+0x48>
8000273a:	11 89       	ld.ub	r9,r8[0x0]
8000273c:	30 08       	mov	r8,0
8000273e:	f0 09 18 00 	cp.b	r9,r8
80002742:	c0 a1       	brne	80002756 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002744:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002748:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000274a:	48 68       	lddpc	r8,80002760 <udd_sleep_mode+0x4c>
8000274c:	11 9a       	ld.ub	r10,r8[0x1]
8000274e:	20 1a       	sub	r10,1
80002750:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002752:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002756:	48 28       	lddpc	r8,8000275c <udd_sleep_mode+0x48>
80002758:	b0 8c       	st.b	r8[0x0],r12
}
8000275a:	5e fc       	retal	r12
8000275c:	00 00       	add	r0,r0
8000275e:	07 48       	ld.w	r8,--r3
80002760:	00 00       	add	r0,r0
80002762:	0a 18       	sub	r8,r5

80002764 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002764:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80002766:	fe 68 00 00 	mov	r8,-131072
8000276a:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000276e:	af c9       	cbr	r9,0xe
80002770:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
80002774:	70 09       	ld.w	r9,r8[0x0]
80002776:	a9 a9       	sbr	r9,0x8
80002778:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000277a:	30 0c       	mov	r12,0
8000277c:	f0 1f 00 02 	mcall	80002784 <udd_detach+0x20>
}
80002780:	d8 02       	popm	pc
80002782:	00 00       	add	r0,r0
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	27 14       	sub	r4,113

80002788 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002788:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000278c:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000278e:	30 1a       	mov	r10,1
80002790:	fe 69 02 20 	mov	r9,-130528
80002794:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002796:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000279a:	30 29       	mov	r9,2
8000279c:	fe 68 01 60 	mov	r8,-130720
800027a0:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800027a2:	48 59       	lddpc	r9,800027b4 <udd_ctrl_init+0x2c>
800027a4:	30 08       	mov	r8,0
800027a6:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
800027a8:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
800027aa:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800027ac:	48 39       	lddpc	r9,800027b8 <udd_ctrl_init+0x30>
800027ae:	93 08       	st.w	r9[0x0],r8
}
800027b0:	5e fc       	retal	r12
800027b2:	00 00       	add	r0,r0
800027b4:	00 00       	add	r0,r0
800027b6:	0a 00       	add	r0,r5
800027b8:	00 00       	add	r0,r0
800027ba:	07 4c       	ld.w	r12,--r3

800027bc <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800027bc:	30 39       	mov	r9,3
800027be:	48 a8       	lddpc	r8,800027e4 <udd_ctrl_send_zlp_in+0x28>
800027c0:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027c2:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800027c6:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800027c8:	fe 6a 01 60 	mov	r10,-130720
800027cc:	30 19       	mov	r9,1
800027ce:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800027d0:	fe 68 01 f0 	mov	r8,-130576
800027d4:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800027d6:	30 89       	mov	r9,8
800027d8:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027da:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027dc:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027e0:	5e fc       	retal	r12
800027e2:	00 00       	add	r0,r0
800027e4:	00 00       	add	r0,r0
800027e6:	07 4c       	ld.w	r12,--r3

800027e8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027e8:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027ec:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027f0:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027f2:	30 1a       	mov	r10,1
800027f4:	fe 69 02 20 	mov	r9,-130528
800027f8:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027fa:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027fe:	4c 38       	lddpc	r8,80002908 <udd_ctrl_in_sent+0x120>
80002800:	70 08       	ld.w	r8,r8[0x0]
80002802:	58 38       	cp.w	r8,3
80002804:	c0 71       	brne	80002812 <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80002806:	f0 1f 00 42 	mcall	8000290c <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000280a:	f0 1f 00 42 	mcall	80002910 <udd_ctrl_in_sent+0x128>
		return;
8000280e:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002812:	4c 18       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x12c>
80002814:	90 68       	ld.sh	r8,r8[0xc]
80002816:	4c 19       	lddpc	r9,80002918 <udd_ctrl_in_sent+0x130>
80002818:	92 07       	ld.sh	r7,r9[0x0]
8000281a:	f0 07 01 07 	sub	r7,r8,r7
8000281e:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002820:	c3 b1       	brne	80002896 <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
80002822:	4b f9       	lddpc	r9,8000291c <udd_ctrl_in_sent+0x134>
80002824:	13 8a       	ld.ub	r10,r9[0x0]
80002826:	30 09       	mov	r9,0
80002828:	f2 0a 18 00 	cp.b	r10,r9
8000282c:	c1 21       	brne	80002850 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000282e:	30 49       	mov	r9,4
80002830:	4b 68       	lddpc	r8,80002908 <udd_ctrl_in_sent+0x120>
80002832:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002834:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002838:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
8000283a:	31 08       	mov	r8,16
8000283c:	fe 6a 01 60 	mov	r10,-130720
80002840:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002842:	fe 6a 01 f0 	mov	r10,-130576
80002846:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002848:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
8000284c:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002850:	4b 19       	lddpc	r9,80002914 <udd_ctrl_in_sent+0x12c>
80002852:	92 b9       	ld.uh	r9,r9[0x6]
80002854:	5c 78       	castu.h	r8
80002856:	4b 3a       	lddpc	r10,80002920 <udd_ctrl_in_sent+0x138>
80002858:	94 8a       	ld.uh	r10,r10[0x0]
8000285a:	14 08       	add	r8,r10
8000285c:	10 39       	cp.w	r9,r8
8000285e:	e0 89 00 08 	brgt	8000286e <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
80002862:	4a d8       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x12c>
80002864:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002866:	58 0c       	cp.w	r12,0
80002868:	c0 30       	breq	8000286e <udd_ctrl_in_sent+0x86>
8000286a:	5d 1c       	icall	r12
8000286c:	c0 51       	brne	80002876 <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
8000286e:	30 09       	mov	r9,0
80002870:	4a b8       	lddpc	r8,8000291c <udd_ctrl_in_sent+0x134>
80002872:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002874:	c1 18       	rjmp	80002896 <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
80002876:	4a b9       	lddpc	r9,80002920 <udd_ctrl_in_sent+0x138>
80002878:	4a 88       	lddpc	r8,80002918 <udd_ctrl_in_sent+0x130>
8000287a:	90 0b       	ld.sh	r11,r8[0x0]
8000287c:	92 0a       	ld.sh	r10,r9[0x0]
8000287e:	f6 0a 00 0a 	add	r10,r11,r10
80002882:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
80002884:	30 09       	mov	r9,0
80002886:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002888:	4a 38       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x12c>
8000288a:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
8000288c:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002890:	5f 09       	sreq	r9
80002892:	4a 38       	lddpc	r8,8000291c <udd_ctrl_in_sent+0x134>
80002894:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002896:	4a 08       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x12c>
80002898:	70 2a       	ld.w	r10,r8[0x8]
8000289a:	4a 08       	lddpc	r8,80002918 <udd_ctrl_in_sent+0x130>
8000289c:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000289e:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800028a2:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
800028a4:	fe 68 01 30 	mov	r8,-130768
800028a8:	70 08       	ld.w	r8,r8[0x0]
800028aa:	e2 18 00 02 	andl	r8,0x2,COH
800028ae:	c0 91       	brne	800028c0 <udd_ctrl_in_sent+0xd8>
800028b0:	34 08       	mov	r8,64
800028b2:	f0 07 19 00 	cp.h	r7,r8
800028b6:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028ba:	58 07       	cp.w	r7,0
800028bc:	c0 91       	brne	800028ce <udd_ctrl_in_sent+0xe6>
800028be:	c1 48       	rjmp	800028e6 <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800028c0:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800028c4:	30 49       	mov	r9,4
800028c6:	49 18       	lddpc	r8,80002908 <udd_ctrl_in_sent+0x120>
800028c8:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
800028ca:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800028ce:	5c 79       	castu.h	r9
800028d0:	f4 09 00 09 	add	r9,r10,r9
800028d4:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028d8:	13 3a       	ld.ub	r10,r9++
800028da:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028dc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028e0:	ee 0a 19 00 	cp.h	r10,r7
800028e4:	cf a3       	brcs	800028d8 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028e6:	48 d8       	lddpc	r8,80002918 <udd_ctrl_in_sent+0x130>
800028e8:	90 09       	ld.sh	r9,r8[0x0]
800028ea:	f2 07 00 07 	add	r7,r9,r7
800028ee:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028f0:	30 18       	mov	r8,1
800028f2:	fe 69 01 60 	mov	r9,-130720
800028f6:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028f8:	fe 69 01 f0 	mov	r9,-130576
800028fc:	93 08       	st.w	r9[0x0],r8
800028fe:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
80002902:	e3 cd 80 80 	ldm	sp++,r7,pc
80002906:	00 00       	add	r0,r0
80002908:	00 00       	add	r0,r0
8000290a:	07 4c       	ld.w	r12,--r3
8000290c:	80 00       	ld.sh	r0,r0[0x0]
8000290e:	25 48       	sub	r8,84
80002910:	80 00       	ld.sh	r0,r0[0x0]
80002912:	27 88       	sub	r8,120
80002914:	00 00       	add	r0,r0
80002916:	0a 00       	add	r0,r5
80002918:	00 00       	add	r0,r0
8000291a:	07 4a       	ld.w	r10,--r3
8000291c:	00 00       	add	r0,r0
8000291e:	07 50       	ld.sh	r0,--r3
80002920:	00 00       	add	r0,r0
80002922:	07 14       	ld.sh	r4,r3++

80002924 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002924:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80002928:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
8000292c:	30 39       	mov	r9,3
8000292e:	f2 08 18 00 	cp.b	r8,r9
80002932:	e0 8b 00 88 	brhi	80002a42 <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
80002936:	fe 69 00 00 	mov	r9,-131072
8000293a:	72 79       	ld.w	r9,r9[0x1c]
8000293c:	30 17       	mov	r7,1
8000293e:	ee 08 09 47 	lsl	r7,r7,r8
80002942:	ef e9 00 09 	and	r9,r7,r9
80002946:	c7 e1       	brne	80002a42 <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002948:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
8000294c:	58 19       	cp.w	r9,1
8000294e:	c7 a5       	brlt	80002a42 <udd_ep_alloc+0x11e>
80002950:	58 29       	cp.w	r9,2
80002952:	e0 8a 00 06 	brle	8000295e <udd_ep_alloc+0x3a>
80002956:	58 39       	cp.w	r9,3
80002958:	c7 51       	brne	80002a42 <udd_ep_alloc+0x11e>
8000295a:	30 06       	mov	r6,0
8000295c:	c0 28       	rjmp	80002960 <udd_ep_alloc+0x3c>
8000295e:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002960:	f0 09 15 02 	lsl	r9,r8,0x2
80002964:	e0 39 ff 00 	sub	r9,130816
80002968:	72 0e       	ld.w	lr,r9[0x0]
8000296a:	5c 7a       	castu.h	r10
8000296c:	30 85       	mov	r5,8
8000296e:	f4 05 0c 4a 	max	r10,r10,r5
80002972:	e0 65 04 00 	mov	r5,1024
80002976:	f4 05 0d 4a 	min	r10,r10,r5
8000297a:	a1 7a       	lsl	r10,0x1
8000297c:	20 1a       	sub	r10,1
8000297e:	f4 0a 12 00 	clz	r10,r10
80002982:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80002986:	ab 7b       	lsl	r11,0xb
80002988:	e2 1b 18 00 	andl	r11,0x1800,COH
8000298c:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002990:	f4 0b 11 1c 	rsub	r11,r10,28
80002994:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002998:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
8000299c:	e2 1b 19 7c 	andl	r11,0x197c,COH
800029a0:	1c 9a       	mov	r10,lr
800029a2:	e0 1a e6 83 	andl	r10,0xe683
800029a6:	f7 ea 10 0a 	or	r10,r11,r10
800029aa:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800029ac:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029ae:	30 29       	mov	r9,2
800029b0:	f2 08 18 00 	cp.b	r8,r9
800029b4:	e0 8b 00 1d 	brhi	800029ee <udd_ep_alloc+0xca>
800029b8:	fe 6a 01 0c 	mov	r10,-130804
800029bc:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
800029be:	fe 6c 00 00 	mov	r12,-131072
800029c2:	30 16       	mov	r6,1
800029c4:	78 7e       	ld.w	lr,r12[0x1c]
800029c6:	ec 09 09 4b 	lsl	r11,r6,r9
800029ca:	f7 ee 00 0e 	and	lr,r11,lr
800029ce:	c0 b0       	breq	800029e4 <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
800029d0:	f7 e7 10 07 	or	r7,r11,r7
800029d4:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
800029d6:	78 7e       	ld.w	lr,r12[0x1c]
800029d8:	5c db       	com	r11
800029da:	1c 6b       	and	r11,lr
800029dc:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029de:	74 0b       	ld.w	r11,r10[0x0]
800029e0:	a1 db       	cbr	r11,0x1
800029e2:	95 0b       	st.w	r10[0x0],r11
800029e4:	20 19       	sub	r9,1
800029e6:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029e8:	f2 08 18 00 	cp.b	r8,r9
800029ec:	ce c3       	brcs	800029c4 <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029ee:	0e 9c       	mov	r12,r7
800029f0:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029f2:	fe 6e 00 00 	mov	lr,-131072
800029f6:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029f8:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029fa:	f8 08 08 49 	asr	r9,r12,r8
800029fe:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002a02:	c1 80       	breq	80002a32 <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
80002a04:	f0 0b 15 02 	lsl	r11,r8,0x2
80002a08:	fe 65 01 00 	mov	r5,-130816
80002a0c:	f6 05 00 09 	add	r9,r11,r5
80002a10:	72 05       	ld.w	r5,r9[0x0]
80002a12:	a1 b5       	sbr	r5,0x1
80002a14:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
80002a16:	7c 75       	ld.w	r5,lr[0x1c]
80002a18:	ec 08 09 4a 	lsl	r10,r6,r8
80002a1c:	0a 4a       	or	r10,r5
80002a1e:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
80002a20:	e0 3b fe d0 	sub	r11,130768
80002a24:	76 0a       	ld.w	r10,r11[0x0]
80002a26:	e6 1a 00 04 	andh	r10,0x4,COH
80002a2a:	c0 c0       	breq	80002a42 <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002a2c:	72 0a       	ld.w	r10,r9[0x0]
80002a2e:	a9 ba       	sbr	r10,0x9
80002a30:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002a32:	2f f8       	sub	r8,-1
80002a34:	5c 58       	castu.b	r8
80002a36:	ee 08 18 00 	cp.b	r8,r7
80002a3a:	fe 98 ff e0 	brls	800029fa <udd_ep_alloc+0xd6>
80002a3e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a42:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a46 <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a46:	fe 68 00 00 	mov	r8,-131072
80002a4a:	70 09       	ld.w	r9,r8[0x0]
80002a4c:	e0 19 ff 80 	andl	r9,0xff80
80002a50:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a52:	70 09       	ld.w	r9,r8[0x0]
80002a54:	a7 b9       	sbr	r9,0x7
80002a56:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a58:	fe 69 01 00 	mov	r9,-130816
80002a5c:	72 0b       	ld.w	r11,r9[0x0]
80002a5e:	30 8c       	mov	r12,8
80002a60:	34 0a       	mov	r10,64
80002a62:	f4 0c 0c 4a 	max	r10,r10,r12
80002a66:	e0 6c 04 00 	mov	r12,1024
80002a6a:	f4 0c 0d 4a 	min	r10,r10,r12
80002a6e:	a1 7a       	lsl	r10,0x1
80002a70:	20 1a       	sub	r10,1
80002a72:	f4 0a 12 00 	clz	r10,r10
80002a76:	f4 0a 11 1c 	rsub	r10,r10,28
80002a7a:	a5 6a       	lsl	r10,0x4
80002a7c:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a80:	e0 1b e6 83 	andl	r11,0xe683
80002a84:	16 4a       	or	r10,r11
80002a86:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a88:	72 0a       	ld.w	r10,r9[0x0]
80002a8a:	a1 ba       	sbr	r10,0x1
80002a8c:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a8e:	70 79       	ld.w	r9,r8[0x1c]
80002a90:	a1 a9       	sbr	r9,0x0
80002a92:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a94:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a98:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a9a:	fe 69 01 f0 	mov	r9,-130576
80002a9e:	30 4b       	mov	r11,4
80002aa0:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002aa2:	30 2b       	mov	r11,2
80002aa4:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002aa6:	e0 69 10 00 	mov	r9,4096
80002aaa:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002aac:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002ab0:	5e fc       	retal	r12
80002ab2:	d7 03       	nop

80002ab4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002ab4:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ab8:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002abc:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002abe:	30 1c       	mov	r12,1
80002ac0:	f0 1f 00 15 	mcall	80002b14 <udd_attach+0x60>
	otg_unfreeze_clock();
80002ac4:	fe 67 00 00 	mov	r7,-131072
80002ac8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002acc:	af c8       	cbr	r8,0xe
80002ace:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002ad2:	6e 08       	ld.w	r8,r7[0x0]
80002ad4:	a9 c8       	cbr	r8,0x8
80002ad6:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002ad8:	f0 1f 00 10 	mcall	80002b18 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002adc:	f0 1f 00 10 	mcall	80002b1c <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002ae0:	f0 1f 00 10 	mcall	80002b20 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002ae4:	30 8b       	mov	r11,8
80002ae6:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ae8:	30 19       	mov	r9,1
80002aea:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002aec:	31 08       	mov	r8,16
80002aee:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002af0:	30 4a       	mov	r10,4
80002af2:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002af4:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002af6:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002af8:	30 2a       	mov	r10,2
80002afa:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002afc:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002afe:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002b00:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b04:	af a8       	sbr	r8,0xe
80002b06:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002b0a:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002b0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b12:	00 00       	add	r0,r0
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	27 14       	sub	r4,113
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	39 e8       	mov	r8,-98
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	2a 46       	sub	r6,-92
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	27 88       	sub	r8,120

80002b24 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002b24:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002b28:	f0 1f 00 39 	mcall	80002c0c <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b2c:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002b30:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002b32:	fe 67 00 00 	mov	r7,-131072
80002b36:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3a:	af d8       	cbr	r8,0xf
80002b3c:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b40:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b44:	30 0a       	mov	r10,0
80002b46:	e0 6b 02 20 	mov	r11,544
80002b4a:	4b 2c       	lddpc	r12,80002c10 <udd_enable+0xec>
80002b4c:	f0 1f 00 32 	mcall	80002c14 <udd_enable+0xf0>
	otg_force_device_mode();
80002b50:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b54:	b9 b8       	sbr	r8,0x19
80002b56:	ef 48 08 00 	st.w	r7[2048],r8
80002b5a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b5e:	b9 c8       	cbr	r8,0x18
80002b60:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b64:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b68:	ad c8       	cbr	r8,0xc
80002b6a:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b6e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b72:	ad a8       	sbr	r8,0xc
80002b74:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b78:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b7c:	af b8       	sbr	r8,0xf
80002b7e:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b82:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b86:	af c8       	cbr	r8,0xe
80002b88:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b8c:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b90:	4a 28       	lddpc	r8,80002c18 <udd_enable+0xf4>
80002b92:	70 0a       	ld.w	r10,r8[0x0]
80002b94:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b96:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b9a:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b9e:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002ba0:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002ba2:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002ba6:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002baa:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002bac:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002bae:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002bb2:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002bb6:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002bb8:	6e 08       	ld.w	r8,r7[0x0]
80002bba:	ad c8       	cbr	r8,0xc
80002bbc:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002bbe:	6e 08       	ld.w	r8,r7[0x0]
80002bc0:	e8 18 0c 00 	orl	r8,0xc00
80002bc4:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002bc6:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bca:	a1 b8       	sbr	r8,0x1
80002bcc:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002bd0:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bd4:	af a8       	sbr	r8,0xe
80002bd6:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002bda:	fe 78 0c 00 	mov	r8,-62464
80002bde:	f0 fa 01 44 	ld.w	r10,r8[324]
80002be2:	30 1b       	mov	r11,1
80002be4:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002be8:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bec:	48 c8       	lddpc	r8,80002c1c <udd_enable+0xf8>
80002bee:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bf0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bf4:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bf6:	48 b8       	lddpc	r8,80002c20 <udd_enable+0xfc>
80002bf8:	11 ba       	ld.ub	r10,r8[0x3]
80002bfa:	2f fa       	sub	r10,-1
80002bfc:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bfe:	e3 b9 00 00 	mtsr	0x0,r9
80002c02:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002c06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	32 cc       	mov	r12,44
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	2c 24       	sub	r4,-62
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	22 44       	sub	r4,36
80002c18:	00 00       	add	r0,r0
80002c1a:	07 18       	ld.sh	r8,r3++
80002c1c:	00 00       	add	r0,r0
80002c1e:	07 48       	ld.w	r8,--r3
80002c20:	00 00       	add	r0,r0
80002c22:	0a 18       	sub	r8,r5

80002c24 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002c24:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002c28:	fe 68 00 00 	mov	r8,-131072
80002c2c:	70 18       	ld.w	r8,r8[0x4]
80002c2e:	e2 18 00 04 	andl	r8,0x4,COH
80002c32:	c0 f0       	breq	80002c50 <udd_interrupt+0x2c>
		udd_ack_sof();
80002c34:	fe 68 00 00 	mov	r8,-131072
80002c38:	30 49       	mov	r9,4
80002c3a:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c3c:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c40:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c44:	e0 81 02 ce 	brne	800031e0 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c48:	f0 1f 01 6f 	mcall	80003204 <udd_interrupt+0x5e0>
80002c4c:	e0 8f 02 ca 	bral	800031e0 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c50:	fe 68 00 00 	mov	r8,-131072
80002c54:	70 18       	ld.w	r8,r8[0x4]
80002c56:	e2 18 00 02 	andl	r8,0x2,COH
80002c5a:	c0 90       	breq	80002c6c <udd_interrupt+0x48>
		udd_ack_msof();
80002c5c:	30 29       	mov	r9,2
80002c5e:	fe 68 00 00 	mov	r8,-131072
80002c62:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c64:	f0 1f 01 68 	mcall	80003204 <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c68:	e0 8f 02 bc 	bral	800031e0 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c6c:	fe 68 00 00 	mov	r8,-131072
80002c70:	70 18       	ld.w	r8,r8[0x4]
80002c72:	e2 18 10 00 	andl	r8,0x1000,COH
80002c76:	e0 80 01 6f 	breq	80002f54 <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c7a:	fe 68 02 20 	mov	r8,-130528
80002c7e:	31 09       	mov	r9,16
80002c80:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c82:	30 89       	mov	r9,8
80002c84:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c86:	fe 68 01 30 	mov	r8,-130768
80002c8a:	70 08       	ld.w	r8,r8[0x0]
80002c8c:	e2 18 00 04 	andl	r8,0x4,COH
80002c90:	e0 80 00 87 	breq	80002d9e <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c94:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c98:	70 08       	ld.w	r8,r8[0x0]
80002c9a:	58 08       	cp.w	r8,0
80002c9c:	c0 50       	breq	80002ca6 <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c9e:	f0 1f 01 5c 	mcall	8000320c <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002ca2:	f0 1f 01 5c 	mcall	80003210 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002ca6:	fe 68 01 30 	mov	r8,-130768
80002caa:	70 08       	ld.w	r8,r8[0x0]
80002cac:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002cb0:	58 88       	cp.w	r8,8
80002cb2:	c0 90       	breq	80002cc4 <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002cb4:	f0 1f 01 58 	mcall	80003214 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002cb8:	30 49       	mov	r9,4
80002cba:	fe 68 01 60 	mov	r8,-130720
80002cbe:	91 09       	st.w	r8[0x0],r9
80002cc0:	e0 8f 02 90 	bral	800031e0 <udd_interrupt+0x5bc>
80002cc4:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002cc8:	fe fc 05 50 	ld.w	r12,pc[1360]
80002ccc:	fc 1b 20 00 	movh	r11,0x2000
80002cd0:	f0 0c 00 09 	add	r9,r8,r12
80002cd4:	11 3a       	ld.ub	r10,r8++
80002cd6:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002cda:	30 8a       	mov	r10,8
80002cdc:	ea 1a e0 00 	orh	r10,0xe000
80002ce0:	14 38       	cp.w	r8,r10
80002ce2:	cf 71       	brne	80002cd0 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002ce4:	fe f8 05 34 	ld.w	r8,pc[1332]
80002ce8:	90 19       	ld.sh	r9,r8[0x2]
80002cea:	5c c9       	swap.bh	r9
80002cec:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cee:	90 29       	ld.sh	r9,r8[0x4]
80002cf0:	5c c9       	swap.bh	r9
80002cf2:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cf4:	90 39       	ld.sh	r9,r8[0x6]
80002cf6:	5c c9       	swap.bh	r9
80002cf8:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cfa:	f0 1f 01 49 	mcall	8000321c <udd_interrupt+0x5f8>
80002cfe:	c0 91       	brne	80002d10 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002d00:	f0 1f 01 45 	mcall	80003214 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002d04:	30 49       	mov	r9,4
80002d06:	fe 68 01 60 	mov	r8,-130720
80002d0a:	91 09       	st.w	r8[0x0],r9
80002d0c:	e0 8f 02 6a 	bral	800031e0 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002d10:	30 49       	mov	r9,4
80002d12:	fe 68 01 60 	mov	r8,-130720
80002d16:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002d18:	fe f8 05 00 	ld.w	r8,pc[1280]
80002d1c:	11 89       	ld.ub	r9,r8[0x0]
80002d1e:	30 08       	mov	r8,0
80002d20:	f0 09 18 00 	cp.b	r9,r8
80002d24:	c1 94       	brge	80002d56 <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002d26:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002d2a:	90 e8       	ld.uh	r8,r8[0xc]
80002d2c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002d30:	5f 09       	sreq	r9
80002d32:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002d36:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d38:	30 08       	mov	r8,0
80002d3a:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d3e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d40:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d44:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d46:	30 29       	mov	r9,2
80002d48:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d4c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d4e:	f0 1f 01 38 	mcall	8000322c <udd_interrupt+0x608>
80002d52:	e0 8f 02 47 	bral	800031e0 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d56:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d5a:	90 39       	ld.sh	r9,r8[0x6]
80002d5c:	30 08       	mov	r8,0
80002d5e:	f0 09 19 00 	cp.h	r9,r8
80002d62:	c0 51       	brne	80002d6c <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d64:	f0 1f 01 33 	mcall	80003230 <udd_interrupt+0x60c>
80002d68:	e0 8f 02 3c 	bral	800031e0 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d6c:	30 08       	mov	r8,0
80002d6e:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d72:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d74:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d78:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d7a:	30 19       	mov	r9,1
80002d7c:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d80:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d82:	31 08       	mov	r8,16
80002d84:	fe 69 01 60 	mov	r9,-130720
80002d88:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d8a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d8e:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d90:	fe 6a 01 f0 	mov	r10,-130576
80002d94:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d96:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d9a:	e0 8f 02 23 	bral	800031e0 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d9e:	fe 68 01 30 	mov	r8,-130768
80002da2:	70 08       	ld.w	r8,r8[0x0]
80002da4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002da8:	c0 b0       	breq	80002dbe <udd_interrupt+0x19a>
80002daa:	fe 68 01 c0 	mov	r8,-130624
80002dae:	70 08       	ld.w	r8,r8[0x0]
80002db0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002db4:	c0 50       	breq	80002dbe <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002db6:	f0 1f 01 1e 	mcall	8000322c <udd_interrupt+0x608>
80002dba:	e0 8f 02 13 	bral	800031e0 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002dbe:	fe 68 01 30 	mov	r8,-130768
80002dc2:	70 08       	ld.w	r8,r8[0x0]
80002dc4:	e2 18 00 02 	andl	r8,0x2,COH
80002dc8:	e0 80 00 a3 	breq	80002f0e <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002dcc:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002dd0:	70 08       	ld.w	r8,r8[0x0]
80002dd2:	58 18       	cp.w	r8,1
80002dd4:	c1 10       	breq	80002df6 <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002dd6:	58 28       	cp.w	r8,2
80002dd8:	5f 09       	sreq	r9
80002dda:	58 48       	cp.w	r8,4
80002ddc:	5f 08       	sreq	r8
80002dde:	f3 e8 10 08 	or	r8,r9,r8
80002de2:	c0 40       	breq	80002dea <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002de4:	f0 1f 01 0a 	mcall	8000320c <udd_interrupt+0x5e8>
80002de8:	c0 38       	rjmp	80002dee <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002dea:	f0 1f 01 0b 	mcall	80003214 <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002dee:	f0 1f 01 09 	mcall	80003210 <udd_interrupt+0x5ec>
80002df2:	e0 8f 01 f7 	bral	800031e0 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002df6:	fe 68 01 30 	mov	r8,-130768
80002dfa:	70 0b       	ld.w	r11,r8[0x0]
80002dfc:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002e00:	fe f8 04 18 	ld.w	r8,pc[1048]
80002e04:	90 69       	ld.sh	r9,r8[0xc]
80002e06:	fe f8 04 22 	ld.w	r8,pc[1058]
80002e0a:	90 08       	ld.sh	r8,r8[0x0]
80002e0c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002e10:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002e14:	f6 0a 00 0a 	add	r10,r11,r10
80002e18:	14 3c       	cp.w	r12,r10
80002e1a:	c0 44       	brge	80002e22 <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002e1c:	10 19       	sub	r9,r8
80002e1e:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e22:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002e26:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002e28:	58 0b       	cp.w	r11,0
80002e2a:	e0 80 01 e2 	breq	800031ee <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e2e:	5c 78       	castu.h	r8
80002e30:	10 09       	add	r9,r8
80002e32:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002e36:	11 3a       	ld.ub	r10,r8++
80002e38:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e3a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e3e:	f6 0a 19 00 	cp.h	r10,r11
80002e42:	cf a3       	brcs	80002e36 <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e44:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e48:	92 08       	ld.sh	r8,r9[0x0]
80002e4a:	16 08       	add	r8,r11
80002e4c:	5c 88       	casts.h	r8
80002e4e:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e50:	34 09       	mov	r9,64
80002e52:	f2 0b 19 00 	cp.h	r11,r9
80002e56:	c0 e1       	brne	80002e72 <udd_interrupt+0x24e>
80002e58:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e5c:	92 ba       	ld.uh	r10,r9[0x6]
80002e5e:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e62:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e66:	92 89       	ld.uh	r9,r9[0x0]
80002e68:	f6 09 00 09 	add	r9,r11,r9
80002e6c:	12 3a       	cp.w	r10,r9
80002e6e:	e0 89 00 1a 	brgt	80002ea2 <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e72:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e76:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e78:	72 5c       	ld.w	r12,r9[0x14]
80002e7a:	58 0c       	cp.w	r12,0
80002e7c:	c0 b0       	breq	80002e92 <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e7e:	5d 1c       	icall	r12
80002e80:	c0 91       	brne	80002e92 <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e82:	f0 1f 00 e5 	mcall	80003214 <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e86:	30 29       	mov	r9,2
80002e88:	fe 68 01 60 	mov	r8,-130720
80002e8c:	91 09       	st.w	r8[0x0],r9
80002e8e:	e0 8f 01 a9 	bral	800031e0 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e92:	30 29       	mov	r9,2
80002e94:	fe 68 01 60 	mov	r8,-130720
80002e98:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e9a:	f0 1f 00 e6 	mcall	80003230 <udd_interrupt+0x60c>
80002e9e:	e0 8f 01 a1 	bral	800031e0 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002ea2:	fe f9 03 76 	ld.w	r9,pc[886]
80002ea6:	92 69       	ld.sh	r9,r9[0xc]
80002ea8:	f0 09 19 00 	cp.h	r9,r8
80002eac:	c2 21       	brne	80002ef0 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002eae:	fe f8 03 6a 	ld.w	r8,pc[874]
80002eb2:	70 5c       	ld.w	r12,r8[0x14]
80002eb4:	58 0c       	cp.w	r12,0
80002eb6:	c0 91       	brne	80002ec8 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002eb8:	f0 1f 00 d7 	mcall	80003214 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002ebc:	30 29       	mov	r9,2
80002ebe:	fe 68 01 60 	mov	r8,-130720
80002ec2:	91 09       	st.w	r8[0x0],r9
80002ec4:	e0 8f 01 8e 	bral	800031e0 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002ec8:	5d 1c       	icall	r12
80002eca:	c0 81       	brne	80002eda <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002ecc:	f0 1f 00 d2 	mcall	80003214 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002ed0:	30 29       	mov	r9,2
80002ed2:	fe 68 01 60 	mov	r8,-130720
80002ed6:	91 09       	st.w	r8[0x0],r9
80002ed8:	c8 49       	rjmp	800031e0 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002eda:	fe f9 03 4a 	ld.w	r9,pc[842]
80002ede:	fe f8 03 4a 	ld.w	r8,pc[842]
80002ee2:	90 0b       	ld.sh	r11,r8[0x0]
80002ee4:	92 0a       	ld.sh	r10,r9[0x0]
80002ee6:	f6 0a 00 0a 	add	r10,r11,r10
80002eea:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002eec:	30 09       	mov	r9,0
80002eee:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002ef0:	fe 69 01 60 	mov	r9,-130720
80002ef4:	30 28       	mov	r8,2
80002ef6:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ef8:	31 08       	mov	r8,16
80002efa:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002efc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002f00:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002f02:	fe 6a 01 f0 	mov	r10,-130576
80002f06:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f08:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002f0c:	c6 a9       	rjmp	800031e0 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002f0e:	fe 68 01 30 	mov	r8,-130768
80002f12:	70 08       	ld.w	r8,r8[0x0]
80002f14:	e2 18 00 08 	andl	r8,0x8,COH
80002f18:	c1 80       	breq	80002f48 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002f1a:	30 89       	mov	r9,8
80002f1c:	fe 68 01 60 	mov	r8,-130720
80002f20:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002f22:	fe 68 01 30 	mov	r8,-130768
80002f26:	70 08       	ld.w	r8,r8[0x0]
80002f28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f2c:	e0 81 01 5a 	brne	800031e0 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002f30:	fe f8 02 d8 	ld.w	r8,pc[728]
80002f34:	70 08       	ld.w	r8,r8[0x0]
80002f36:	58 38       	cp.w	r8,3
80002f38:	e0 81 01 54 	brne	800031e0 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f3c:	e8 69 00 00 	mov	r9,524288
80002f40:	fe 68 01 f0 	mov	r8,-130576
80002f44:	91 09       	st.w	r8[0x0],r9
80002f46:	c4 d9       	rjmp	800031e0 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f48:	fe 68 01 30 	mov	r8,-130768
80002f4c:	70 08       	ld.w	r8,r8[0x0]
80002f4e:	e2 18 00 10 	andl	r8,0x10,COH
80002f52:	c0 e1       	brne	80002f6e <udd_interrupt+0x34a>
80002f54:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f58:	0e 9a       	mov	r10,r7
80002f5a:	fe 69 01 34 	mov	r9,-130764
80002f5e:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f60:	fe 66 00 00 	mov	r6,-131072
80002f64:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f68:	e0 63 10 00 	mov	r3,4096
80002f6c:	c1 e8       	rjmp	80002fa8 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f6e:	31 09       	mov	r9,16
80002f70:	fe 68 01 60 	mov	r8,-130720
80002f74:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f76:	fe 68 01 30 	mov	r8,-130768
80002f7a:	70 08       	ld.w	r8,r8[0x0]
80002f7c:	e2 18 00 02 	andl	r8,0x2,COH
80002f80:	e0 81 01 30 	brne	800031e0 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f84:	fe f8 02 84 	ld.w	r8,pc[644]
80002f88:	70 08       	ld.w	r8,r8[0x0]
80002f8a:	58 18       	cp.w	r8,1
80002f8c:	c0 41       	brne	80002f94 <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f8e:	f0 1f 00 a9 	mcall	80003230 <udd_interrupt+0x60c>
80002f92:	c2 79       	rjmp	800031e0 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f94:	58 48       	cp.w	r8,4
80002f96:	e0 81 01 25 	brne	800031e0 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f9a:	e8 69 00 00 	mov	r9,524288
80002f9e:	fe 68 01 f0 	mov	r8,-130576
80002fa2:	91 09       	st.w	r8[0x0],r9
80002fa4:	c1 e9       	rjmp	800031e0 <udd_interrupt+0x5bc>
80002fa6:	10 9b       	mov	r11,r8
80002fa8:	f6 c8 ff ff 	sub	r8,r11,-1
80002fac:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002fae:	6c 45       	ld.w	r5,r6[0x10]
80002fb0:	10 9e       	mov	lr,r8
80002fb2:	e8 0b 09 4b 	lsl	r11,r4,r11
80002fb6:	f7 e5 00 05 	and	r5,r11,r5
80002fba:	c4 b0       	breq	80003050 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002fbc:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002fbe:	f7 e5 00 05 	and	r5,r11,r5
80002fc2:	c4 70       	breq	80003050 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002fc4:	fe 69 00 00 	mov	r9,-131072
80002fc8:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002fca:	74 09       	ld.w	r9,r10[0x0]
80002fcc:	e6 19 20 00 	andh	r9,0x2000,COH
80002fd0:	c0 50       	breq	80002fda <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002fd2:	fe 69 00 00 	mov	r9,-131072
80002fd6:	93 3b       	st.w	r9[0xc],r11
80002fd8:	c0 a8       	rjmp	80002fec <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fda:	f0 09 15 04 	lsl	r9,r8,0x4
80002fde:	e0 39 fd 00 	sub	r9,130304
80002fe2:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fe4:	b1 89       	lsr	r9,0x10
80002fe6:	74 2a       	ld.w	r10,r10[0x8]
80002fe8:	12 1a       	sub	r10,r9
80002fea:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fec:	a3 68       	lsl	r8,0x2
80002fee:	fe 6b 01 00 	mov	r11,-130816
80002ff2:	f0 0b 00 09 	add	r9,r8,r11
80002ff6:	72 09       	ld.w	r9,r9[0x0]
80002ff8:	e2 19 01 00 	andl	r9,0x100,COH
80002ffc:	c2 60       	breq	80003048 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002ffe:	78 09       	ld.w	r9,r12[0x0]
80003000:	e6 19 40 00 	andh	r9,0x4000,COH
80003004:	c2 20       	breq	80003048 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80003006:	fe 6a 01 60 	mov	r10,-130720
8000300a:	f0 0a 00 09 	add	r9,r8,r10
8000300e:	30 1a       	mov	r10,1
80003010:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80003012:	fe 6b 01 30 	mov	r11,-130768
80003016:	f0 0b 00 09 	add	r9,r8,r11
8000301a:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
8000301c:	fe 6b 01 90 	mov	r11,-130672
80003020:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80003024:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80003028:	f9 ba 01 01 	movne	r10,1
8000302c:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80003030:	e0 38 fe 10 	sub	r8,130576
80003034:	30 19       	mov	r9,1
80003036:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003038:	e0 68 10 00 	mov	r8,4096
8000303c:	f0 0e 09 4e 	lsl	lr,r8,lr
80003040:	fe 68 00 00 	mov	r8,-131072
80003044:	91 6e       	st.w	r8[0x18],lr
80003046:	cc d8       	rjmp	800031e0 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003048:	30 0b       	mov	r11,0
8000304a:	f0 1f 00 7c 	mcall	80003238 <udd_interrupt+0x614>
8000304e:	cc 98       	rjmp	800031e0 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003050:	6c 4b       	ld.w	r11,r6[0x10]
80003052:	e6 0e 09 4e 	lsl	lr,r3,lr
80003056:	fd eb 00 0b 	and	r11,lr,r11
8000305a:	c4 60       	breq	800030e6 <udd_interrupt+0x4c2>
8000305c:	e0 7b fe d0 	mov	r11,130768
80003060:	f2 0b 00 02 	add	r2,r9,r11
80003064:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003068:	76 05       	ld.w	r5,r11[0x0]
8000306a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000306e:	c1 50       	breq	80003098 <udd_interrupt+0x474>
80003070:	72 05       	ld.w	r5,r9[0x0]
80003072:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003076:	c1 10       	breq	80003098 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80003078:	fe 6a 02 20 	mov	r10,-130528
8000307c:	e4 0a 00 08 	add	r8,r2,r10
80003080:	30 19       	mov	r9,1
80003082:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80003084:	e0 32 fe a0 	sub	r2,130720
80003088:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
8000308a:	e0 69 40 00 	mov	r9,16384
8000308e:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003090:	30 0b       	mov	r11,0
80003092:	f0 1f 00 6a 	mcall	80003238 <udd_interrupt+0x614>
80003096:	ca 58       	rjmp	800031e0 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80003098:	76 0b       	ld.w	r11,r11[0x0]
8000309a:	e2 1b 10 00 	andl	r11,0x1000,COH
8000309e:	c2 40       	breq	800030e6 <udd_interrupt+0x4c2>
800030a0:	72 0b       	ld.w	r11,r9[0x0]
800030a2:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
800030a6:	c2 01       	brne	800030e6 <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
800030a8:	fe 69 02 20 	mov	r9,-130528
800030ac:	e4 09 00 08 	add	r8,r2,r9
800030b0:	e0 69 10 00 	mov	r9,4096
800030b4:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
800030b6:	fe 68 00 00 	mov	r8,-131072
800030ba:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
800030bc:	78 08       	ld.w	r8,r12[0x0]
800030be:	30 09       	mov	r9,0
800030c0:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
800030c4:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
800030c6:	fe 6b 01 00 	mov	r11,-130816
800030ca:	e4 0b 00 08 	add	r8,r2,r11
800030ce:	70 09       	ld.w	r9,r8[0x0]
800030d0:	a9 d9       	cbr	r9,0x9
800030d2:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
800030d4:	e0 32 fe 10 	sub	r2,130576
800030d8:	e8 68 00 00 	mov	r8,524288
800030dc:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030de:	e4 68 00 00 	mov	r8,262144
800030e2:	85 08       	st.w	r2[0x0],r8
800030e4:	c7 e8       	rjmp	800031e0 <udd_interrupt+0x5bc>
800030e6:	2f 0a       	sub	r10,-16
800030e8:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030ea:	58 38       	cp.w	r8,3
800030ec:	fe 91 ff 5d 	brne	80002fa6 <udd_interrupt+0x382>
800030f0:	c8 38       	rjmp	800031f6 <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030f2:	30 89       	mov	r9,8
800030f4:	fe 68 00 00 	mov	r8,-131072
800030f8:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030fa:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030fe:	30 15       	mov	r5,1
80003100:	0a 9b       	mov	r11,r5
80003102:	0e 9c       	mov	r12,r7
80003104:	f0 1f 00 4d 	mcall	80003238 <udd_interrupt+0x614>
80003108:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000310a:	0c 37       	cp.w	r7,r6
8000310c:	cf a1       	brne	80003100 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
8000310e:	f0 1f 00 4c 	mcall	8000323c <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80003112:	f0 1f 00 4c 	mcall	80003240 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
80003116:	f0 1f 00 3f 	mcall	80003210 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
8000311a:	c6 38       	rjmp	800031e0 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
8000311c:	fe 68 00 00 	mov	r8,-131072
80003120:	70 48       	ld.w	r8,r8[0x10]
80003122:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003126:	c1 b0       	breq	8000315c <udd_interrupt+0x538>
80003128:	fe 68 00 00 	mov	r8,-131072
8000312c:	70 18       	ld.w	r8,r8[0x4]
8000312e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003132:	c1 50       	breq	8000315c <udd_interrupt+0x538>
		otg_unfreeze_clock();
80003134:	fe 68 00 00 	mov	r8,-131072
80003138:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000313c:	af c9       	cbr	r9,0xe
8000313e:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80003142:	30 19       	mov	r9,1
80003144:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
80003146:	31 09       	mov	r9,16
80003148:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
8000314a:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000314e:	af a9       	sbr	r9,0xe
80003150:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
80003154:	30 0c       	mov	r12,0
80003156:	f0 1f 00 3c 	mcall	80003244 <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
8000315a:	c4 38       	rjmp	800031e0 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000315c:	fe 68 00 00 	mov	r8,-131072
80003160:	70 48       	ld.w	r8,r8[0x10]
80003162:	e2 18 00 10 	andl	r8,0x10,COH
80003166:	c2 10       	breq	800031a8 <udd_interrupt+0x584>
80003168:	fe 68 00 00 	mov	r8,-131072
8000316c:	70 18       	ld.w	r8,r8[0x4]
8000316e:	e2 18 00 10 	andl	r8,0x10,COH
80003172:	c1 b0       	breq	800031a8 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003174:	fe 68 00 00 	mov	r8,-131072
80003178:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000317c:	af c9       	cbr	r9,0xe
8000317e:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003182:	c0 58       	rjmp	8000318c <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80003184:	70 19       	ld.w	r9,r8[0x4]
80003186:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000318a:	c0 61       	brne	80003196 <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000318c:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003190:	e2 19 40 00 	andl	r9,0x4000,COH
80003194:	cf 80       	breq	80003184 <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80003196:	fe 68 00 00 	mov	r8,-131072
8000319a:	31 09       	mov	r9,16
8000319c:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
8000319e:	30 1c       	mov	r12,1
800031a0:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
800031a2:	f0 1f 00 29 	mcall	80003244 <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
800031a6:	c1 d8       	rjmp	800031e0 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
800031a8:	fe 68 00 00 	mov	r8,-131072
800031ac:	f0 f8 08 04 	ld.w	r8,r8[2052]
800031b0:	e2 18 00 02 	andl	r8,0x2,COH
800031b4:	c1 60       	breq	800031e0 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
800031b6:	fe 68 00 00 	mov	r8,-131072
800031ba:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031be:	af c9       	cbr	r9,0xe
800031c0:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
800031c4:	30 29       	mov	r9,2
800031c6:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
800031ca:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031ce:	af a9       	sbr	r9,0xe
800031d0:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
800031d4:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031d8:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031dc:	f0 1f 00 1b 	mcall	80003248 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031e0:	fe 68 00 00 	mov	r8,-131072
800031e4:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031e8:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031ec:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031ee:	48 f9       	lddpc	r9,80003228 <udd_interrupt+0x604>
800031f0:	b2 08       	st.h	r9[0x0],r8
800031f2:	fe 9f fe 40 	bral	80002e72 <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031f6:	fe 68 00 00 	mov	r8,-131072
800031fa:	70 18       	ld.w	r8,r8[0x4]
800031fc:	e2 18 00 08 	andl	r8,0x8,COH
80003200:	c8 e0       	breq	8000311c <udd_interrupt+0x4f8>
80003202:	c7 8b       	rjmp	800030f2 <udd_interrupt+0x4ce>
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	37 c8       	mov	r8,124
80003208:	00 00       	add	r0,r0
8000320a:	07 4c       	ld.w	r12,--r3
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	25 48       	sub	r8,84
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	27 88       	sub	r8,120
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	25 30       	sub	r0,83
80003218:	00 00       	add	r0,r0
8000321a:	0a 00       	add	r0,r5
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	3a 48       	mov	r8,-92
80003220:	00 00       	add	r0,r0
80003222:	07 50       	ld.sh	r0,--r3
80003224:	00 00       	add	r0,r0
80003226:	07 14       	ld.sh	r4,r3++
80003228:	00 00       	add	r0,r0
8000322a:	07 4a       	ld.w	r10,--r3
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	27 e8       	sub	r8,126
80003230:	80 00       	ld.sh	r0,r0[0x0]
80003232:	27 bc       	sub	r12,123
80003234:	00 00       	add	r0,r0
80003236:	07 18       	ld.sh	r8,r3++
80003238:	80 00       	ld.sh	r0,r0[0x0]
8000323a:	25 5c       	sub	r12,85
8000323c:	80 00       	ld.sh	r0,r0[0x0]
8000323e:	39 e8       	mov	r8,-98
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	2a 46       	sub	r6,-92
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	27 14       	sub	r4,113
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	3f 48       	mov	r8,-12

8000324c <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000324c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003250:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003252:	fe 78 0c 00 	mov	r8,-62464
80003256:	71 59       	ld.w	r9,r8[0x54]
80003258:	e2 19 00 40 	andl	r9,0x40,COH
8000325c:	cf d0       	breq	80003256 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000325e:	a3 6c       	lsl	r12,0x2
80003260:	e0 2c f3 f8 	sub	r12,62456
80003264:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80003266:	30 19       	mov	r9,1
80003268:	f2 0b 09 4b 	lsl	r11,r9,r11
8000326c:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000326e:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003270:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80003274:	5e fc       	retal	r12
80003276:	d7 03       	nop

80003278 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003278:	eb cd 40 e0 	pushm	r5-r7,lr
8000327c:	18 96       	mov	r6,r12
8000327e:	58 9c       	cp.w	r12,9
80003280:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003282:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80003286:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003288:	48 f8       	lddpc	r8,800032c4 <sysclk_enable_pbb_module+0x4c>
8000328a:	f0 07 07 09 	ld.ub	r9,r8[r7]
8000328e:	30 08       	mov	r8,0
80003290:	f0 09 18 00 	cp.b	r9,r8
80003294:	c0 a1       	brne	800032a8 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003296:	ee 0b 15 01 	lsl	r11,r7,0x1
8000329a:	f9 bb 01 06 	movne	r11,6
8000329e:	f9 bb 00 02 	moveq	r11,2
800032a2:	30 1c       	mov	r12,1
800032a4:	f0 1f 00 09 	mcall	800032c8 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
800032a8:	48 78       	lddpc	r8,800032c4 <sysclk_enable_pbb_module+0x4c>
800032aa:	f0 07 07 09 	ld.ub	r9,r8[r7]
800032ae:	2f f9       	sub	r9,-1
800032b0:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032b4:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800032b8:	0c 9b       	mov	r11,r6
800032ba:	30 3c       	mov	r12,3
800032bc:	f0 1f 00 03 	mcall	800032c8 <sysclk_enable_pbb_module+0x50>
}
800032c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032c4:	00 00       	add	r0,r0
800032c6:	07 54       	ld.sh	r4,--r3
800032c8:	80 00       	ld.sh	r0,r0[0x0]
800032ca:	32 4c       	mov	r12,36

800032cc <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800032cc:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800032ce:	30 1c       	mov	r12,1
800032d0:	f0 1f 00 0f 	mcall	8000330c <sysclk_enable_usb+0x40>
800032d4:	30 3b       	mov	r11,3
800032d6:	30 1c       	mov	r12,1
800032d8:	f0 1f 00 0e 	mcall	80003310 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032dc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032e0:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032e2:	fe 78 0c 00 	mov	r8,-62464
800032e6:	e0 6a 03 07 	mov	r10,775
800032ea:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032ec:	70 0a       	ld.w	r10,r8[0x0]
800032ee:	a3 aa       	sbr	r10,0x2
800032f0:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032f2:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032f6:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032f8:	e2 19 00 80 	andl	r9,0x80,COH
800032fc:	cf d0       	breq	800032f6 <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032fe:	30 49       	mov	r9,4
80003300:	fe 78 0c 00 	mov	r8,-62464
80003304:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
80003308:	d8 02       	popm	pc
8000330a:	00 00       	add	r0,r0
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	32 78       	mov	r8,39
80003310:	80 00       	ld.sh	r0,r0[0x0]
80003312:	32 4c       	mov	r12,36

80003314 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
80003314:	5e fc       	retal	r12
80003316:	d7 03       	nop

80003318 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
80003318:	49 e8       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
8000331a:	11 88       	ld.ub	r8,r8[0x0]
8000331c:	30 09       	mov	r9,0
8000331e:	f2 08 18 00 	cp.b	r8,r9
80003322:	c1 84       	brge	80003352 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003324:	e2 18 00 60 	andl	r8,0x60,COH
80003328:	e0 48 00 20 	cp.w	r8,32
8000332c:	c3 11       	brne	8000338e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000332e:	49 98       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
80003330:	11 99       	ld.ub	r9,r8[0x1]
80003332:	32 18       	mov	r8,33
80003334:	f0 09 18 00 	cp.b	r9,r8
80003338:	c2 b1       	brne	8000338e <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000333a:	49 68       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
8000333c:	90 39       	ld.sh	r9,r8[0x6]
8000333e:	30 78       	mov	r8,7
80003340:	f0 09 19 00 	cp.h	r9,r8
80003344:	c2 51       	brne	8000338e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
80003346:	49 38       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
80003348:	49 39       	lddpc	r9,80003394 <udi_cdc_comm_setup+0x7c>
8000334a:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000334c:	30 79       	mov	r9,7
8000334e:	b0 69       	st.h	r8[0xc],r9
80003350:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003352:	e2 18 00 60 	andl	r8,0x60,COH
80003356:	e0 48 00 20 	cp.w	r8,32
8000335a:	c1 a1       	brne	8000338e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000335c:	48 d8       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
8000335e:	11 98       	ld.ub	r8,r8[0x1]
80003360:	32 09       	mov	r9,32
80003362:	f2 08 18 00 	cp.b	r8,r9
80003366:	c0 60       	breq	80003372 <udi_cdc_comm_setup+0x5a>
80003368:	32 29       	mov	r9,34
8000336a:	f2 08 18 00 	cp.b	r8,r9
8000336e:	c1 01       	brne	8000338e <udi_cdc_comm_setup+0x76>
80003370:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003372:	48 88       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
80003374:	90 39       	ld.sh	r9,r8[0x6]
80003376:	30 78       	mov	r8,7
80003378:	f0 09 19 00 	cp.h	r9,r8
8000337c:	c0 91       	brne	8000338e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
8000337e:	48 58       	lddpc	r8,80003390 <udi_cdc_comm_setup+0x78>
80003380:	48 69       	lddpc	r9,80003398 <udi_cdc_comm_setup+0x80>
80003382:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003384:	48 49       	lddpc	r9,80003394 <udi_cdc_comm_setup+0x7c>
80003386:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003388:	30 79       	mov	r9,7
8000338a:	b0 69       	st.h	r8[0xc],r9
8000338c:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
8000338e:	5e fd       	retal	0
80003390:	00 00       	add	r0,r0
80003392:	0a 00       	add	r0,r5
80003394:	00 00       	add	r0,r0
80003396:	07 58       	ld.sh	r8,--r3
80003398:	80 00       	ld.sh	r0,r0[0x0]
8000339a:	33 a0       	mov	r0,58

8000339c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
8000339c:	5e fd       	retal	0

8000339e <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
8000339e:	5e fd       	retal	0

800033a0 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
800033a0:	5e fc       	retal	r12
800033a2:	d7 03       	nop

800033a4 <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
800033a4:	48 68       	lddpc	r8,800033bc <udi_cdc_is_rx_ready+0x18>
800033a6:	11 8a       	ld.ub	r10,r8[0x0]
800033a8:	48 68       	lddpc	r8,800033c0 <udi_cdc_is_rx_ready+0x1c>
800033aa:	90 08       	ld.sh	r8,r8[0x0]
800033ac:	48 69       	lddpc	r9,800033c4 <udi_cdc_is_rx_ready+0x20>
800033ae:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
800033b2:	f0 09 19 00 	cp.h	r9,r8
}
800033b6:	5f bc       	srhi	r12
800033b8:	5e fc       	retal	r12
800033ba:	00 00       	add	r0,r0
800033bc:	00 00       	add	r0,r0
800033be:	07 ec       	ld.ub	r12,r3[0x6]
800033c0:	00 00       	add	r0,r0
800033c2:	07 e8       	ld.ub	r8,r3[0x6]
800033c4:	00 00       	add	r0,r0
800033c6:	07 e4       	ld.ub	r4,r3[0x6]

800033c8 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
800033c8:	49 58       	lddpc	r8,8000341c <udi_cdc_is_tx_ready+0x54>
800033ca:	11 89       	ld.ub	r9,r8[0x0]
800033cc:	49 58       	lddpc	r8,80003420 <udi_cdc_is_tx_ready+0x58>
800033ce:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033d2:	34 08       	mov	r8,64
800033d4:	f0 09 19 00 	cp.h	r9,r8
800033d8:	c0 20       	breq	800033dc <udi_cdc_is_tx_ready+0x14>
800033da:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033dc:	49 28       	lddpc	r8,80003424 <udi_cdc_is_tx_ready+0x5c>
800033de:	11 88       	ld.ub	r8,r8[0x0]
800033e0:	58 08       	cp.w	r8,0
800033e2:	c1 21       	brne	80003406 <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033e4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033e8:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033ea:	49 09       	lddpc	r9,80003428 <udi_cdc_is_tx_ready+0x60>
800033ec:	13 89       	ld.ub	r9,r9[0x0]
800033ee:	58 09       	cp.w	r9,0
800033f0:	c0 91       	brne	80003402 <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033f2:	30 1a       	mov	r10,1
800033f4:	48 c9       	lddpc	r9,80003424 <udi_cdc_is_tx_ready+0x5c>
800033f6:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033f8:	48 99       	lddpc	r9,8000341c <udi_cdc_is_tx_ready+0x54>
800033fa:	13 8a       	ld.ub	r10,r9[0x0]
800033fc:	58 0a       	cp.w	r10,0
800033fe:	5f 0a       	sreq	r10
80003400:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003402:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
80003406:	48 68       	lddpc	r8,8000341c <udi_cdc_is_tx_ready+0x54>
80003408:	11 89       	ld.ub	r9,r8[0x0]
8000340a:	48 68       	lddpc	r8,80003420 <udi_cdc_is_tx_ready+0x58>
8000340c:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80003410:	34 08       	mov	r8,64
80003412:	f0 09 19 00 	cp.h	r9,r8
80003416:	5f 1c       	srne	r12
}
80003418:	5e fc       	retal	r12
8000341a:	00 00       	add	r0,r0
8000341c:	00 00       	add	r0,r0
8000341e:	07 5f       	ld.sh	pc,--r3
80003420:	00 00       	add	r0,r0
80003422:	07 60       	ld.uh	r0,--r3
80003424:	00 00       	add	r0,r0
80003426:	08 71       	tst	r1,r4
80003428:	00 00       	add	r0,r0
8000342a:	07 ee       	ld.ub	lr,r3[0x6]

8000342c <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
8000342c:	eb cd 40 fe 	pushm	r1-r7,lr
80003430:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003432:	49 88       	lddpc	r8,80003490 <udi_cdc_putc+0x64>
80003434:	11 e9       	ld.ub	r9,r8[0x6]
80003436:	30 98       	mov	r8,9
80003438:	f0 09 18 00 	cp.b	r9,r8
8000343c:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
8000343e:	49 66       	lddpc	r6,80003494 <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003440:	49 63       	lddpc	r3,80003498 <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003442:	49 75       	lddpc	r5,8000349c <udi_cdc_putc+0x70>
80003444:	49 72       	lddpc	r2,800034a0 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003446:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003448:	f0 1f 00 17 	mcall	800034a4 <udi_cdc_putc+0x78>
8000344c:	c0 51       	brne	80003456 <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
8000344e:	0d 88       	ld.ub	r8,r6[0x0]
80003450:	58 08       	cp.w	r8,0
80003452:	cf b1       	brne	80003448 <udi_cdc_putc+0x1c>
80003454:	c1 b8       	rjmp	8000348a <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003456:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000345a:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
8000345c:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000345e:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
80003462:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80003466:	f0 0c 15 06 	lsl	r12,r8,0x6
8000346a:	f8 0b 00 0b 	add	r11,r12,r11
8000346e:	e4 0b 0b 07 	st.b	r2[r11],r7
80003472:	2f f9       	sub	r9,-1
80003474:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003478:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
8000347c:	58 04       	cp.w	r4,0
8000347e:	c0 31       	brne	80003484 <udi_cdc_putc+0x58>
80003480:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003484:	a9 47       	asr	r7,0x8
80003486:	02 94       	mov	r4,r1
80003488:	ce 0b       	rjmp	80003448 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
8000348a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000348e:	00 00       	add	r0,r0
80003490:	00 00       	add	r0,r0
80003492:	07 58       	ld.sh	r8,--r3
80003494:	00 00       	add	r0,r0
80003496:	07 ed       	ld.ub	sp,r3[0x6]
80003498:	00 00       	add	r0,r0
8000349a:	07 5f       	ld.sh	pc,--r3
8000349c:	00 00       	add	r0,r0
8000349e:	07 60       	ld.uh	r0,--r3
800034a0:	00 00       	add	r0,r0
800034a2:	07 64       	ld.uh	r4,--r3
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	33 c8       	mov	r8,60

800034a8 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
800034a8:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034ac:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800034b0:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
800034b2:	49 78       	lddpc	r8,8000350c <udi_cdc_rx_start+0x64>
800034b4:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
800034b6:	49 78       	lddpc	r8,80003510 <udi_cdc_rx_start+0x68>
800034b8:	11 88       	ld.ub	r8,r8[0x0]
800034ba:	58 08       	cp.w	r8,0
800034bc:	c0 a1       	brne	800034d0 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
800034be:	49 68       	lddpc	r8,80003514 <udi_cdc_rx_start+0x6c>
800034c0:	90 08       	ld.sh	r8,r8[0x0]
800034c2:	49 6a       	lddpc	r10,80003518 <udi_cdc_rx_start+0x70>
800034c4:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
800034c8:	f0 0a 19 00 	cp.h	r10,r8
800034cc:	e0 88 00 06 	brls	800034d8 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034d0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800034d4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034d8:	30 0a       	mov	r10,0
800034da:	48 f8       	lddpc	r8,80003514 <udi_cdc_rx_start+0x6c>
800034dc:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034de:	58 07       	cp.w	r7,0
800034e0:	5f 0a       	sreq	r10
800034e2:	48 b8       	lddpc	r8,8000350c <udi_cdc_rx_start+0x64>
800034e4:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034e6:	30 1a       	mov	r10,1
800034e8:	48 a8       	lddpc	r8,80003510 <udi_cdc_rx_start+0x68>
800034ea:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034ec:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034f0:	f0 1f 00 0b 	mcall	8000351c <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034f4:	a7 67       	lsl	r7,0x6
800034f6:	48 b8       	lddpc	r8,80003520 <udi_cdc_rx_start+0x78>
800034f8:	34 09       	mov	r9,64
800034fa:	48 ba       	lddpc	r10,80003524 <udi_cdc_rx_start+0x7c>
800034fc:	0e 0a       	add	r10,r7
800034fe:	30 1b       	mov	r11,1
80003500:	30 2c       	mov	r12,2
80003502:	f0 1f 00 0a 	mcall	80003528 <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
80003506:	e3 cd 80 80 	ldm	sp++,r7,pc
8000350a:	00 00       	add	r0,r0
8000350c:	00 00       	add	r0,r0
8000350e:	07 ec       	ld.ub	r12,r3[0x6]
80003510:	00 00       	add	r0,r0
80003512:	08 70       	tst	r0,r4
80003514:	00 00       	add	r0,r0
80003516:	07 e8       	ld.ub	r8,r3[0x6]
80003518:	00 00       	add	r0,r0
8000351a:	07 e4       	ld.ub	r4,r3[0x6]
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	33 a4       	mov	r4,58
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	35 a8       	mov	r8,90
80003524:	00 00       	add	r0,r0
80003526:	07 f0       	ld.ub	r0,r3[0x7]
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	25 cc       	sub	r12,92

8000352c <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
8000352c:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000352e:	49 88       	lddpc	r8,8000358c <udi_cdc_getc+0x60>
80003530:	11 e9       	ld.ub	r9,r8[0x6]
80003532:	30 98       	mov	r8,9
80003534:	f0 09 18 00 	cp.b	r9,r8
80003538:	5f 02       	sreq	r2
8000353a:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
8000353c:	49 56       	lddpc	r6,80003590 <udi_cdc_getc+0x64>
8000353e:	49 67       	lddpc	r7,80003594 <udi_cdc_getc+0x68>
80003540:	49 65       	lddpc	r5,80003598 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
80003542:	49 74       	lddpc	r4,8000359c <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003544:	49 71       	lddpc	r1,800035a0 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003546:	06 90       	mov	r0,r3
80003548:	c0 48       	rjmp	80003550 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
8000354a:	09 88       	ld.ub	r8,r4[0x0]
8000354c:	58 08       	cp.w	r8,0
8000354e:	c1 b0       	breq	80003584 <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003550:	0d 89       	ld.ub	r9,r6[0x0]
80003552:	8e 08       	ld.sh	r8,r7[0x0]
80003554:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003558:	f0 09 19 00 	cp.h	r9,r8
8000355c:	fe 98 ff f7 	brls	8000354a <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003560:	0d 88       	ld.ub	r8,r6[0x0]
80003562:	8e 09       	ld.sh	r9,r7[0x0]
80003564:	5c 79       	castu.h	r9
80003566:	a7 68       	lsl	r8,0x6
80003568:	12 08       	add	r8,r9
8000356a:	e2 08 07 08 	ld.ub	r8,r1[r8]
8000356e:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003570:	8e 08       	ld.sh	r8,r7[0x0]
80003572:	2f f8       	sub	r8,-1
80003574:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
80003576:	f0 1f 00 0c 	mcall	800035a4 <udi_cdc_getc+0x78>

	if (b_databit_9) {
8000357a:	58 02       	cp.w	r2,0
8000357c:	c0 50       	breq	80003586 <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000357e:	a9 63       	lsl	r3,0x8
80003580:	00 92       	mov	r2,r0
80003582:	ce 7b       	rjmp	80003550 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
80003584:	30 03       	mov	r3,0
	}
	return rx_data;
}
80003586:	06 9c       	mov	r12,r3
80003588:	d8 32       	popm	r0-r7,pc
8000358a:	00 00       	add	r0,r0
8000358c:	00 00       	add	r0,r0
8000358e:	07 58       	ld.sh	r8,--r3
80003590:	00 00       	add	r0,r0
80003592:	07 ec       	ld.ub	r12,r3[0x6]
80003594:	00 00       	add	r0,r0
80003596:	07 e8       	ld.ub	r8,r3[0x6]
80003598:	00 00       	add	r0,r0
8000359a:	07 e4       	ld.ub	r4,r3[0x6]
8000359c:	00 00       	add	r0,r0
8000359e:	07 ed       	ld.ub	sp,r3[0x6]
800035a0:	00 00       	add	r0,r0
800035a2:	07 f0       	ld.ub	r0,r3[0x7]
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	34 a8       	mov	r8,74

800035a8 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
800035a8:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
800035aa:	58 0c       	cp.w	r12,0
800035ac:	c1 01       	brne	800035cc <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
800035ae:	48 98       	lddpc	r8,800035d0 <udi_cdc_data_recevied+0x28>
800035b0:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
800035b2:	58 08       	cp.w	r8,0
800035b4:	f9 b8 01 00 	movne	r8,0
800035b8:	f9 b8 00 02 	moveq	r8,2
800035bc:	48 69       	lddpc	r9,800035d4 <udi_cdc_data_recevied+0x2c>
800035be:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
800035c2:	30 09       	mov	r9,0
800035c4:	48 58       	lddpc	r8,800035d8 <udi_cdc_data_recevied+0x30>
800035c6:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
800035c8:	f0 1f 00 05 	mcall	800035dc <udi_cdc_data_recevied+0x34>
800035cc:	d8 02       	popm	pc
800035ce:	00 00       	add	r0,r0
800035d0:	00 00       	add	r0,r0
800035d2:	07 ec       	ld.ub	r12,r3[0x6]
800035d4:	00 00       	add	r0,r0
800035d6:	07 e4       	ld.ub	r4,r3[0x6]
800035d8:	00 00       	add	r0,r0
800035da:	08 70       	tst	r0,r4
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	34 a8       	mov	r8,74

800035e0 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035e0:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035e4:	4a a8       	lddpc	r8,8000368c <udi_cdc_tx_send+0xac>
800035e6:	11 88       	ld.ub	r8,r8[0x0]
800035e8:	58 08       	cp.w	r8,0
800035ea:	c4 f1       	brne	80003688 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035ec:	f0 1f 00 29 	mcall	80003690 <udi_cdc_tx_send+0xb0>
800035f0:	c0 a0       	breq	80003604 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035f2:	f0 1f 00 29 	mcall	80003694 <udi_cdc_tx_send+0xb4>
800035f6:	4a 98       	lddpc	r8,80003698 <udi_cdc_tx_send+0xb8>
800035f8:	90 08       	ld.sh	r8,r8[0x0]
800035fa:	f8 08 19 00 	cp.h	r8,r12
800035fe:	c0 a1       	brne	80003612 <udi_cdc_tx_send+0x32>
80003600:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
80003604:	f0 1f 00 26 	mcall	8000369c <udi_cdc_tx_send+0xbc>
80003608:	4a 48       	lddpc	r8,80003698 <udi_cdc_tx_send+0xb8>
8000360a:	90 08       	ld.sh	r8,r8[0x0]
8000360c:	f8 08 19 00 	cp.h	r8,r12
80003610:	c3 c0       	breq	80003688 <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003612:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003616:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
80003618:	4a 29       	lddpc	r9,800036a0 <udi_cdc_tx_send+0xc0>
8000361a:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
8000361c:	4a 29       	lddpc	r9,800036a4 <udi_cdc_tx_send+0xc4>
8000361e:	13 89       	ld.ub	r9,r9[0x0]
80003620:	58 09       	cp.w	r9,0
80003622:	c0 61       	brne	8000362e <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
80003624:	58 07       	cp.w	r7,0
80003626:	5f 0a       	sreq	r10
80003628:	49 e9       	lddpc	r9,800036a0 <udi_cdc_tx_send+0xc0>
8000362a:	b2 8a       	st.b	r9[0x0],r10
8000362c:	c0 38       	rjmp	80003632 <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000362e:	58 07       	cp.w	r7,0
80003630:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
80003632:	30 1a       	mov	r10,1
80003634:	49 69       	lddpc	r9,8000368c <udi_cdc_tx_send+0xac>
80003636:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003638:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
8000363c:	0e 95       	mov	r5,r7
8000363e:	49 b8       	lddpc	r8,800036a8 <udi_cdc_tx_send+0xc8>
80003640:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003644:	34 08       	mov	r8,64
80003646:	f0 09 19 00 	cp.h	r9,r8
8000364a:	5f 16       	srne	r6
	if (b_short_packet) {
8000364c:	58 06       	cp.w	r6,0
8000364e:	c0 e0       	breq	8000366a <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003650:	f0 1f 00 10 	mcall	80003690 <udi_cdc_tx_send+0xb0>
80003654:	c0 60       	breq	80003660 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
80003656:	f0 1f 00 10 	mcall	80003694 <udi_cdc_tx_send+0xb4>
8000365a:	49 08       	lddpc	r8,80003698 <udi_cdc_tx_send+0xb8>
8000365c:	b0 0c       	st.h	r8[0x0],r12
8000365e:	c0 98       	rjmp	80003670 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003660:	f0 1f 00 0f 	mcall	8000369c <udi_cdc_tx_send+0xbc>
80003664:	48 d8       	lddpc	r8,80003698 <udi_cdc_tx_send+0xb8>
80003666:	b0 0c       	st.h	r8[0x0],r12
80003668:	c0 48       	rjmp	80003670 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
8000366a:	30 09       	mov	r9,0
8000366c:	48 b8       	lddpc	r8,80003698 <udi_cdc_tx_send+0xb8>
8000366e:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003670:	a7 67       	lsl	r7,0x6
80003672:	48 f8       	lddpc	r8,800036ac <udi_cdc_tx_send+0xcc>
80003674:	48 d9       	lddpc	r9,800036a8 <udi_cdc_tx_send+0xc8>
80003676:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
8000367a:	48 ea       	lddpc	r10,800036b0 <udi_cdc_tx_send+0xd0>
8000367c:	0e 0a       	add	r10,r7
8000367e:	0c 9b       	mov	r11,r6
80003680:	e0 6c 00 81 	mov	r12,129
80003684:	f0 1f 00 0c 	mcall	800036b4 <udi_cdc_tx_send+0xd4>
80003688:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000368c:	00 00       	add	r0,r0
8000368e:	07 ee       	ld.ub	lr,r3[0x6]
80003690:	80 00       	ld.sh	r0,r0[0x0]
80003692:	23 d6       	sub	r6,61
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	24 12       	sub	r2,65
80003698:	00 00       	add	r0,r0
8000369a:	07 ea       	ld.ub	r10,r3[0x6]
8000369c:	80 00       	ld.sh	r0,r0[0x0]
8000369e:	24 06       	sub	r6,64
800036a0:	00 00       	add	r0,r0
800036a2:	07 5f       	ld.sh	pc,--r3
800036a4:	00 00       	add	r0,r0
800036a6:	08 71       	tst	r1,r4
800036a8:	00 00       	add	r0,r0
800036aa:	07 60       	ld.uh	r0,--r3
800036ac:	80 00       	ld.sh	r0,r0[0x0]
800036ae:	36 b8       	mov	r8,107
800036b0:	00 00       	add	r0,r0
800036b2:	07 64       	ld.uh	r4,--r3
800036b4:	80 00       	ld.sh	r0,r0[0x0]
800036b6:	25 cc       	sub	r12,92

800036b8 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
800036b8:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
800036ba:	58 0c       	cp.w	r12,0
800036bc:	c1 21       	brne	800036e0 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
800036be:	48 a8       	lddpc	r8,800036e4 <udi_cdc_data_sent+0x2c>
800036c0:	11 88       	ld.ub	r8,r8[0x0]
800036c2:	58 08       	cp.w	r8,0
800036c4:	f9 b9 01 00 	movne	r9,0
800036c8:	f9 b9 00 02 	moveq	r9,2
800036cc:	30 08       	mov	r8,0
800036ce:	48 7a       	lddpc	r10,800036e8 <udi_cdc_data_sent+0x30>
800036d0:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
800036d4:	48 69       	lddpc	r9,800036ec <udi_cdc_data_sent+0x34>
800036d6:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036d8:	48 69       	lddpc	r9,800036f0 <udi_cdc_data_sent+0x38>
800036da:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036dc:	f0 1f 00 06 	mcall	800036f4 <udi_cdc_data_sent+0x3c>
800036e0:	d8 02       	popm	pc
800036e2:	00 00       	add	r0,r0
800036e4:	00 00       	add	r0,r0
800036e6:	07 5f       	ld.sh	pc,--r3
800036e8:	00 00       	add	r0,r0
800036ea:	07 60       	ld.uh	r0,--r3
800036ec:	00 00       	add	r0,r0
800036ee:	08 71       	tst	r1,r4
800036f0:	00 00       	add	r0,r0
800036f2:	07 ee       	ld.ub	lr,r3[0x6]
800036f4:	80 00       	ld.sh	r0,r0[0x0]
800036f6:	35 e0       	mov	r0,94

800036f8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036f8:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036fa:	f0 1f 00 02 	mcall	80003700 <udi_cdc_data_sof_notify+0x8>
}
800036fe:	d8 02       	popm	pc
80003700:	80 00       	ld.sh	r0,r0[0x0]
80003702:	35 e0       	mov	r0,94

80003704 <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
80003704:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
80003708:	30 06       	mov	r6,0
8000370a:	48 f8       	lddpc	r8,80003744 <udi_cdc_data_enable+0x40>
8000370c:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
8000370e:	48 f8       	lddpc	r8,80003748 <udi_cdc_data_enable+0x44>
80003710:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
80003712:	48 f8       	lddpc	r8,8000374c <udi_cdc_data_enable+0x48>
80003714:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
80003716:	48 f8       	lddpc	r8,80003750 <udi_cdc_data_enable+0x4c>
80003718:	30 07       	mov	r7,0
8000371a:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
8000371c:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
8000371e:	48 e8       	lddpc	r8,80003754 <udi_cdc_data_enable+0x50>
80003720:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
80003722:	f0 1f 00 0e 	mcall	80003758 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
80003726:	48 e8       	lddpc	r8,8000375c <udi_cdc_data_enable+0x58>
80003728:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
8000372a:	48 e8       	lddpc	r8,80003760 <udi_cdc_data_enable+0x5c>
8000372c:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
8000372e:	48 e8       	lddpc	r8,80003764 <udi_cdc_data_enable+0x60>
80003730:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
80003732:	48 e8       	lddpc	r8,80003768 <udi_cdc_data_enable+0x64>
80003734:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
80003736:	f0 1f 00 0e 	mcall	8000376c <udi_cdc_data_enable+0x68>
8000373a:	48 e8       	lddpc	r8,80003770 <udi_cdc_data_enable+0x6c>
8000373c:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
8000373e:	11 8c       	ld.ub	r12,r8[0x0]
}
80003740:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003744:	00 00       	add	r0,r0
80003746:	07 ee       	ld.ub	lr,r3[0x6]
80003748:	00 00       	add	r0,r0
8000374a:	08 71       	tst	r1,r4
8000374c:	00 00       	add	r0,r0
8000374e:	07 5f       	ld.sh	pc,--r3
80003750:	00 00       	add	r0,r0
80003752:	07 60       	ld.uh	r0,--r3
80003754:	00 00       	add	r0,r0
80003756:	07 ea       	ld.ub	r10,r3[0x6]
80003758:	80 00       	ld.sh	r0,r0[0x0]
8000375a:	35 e0       	mov	r0,94
8000375c:	00 00       	add	r0,r0
8000375e:	08 70       	tst	r0,r4
80003760:	00 00       	add	r0,r0
80003762:	07 ec       	ld.ub	r12,r3[0x6]
80003764:	00 00       	add	r0,r0
80003766:	07 e4       	ld.ub	r4,r3[0x6]
80003768:	00 00       	add	r0,r0
8000376a:	07 e8       	ld.ub	r8,r3[0x6]
8000376c:	80 00       	ld.sh	r0,r0[0x0]
8000376e:	34 a8       	mov	r8,74
80003770:	00 00       	add	r0,r0
80003772:	07 ed       	ld.ub	sp,r3[0x6]

80003774 <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
80003774:	d4 01       	pushm	lr
	udi_cdc_running = false;
80003776:	30 09       	mov	r9,0
80003778:	48 38       	lddpc	r8,80003784 <udi_cdc_comm_disable+0x10>
8000377a:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
8000377c:	f0 1f 00 03 	mcall	80003788 <udi_cdc_comm_disable+0x14>
}
80003780:	d8 02       	popm	pc
80003782:	00 00       	add	r0,r0
80003784:	00 00       	add	r0,r0
80003786:	07 ed       	ld.ub	sp,r3[0x6]
80003788:	80 00       	ld.sh	r0,r0[0x0]
8000378a:	3f 3c       	mov	r12,-13

8000378c <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
8000378c:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
8000378e:	30 0a       	mov	r10,0
80003790:	48 a8       	lddpc	r8,800037b8 <udi_cdc_comm_enable+0x2c>
80003792:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003794:	48 a8       	lddpc	r8,800037bc <udi_cdc_comm_enable+0x30>
80003796:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003798:	48 a8       	lddpc	r8,800037c0 <udi_cdc_comm_enable+0x34>
8000379a:	30 09       	mov	r9,0
8000379c:	b0 8a       	st.b	r8[0x0],r10
8000379e:	3c 2a       	mov	r10,-62
800037a0:	b0 9a       	st.b	r8[0x1],r10
800037a2:	30 1a       	mov	r10,1
800037a4:	b0 aa       	st.b	r8[0x2],r10
800037a6:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
800037a8:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
800037aa:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
800037ac:	30 89       	mov	r9,8
800037ae:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
800037b0:	f0 1f 00 05 	mcall	800037c4 <udi_cdc_comm_enable+0x38>
}
800037b4:	d8 02       	popm	pc
800037b6:	00 00       	add	r0,r0
800037b8:	00 00       	add	r0,r0
800037ba:	08 72       	tst	r2,r4
800037bc:	00 00       	add	r0,r0
800037be:	00 50       	eor	r0,r0
800037c0:	00 00       	add	r0,r0
800037c2:	07 58       	ld.sh	r8,--r3
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	3f 30       	mov	r0,-13

800037c8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800037c8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800037cc:	49 18       	lddpc	r8,80003810 <udc_sof_notify+0x48>
800037ce:	11 89       	ld.ub	r9,r8[0x0]
800037d0:	30 08       	mov	r8,0
800037d2:	f0 09 18 00 	cp.b	r9,r8
800037d6:	c1 b0       	breq	8000380c <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037d8:	48 f8       	lddpc	r8,80003814 <udc_sof_notify+0x4c>
800037da:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037dc:	70 09       	ld.w	r9,r8[0x0]
800037de:	13 ca       	ld.ub	r10,r9[0x4]
800037e0:	30 09       	mov	r9,0
800037e2:	f2 0a 18 00 	cp.b	r10,r9
800037e6:	c1 30       	breq	8000380c <udc_sof_notify+0x44>
800037e8:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037ea:	48 b6       	lddpc	r6,80003814 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037ec:	70 18       	ld.w	r8,r8[0x4]
800037ee:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037f2:	70 48       	ld.w	r8,r8[0x10]
800037f4:	58 08       	cp.w	r8,0
800037f6:	c0 20       	breq	800037fa <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037f8:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037fa:	2f f7       	sub	r7,-1
800037fc:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037fe:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80003800:	70 09       	ld.w	r9,r8[0x0]
80003802:	13 c9       	ld.ub	r9,r9[0x4]
80003804:	ee 09 18 00 	cp.b	r9,r7
80003808:	fe 9b ff f2 	brhi	800037ec <udc_sof_notify+0x24>
8000380c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003810:	00 00       	add	r0,r0
80003812:	08 7e       	tst	lr,r4
80003814:	00 00       	add	r0,r0
80003816:	08 78       	tst	r8,r4

80003818 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003818:	48 78       	lddpc	r8,80003834 <udc_get_eof_conf+0x1c>
8000381a:	70 08       	ld.w	r8,r8[0x0]
8000381c:	70 08       	ld.w	r8,r8[0x0]
8000381e:	11 aa       	ld.ub	r10,r8[0x2]
80003820:	11 b9       	ld.ub	r9,r8[0x3]
80003822:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80003826:	5c c9       	swap.bh	r9
80003828:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
8000382c:	f0 0c 00 0c 	add	r12,r8,r12
80003830:	5e fc       	retal	r12
80003832:	00 00       	add	r0,r0
80003834:	00 00       	add	r0,r0
80003836:	08 78       	tst	r8,r4

80003838 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003838:	eb cd 40 e0 	pushm	r5-r7,lr
8000383c:	18 97       	mov	r7,r12
8000383e:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003840:	49 b8       	lddpc	r8,800038ac <udc_update_iface_desc+0x74>
80003842:	11 89       	ld.ub	r9,r8[0x0]
80003844:	30 08       	mov	r8,0
80003846:	f0 09 18 00 	cp.b	r9,r8
8000384a:	c2 f0       	breq	800038a8 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
8000384c:	49 98       	lddpc	r8,800038b0 <udc_update_iface_desc+0x78>
8000384e:	70 08       	ld.w	r8,r8[0x0]
80003850:	70 08       	ld.w	r8,r8[0x0]
80003852:	11 c9       	ld.ub	r9,r8[0x4]
80003854:	18 9e       	mov	lr,r12
80003856:	f8 09 18 00 	cp.b	r9,r12
8000385a:	e0 88 00 27 	brls	800038a8 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000385e:	49 65       	lddpc	r5,800038b4 <udc_update_iface_desc+0x7c>
80003860:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80003862:	f0 1f 00 16 	mcall	800038b8 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80003866:	6a 08       	ld.w	r8,r5[0x0]
80003868:	10 3c       	cp.w	r12,r8
8000386a:	e0 88 00 1f 	brls	800038a8 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000386e:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003870:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003872:	11 9a       	ld.ub	r10,r8[0x1]
80003874:	f6 0a 18 00 	cp.b	r10,r11
80003878:	c0 a1       	brne	8000388c <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
8000387a:	11 aa       	ld.ub	r10,r8[0x2]
8000387c:	0e 9e       	mov	lr,r7
8000387e:	ee 0a 18 00 	cp.b	r10,r7
80003882:	c0 51       	brne	8000388c <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
80003884:	11 ba       	ld.ub	r10,r8[0x3]
80003886:	ec 0a 18 00 	cp.b	r10,r6
8000388a:	c0 b0       	breq	800038a0 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
8000388c:	13 88       	ld.ub	r8,r9[0x0]
8000388e:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003892:	10 3c       	cp.w	r12,r8
80003894:	fe 9b ff ee 	brhi	80003870 <udc_update_iface_desc+0x38>
80003898:	48 79       	lddpc	r9,800038b4 <udc_update_iface_desc+0x7c>
8000389a:	93 08       	st.w	r9[0x0],r8
8000389c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800038a0:	48 59       	lddpc	r9,800038b4 <udc_update_iface_desc+0x7c>
800038a2:	93 08       	st.w	r9[0x0],r8
800038a4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800038a8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800038ac:	00 00       	add	r0,r0
800038ae:	08 7e       	tst	lr,r4
800038b0:	00 00       	add	r0,r0
800038b2:	08 78       	tst	r8,r4
800038b4:	00 00       	add	r0,r0
800038b6:	08 84       	andn	r4,r4
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	38 18       	mov	r8,-127

800038bc <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800038bc:	eb cd 40 c0 	pushm	r6-r7,lr
800038c0:	18 96       	mov	r6,r12
800038c2:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800038c4:	f0 1f 00 11 	mcall	80003908 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038c8:	0d 88       	ld.ub	r8,r6[0x0]
800038ca:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038cc:	0c 3c       	cp.w	r12,r6
800038ce:	e0 88 00 19 	brls	80003900 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038d2:	0d 98       	ld.ub	r8,r6[0x1]
800038d4:	30 49       	mov	r9,4
800038d6:	f2 08 18 00 	cp.b	r8,r9
800038da:	c1 30       	breq	80003900 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038dc:	ee 08 18 00 	cp.b	r8,r7
800038e0:	c0 a1       	brne	800038f4 <udc_next_desc_in_iface+0x38>
800038e2:	c1 08       	rjmp	80003902 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038e4:	0d 98       	ld.ub	r8,r6[0x1]
800038e6:	f2 08 18 00 	cp.b	r8,r9
800038ea:	c0 b0       	breq	80003900 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038ec:	ee 08 18 00 	cp.b	r8,r7
800038f0:	c0 31       	brne	800038f6 <udc_next_desc_in_iface+0x3a>
800038f2:	c0 88       	rjmp	80003902 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038f4:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038f6:	0d 88       	ld.ub	r8,r6[0x0]
800038f8:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038fa:	0c 3c       	cp.w	r12,r6
800038fc:	fe 9b ff f4 	brhi	800038e4 <udc_next_desc_in_iface+0x28>
80003900:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
80003902:	0c 9c       	mov	r12,r6
80003904:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003908:	80 00       	ld.sh	r0,r0[0x0]
8000390a:	38 18       	mov	r8,-127

8000390c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000390c:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000390e:	48 48       	lddpc	r8,8000391c <udc_valid_address+0x10>
80003910:	11 bc       	ld.ub	r12,r8[0x3]
80003912:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003916:	f0 1f 00 03 	mcall	80003920 <udc_valid_address+0x14>
}
8000391a:	d8 02       	popm	pc
8000391c:	00 00       	add	r0,r0
8000391e:	0a 00       	add	r0,r5
80003920:	80 00       	ld.sh	r0,r0[0x0]
80003922:	23 d8       	sub	r8,61

80003924 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80003924:	eb cd 40 e0 	pushm	r5-r7,lr
80003928:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
8000392a:	f0 1f 00 12 	mcall	80003970 <udc_iface_enable+0x4c>
8000392e:	c1 f0       	breq	8000396c <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003930:	49 18       	lddpc	r8,80003974 <udc_iface_enable+0x50>
80003932:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003934:	30 56       	mov	r6,5
80003936:	0c 9b       	mov	r11,r6
80003938:	0e 9c       	mov	r12,r7
8000393a:	f0 1f 00 10 	mcall	80003978 <udc_iface_enable+0x54>
8000393e:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003940:	c0 d0       	breq	8000395a <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003942:	19 ca       	ld.ub	r10,r12[0x4]
80003944:	19 d8       	ld.ub	r8,r12[0x5]
80003946:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000394a:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000394c:	5c 7a       	castu.h	r10
8000394e:	19 bb       	ld.ub	r11,r12[0x3]
80003950:	19 ac       	ld.ub	r12,r12[0x2]
80003952:	f0 1f 00 0b 	mcall	8000397c <udc_iface_enable+0x58>
80003956:	cf 01       	brne	80003936 <udc_iface_enable+0x12>
80003958:	c0 a8       	rjmp	8000396c <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000395a:	48 a8       	lddpc	r8,80003980 <udc_iface_enable+0x5c>
8000395c:	70 08       	ld.w	r8,r8[0x0]
8000395e:	70 18       	ld.w	r8,r8[0x4]
80003960:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80003964:	70 0c       	ld.w	r12,r8[0x0]
80003966:	5d 1c       	icall	r12
80003968:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000396c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	38 38       	mov	r8,-125
80003974:	00 00       	add	r0,r0
80003976:	08 84       	andn	r4,r4
80003978:	80 00       	ld.sh	r0,r0[0x0]
8000397a:	38 bc       	mov	r12,-117
8000397c:	80 00       	ld.sh	r0,r0[0x0]
8000397e:	29 24       	sub	r4,-110
80003980:	00 00       	add	r0,r0
80003982:	08 78       	tst	r8,r4

80003984 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80003984:	eb cd 40 e0 	pushm	r5-r7,lr
80003988:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
8000398a:	18 97       	mov	r7,r12
8000398c:	30 0b       	mov	r11,0
8000398e:	f0 1f 00 12 	mcall	800039d4 <udc_iface_disable+0x50>
80003992:	c1 e0       	breq	800039ce <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003994:	49 18       	lddpc	r8,800039d8 <udc_iface_disable+0x54>
80003996:	70 08       	ld.w	r8,r8[0x0]
80003998:	70 18       	ld.w	r8,r8[0x4]
8000399a:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
8000399e:	6a 3c       	ld.w	r12,r5[0xc]
800039a0:	5d 1c       	icall	r12
800039a2:	18 9b       	mov	r11,r12
800039a4:	0c 9c       	mov	r12,r6
800039a6:	f0 1f 00 0c 	mcall	800039d4 <udc_iface_disable+0x50>
800039aa:	c1 20       	breq	800039ce <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800039ac:	48 c8       	lddpc	r8,800039dc <udc_iface_disable+0x58>
800039ae:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800039b0:	30 56       	mov	r6,5
800039b2:	0c 9b       	mov	r11,r6
800039b4:	0e 9c       	mov	r12,r7
800039b6:	f0 1f 00 0b 	mcall	800039e0 <udc_iface_disable+0x5c>
800039ba:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
800039bc:	c0 50       	breq	800039c6 <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800039be:	19 ac       	ld.ub	r12,r12[0x2]
800039c0:	f0 1f 00 09 	mcall	800039e4 <udc_iface_disable+0x60>
		}
800039c4:	cf 7b       	rjmp	800039b2 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800039c6:	6a 18       	ld.w	r8,r5[0x4]
800039c8:	5d 18       	icall	r8
800039ca:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800039ce:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039d2:	00 00       	add	r0,r0
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	38 38       	mov	r8,-125
800039d8:	00 00       	add	r0,r0
800039da:	08 78       	tst	r8,r4
800039dc:	00 00       	add	r0,r0
800039de:	08 84       	andn	r4,r4
800039e0:	80 00       	ld.sh	r0,r0[0x0]
800039e2:	38 bc       	mov	r12,-117
800039e4:	80 00       	ld.sh	r0,r0[0x0]
800039e6:	25 9c       	sub	r12,89

800039e8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039e8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039ec:	49 38       	lddpc	r8,80003a38 <udc_reset+0x50>
800039ee:	11 89       	ld.ub	r9,r8[0x0]
800039f0:	30 08       	mov	r8,0
800039f2:	f0 09 18 00 	cp.b	r9,r8
800039f6:	c1 70       	breq	80003a24 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039f8:	49 18       	lddpc	r8,80003a3c <udc_reset+0x54>
800039fa:	70 08       	ld.w	r8,r8[0x0]
800039fc:	70 08       	ld.w	r8,r8[0x0]
800039fe:	11 c9       	ld.ub	r9,r8[0x4]
80003a00:	30 08       	mov	r8,0
80003a02:	f0 09 18 00 	cp.b	r9,r8
80003a06:	c0 f0       	breq	80003a24 <udc_reset+0x3c>
80003a08:	30 07       	mov	r7,0
80003a0a:	48 d6       	lddpc	r6,80003a3c <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
80003a0c:	0e 9c       	mov	r12,r7
80003a0e:	f0 1f 00 0d 	mcall	80003a40 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003a12:	2f f7       	sub	r7,-1
80003a14:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003a16:	6c 08       	ld.w	r8,r6[0x0]
80003a18:	70 08       	ld.w	r8,r8[0x0]
80003a1a:	11 c8       	ld.ub	r8,r8[0x4]
80003a1c:	ee 08 18 00 	cp.b	r8,r7
80003a20:	fe 9b ff f6 	brhi	80003a0c <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003a24:	30 09       	mov	r9,0
80003a26:	48 58       	lddpc	r8,80003a38 <udc_reset+0x50>
80003a28:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003a2a:	e0 69 01 00 	mov	r9,256
80003a2e:	48 68       	lddpc	r8,80003a44 <udc_reset+0x5c>
80003a30:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003a32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a36:	00 00       	add	r0,r0
80003a38:	00 00       	add	r0,r0
80003a3a:	08 7e       	tst	lr,r4
80003a3c:	00 00       	add	r0,r0
80003a3e:	08 78       	tst	r8,r4
80003a40:	80 00       	ld.sh	r0,r0[0x0]
80003a42:	39 84       	mov	r4,-104
80003a44:	00 00       	add	r0,r0
80003a46:	08 7c       	tst	r12,r4

80003a48 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a48:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a4c:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a50:	30 09       	mov	r9,0
80003a52:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a54:	30 0a       	mov	r10,0
80003a56:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a58:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a5a:	11 88       	ld.ub	r8,r8[0x0]
80003a5c:	10 9a       	mov	r10,r8
80003a5e:	f2 08 18 00 	cp.b	r8,r9
80003a62:	c0 94       	brge	80003a74 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a64:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a68:	92 3b       	ld.sh	r11,r9[0x6]
80003a6a:	30 09       	mov	r9,0
80003a6c:	f2 0b 19 00 	cp.h	r11,r9
80003a70:	e0 80 02 0a 	breq	80003e84 <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a74:	10 99       	mov	r9,r8
80003a76:	e2 19 00 60 	andl	r9,0x60,COH
80003a7a:	e0 81 01 d9 	brne	80003e2c <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a7e:	f2 0a 18 00 	cp.b	r10,r9
80003a82:	e0 84 01 01 	brge	80003c84 <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a86:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a8a:	92 39       	ld.sh	r9,r9[0x6]
80003a8c:	58 09       	cp.w	r9,0
80003a8e:	e0 80 01 cf 	breq	80003e2c <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a96:	e0 81 00 9e 	brne	80003bd2 <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a9a:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a9e:	15 9a       	ld.ub	r10,r10[0x1]
80003aa0:	30 6b       	mov	r11,6
80003aa2:	f6 0a 18 00 	cp.b	r10,r11
80003aa6:	c1 a0       	breq	80003ada <udc_process_setup+0x92>
80003aa8:	30 8b       	mov	r11,8
80003aaa:	f6 0a 18 00 	cp.b	r10,r11
80003aae:	e0 80 00 85 	breq	80003bb8 <udc_process_setup+0x170>
80003ab2:	30 0b       	mov	r11,0
80003ab4:	f6 0a 18 00 	cp.b	r10,r11
80003ab8:	e0 81 00 8d 	brne	80003bd2 <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003abc:	30 28       	mov	r8,2
80003abe:	f0 09 19 00 	cp.h	r9,r8
80003ac2:	c0 40       	breq	80003aca <udc_process_setup+0x82>
80003ac4:	30 0c       	mov	r12,0
80003ac6:	e0 8f 01 af 	bral	80003e24 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003aca:	30 2b       	mov	r11,2
80003acc:	fe fc 03 c0 	ld.w	r12,pc[960]
80003ad0:	f0 1f 00 f0 	mcall	80003e90 <udc_process_setup+0x448>
80003ad4:	30 1c       	mov	r12,1
80003ad6:	e0 8f 01 a7 	bral	80003e24 <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ada:	fe f8 03 ae 	ld.w	r8,pc[942]
80003ade:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003ae0:	f2 08 16 08 	lsr	r8,r9,0x8
80003ae4:	30 2a       	mov	r10,2
80003ae6:	f4 08 18 00 	cp.b	r8,r10
80003aea:	c1 00       	breq	80003b0a <udc_process_setup+0xc2>
80003aec:	30 3a       	mov	r10,3
80003aee:	f4 08 18 00 	cp.b	r8,r10
80003af2:	c2 a0       	breq	80003b46 <udc_process_setup+0xfe>
80003af4:	30 19       	mov	r9,1
80003af6:	f2 08 18 00 	cp.b	r8,r9
80003afa:	c5 d1       	brne	80003bb4 <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003afc:	fe f8 03 98 	ld.w	r8,pc[920]
80003b00:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003b02:	19 8b       	ld.ub	r11,r12[0x0]
80003b04:	f0 1f 00 e3 	mcall	80003e90 <udc_process_setup+0x448>
80003b08:	c4 78       	rjmp	80003b96 <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003b0a:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003b0c:	fe f8 03 88 	ld.w	r8,pc[904]
80003b10:	70 08       	ld.w	r8,r8[0x0]
80003b12:	f1 38 00 11 	ld.ub	r8,r8[17]
80003b16:	f2 08 18 00 	cp.b	r8,r9
80003b1a:	e0 88 00 4d 	brls	80003bb4 <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003b1e:	fe f8 03 76 	ld.w	r8,pc[886]
80003b22:	70 18       	ld.w	r8,r8[0x4]
80003b24:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003b28:	19 a9       	ld.ub	r9,r12[0x2]
80003b2a:	19 b8       	ld.ub	r8,r12[0x3]
80003b2c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003b30:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003b32:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003b36:	f0 1f 00 d7 	mcall	80003e90 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b3a:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b3e:	70 28       	ld.w	r8,r8[0x8]
80003b40:	30 29       	mov	r9,2
80003b42:	b0 99       	st.b	r8[0x1],r9
80003b44:	c2 98       	rjmp	80003b96 <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b46:	5c 59       	castu.b	r9
80003b48:	58 19       	cp.w	r9,1
80003b4a:	c1 00       	breq	80003b6a <udc_process_setup+0x122>
80003b4c:	58 29       	cp.w	r9,2
80003b4e:	c0 40       	breq	80003b56 <udc_process_setup+0x10e>
80003b50:	58 09       	cp.w	r9,0
80003b52:	c0 60       	breq	80003b5e <udc_process_setup+0x116>
80003b54:	c3 08       	rjmp	80003bb4 <udc_process_setup+0x16c>
80003b56:	fe fc 03 42 	ld.w	r12,pc[834]
80003b5a:	30 3b       	mov	r11,3
80003b5c:	c0 a8       	rjmp	80003b70 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b5e:	30 4b       	mov	r11,4
80003b60:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b64:	f0 1f 00 cb 	mcall	80003e90 <udc_process_setup+0x448>
80003b68:	c1 78       	rjmp	80003b96 <udc_process_setup+0x14e>
80003b6a:	fe fc 03 36 	ld.w	r12,pc[822]
80003b6e:	30 9b       	mov	r11,9
80003b70:	fe fa 03 34 	ld.w	r10,pc[820]
80003b74:	2f ea       	sub	r10,-2
80003b76:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b78:	11 39       	ld.ub	r9,r8++
80003b7a:	5c c9       	swap.bh	r9
80003b7c:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b7e:	f0 0c 01 09 	sub	r9,r8,r12
80003b82:	f6 09 18 00 	cp.b	r9,r11
80003b86:	cf 93       	brcs	80003b78 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b88:	a1 7b       	lsl	r11,0x1
80003b8a:	2f eb       	sub	r11,-2
80003b8c:	fe fc 03 18 	ld.w	r12,pc[792]
80003b90:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b92:	f0 1f 00 c0 	mcall	80003e90 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b96:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b9a:	90 39       	ld.sh	r9,r8[0x6]
80003b9c:	90 68       	ld.sh	r8,r8[0xc]
80003b9e:	f2 08 19 00 	cp.h	r8,r9
80003ba2:	e0 8b 00 04 	brhi	80003baa <udc_process_setup+0x162>
80003ba6:	30 1c       	mov	r12,1
80003ba8:	c3 e9       	rjmp	80003e24 <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003baa:	fe f8 02 de 	ld.w	r8,pc[734]
80003bae:	b0 69       	st.h	r8[0xc],r9
80003bb0:	30 1c       	mov	r12,1
80003bb2:	c3 99       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003bb4:	30 0c       	mov	r12,0
80003bb6:	c3 79       	rjmp	80003e24 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003bb8:	30 18       	mov	r8,1
80003bba:	f0 09 19 00 	cp.h	r9,r8
80003bbe:	c0 30       	breq	80003bc4 <udc_process_setup+0x17c>
80003bc0:	30 0c       	mov	r12,0
80003bc2:	c3 19       	rjmp	80003e24 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003bc4:	30 1b       	mov	r11,1
80003bc6:	fe fc 02 e2 	ld.w	r12,pc[738]
80003bca:	f0 1f 00 b2 	mcall	80003e90 <udc_process_setup+0x448>
80003bce:	30 1c       	mov	r12,1
80003bd0:	c2 a9       	rjmp	80003e24 <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003bd2:	58 18       	cp.w	r8,1
80003bd4:	c3 61       	brne	80003c40 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003bd6:	fe fa 02 b2 	ld.w	r10,pc[690]
80003bda:	15 9b       	ld.ub	r11,r10[0x1]
80003bdc:	30 aa       	mov	r10,10
80003bde:	f4 0b 18 00 	cp.b	r11,r10
80003be2:	c2 f1       	brne	80003c40 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003be4:	f0 09 19 00 	cp.h	r9,r8
80003be8:	c2 a1       	brne	80003c3c <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bea:	fe f8 02 be 	ld.w	r8,pc[702]
80003bee:	11 89       	ld.ub	r9,r8[0x0]
80003bf0:	30 08       	mov	r8,0
80003bf2:	f0 09 18 00 	cp.b	r9,r8
80003bf6:	c2 30       	breq	80003c3c <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bf8:	fe f8 02 90 	ld.w	r8,pc[656]
80003bfc:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bfe:	fe f8 02 ae 	ld.w	r8,pc[686]
80003c02:	70 08       	ld.w	r8,r8[0x0]
80003c04:	70 08       	ld.w	r8,r8[0x0]
80003c06:	11 c8       	ld.ub	r8,r8[0x4]
80003c08:	ee 08 18 00 	cp.b	r8,r7
80003c0c:	e0 88 00 18 	brls	80003c3c <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003c10:	30 0b       	mov	r11,0
80003c12:	0e 9c       	mov	r12,r7
80003c14:	f0 1f 00 a7 	mcall	80003eb0 <udc_process_setup+0x468>
80003c18:	c1 20       	breq	80003c3c <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003c1a:	fe f8 02 92 	ld.w	r8,pc[658]
80003c1e:	70 08       	ld.w	r8,r8[0x0]
80003c20:	70 18       	ld.w	r8,r8[0x4]
80003c22:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003c26:	70 3c       	ld.w	r12,r8[0xc]
80003c28:	5d 1c       	icall	r12
80003c2a:	fe f8 02 8a 	ld.w	r8,pc[650]
80003c2e:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003c30:	30 1b       	mov	r11,1
80003c32:	10 9c       	mov	r12,r8
80003c34:	f0 1f 00 97 	mcall	80003e90 <udc_process_setup+0x448>
80003c38:	30 1c       	mov	r12,1
80003c3a:	cf 58       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003c3c:	30 0c       	mov	r12,0
80003c3e:	cf 38       	rjmp	80003e24 <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c40:	58 28       	cp.w	r8,2
80003c42:	e0 81 00 f5 	brne	80003e2c <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c46:	fe f8 02 42 	ld.w	r8,pc[578]
80003c4a:	11 9a       	ld.ub	r10,r8[0x1]
80003c4c:	30 08       	mov	r8,0
80003c4e:	f0 0a 18 00 	cp.b	r10,r8
80003c52:	e0 81 00 e8 	brne	80003e22 <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c56:	30 28       	mov	r8,2
80003c58:	f0 09 19 00 	cp.h	r9,r8
80003c5c:	c0 30       	breq	80003c62 <udc_process_setup+0x21a>
80003c5e:	30 0c       	mov	r12,0
80003c60:	ce 28       	rjmp	80003e24 <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c62:	fe f8 02 26 	ld.w	r8,pc[550]
80003c66:	11 dc       	ld.ub	r12,r8[0x5]
80003c68:	f0 1f 00 94 	mcall	80003eb8 <udc_process_setup+0x470>
80003c6c:	e0 68 01 00 	mov	r8,256
80003c70:	f9 b8 00 00 	moveq	r8,0
80003c74:	fe fc 02 48 	ld.w	r12,pc[584]
80003c78:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c7a:	30 2b       	mov	r11,2
80003c7c:	f0 1f 00 85 	mcall	80003e90 <udc_process_setup+0x448>
80003c80:	30 1c       	mov	r12,1
80003c82:	cd 18       	rjmp	80003e24 <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c88:	c7 71       	brne	80003d76 <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c8a:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c8e:	13 99       	ld.ub	r9,r9[0x1]
80003c90:	30 3a       	mov	r10,3
80003c92:	f4 09 18 00 	cp.b	r9,r10
80003c96:	e0 80 00 c6 	breq	80003e22 <udc_process_setup+0x3da>
80003c9a:	e0 8b 00 07 	brhi	80003ca8 <udc_process_setup+0x260>
80003c9e:	30 1a       	mov	r10,1
80003ca0:	f4 09 18 00 	cp.b	r9,r10
80003ca4:	c6 91       	brne	80003d76 <udc_process_setup+0x32e>
80003ca6:	c1 78       	rjmp	80003cd4 <udc_process_setup+0x28c>
80003ca8:	30 5a       	mov	r10,5
80003caa:	f4 09 18 00 	cp.b	r9,r10
80003cae:	c0 60       	breq	80003cba <udc_process_setup+0x272>
80003cb0:	30 9a       	mov	r10,9
80003cb2:	f4 09 18 00 	cp.b	r9,r10
80003cb6:	c6 01       	brne	80003d76 <udc_process_setup+0x32e>
80003cb8:	c2 28       	rjmp	80003cfc <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003cba:	4f 48       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003cbc:	90 39       	ld.sh	r9,r8[0x6]
80003cbe:	30 08       	mov	r8,0
80003cc0:	f0 09 19 00 	cp.h	r9,r8
80003cc4:	c0 30       	breq	80003cca <udc_process_setup+0x282>
80003cc6:	30 0c       	mov	r12,0
80003cc8:	ca e8       	rjmp	80003e24 <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003cca:	4f e9       	lddpc	r9,80003ec0 <udc_process_setup+0x478>
80003ccc:	4e f8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003cce:	91 49       	st.w	r8[0x10],r9
80003cd0:	30 1c       	mov	r12,1
80003cd2:	ca 98       	rjmp	80003e24 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003cd4:	4e d8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003cd6:	90 39       	ld.sh	r9,r8[0x6]
80003cd8:	30 08       	mov	r8,0
80003cda:	f0 09 19 00 	cp.h	r9,r8
80003cde:	c0 d1       	brne	80003cf8 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003ce0:	4e a8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003ce2:	90 19       	ld.sh	r9,r8[0x2]
80003ce4:	30 18       	mov	r8,1
80003ce6:	f0 09 19 00 	cp.h	r9,r8
80003cea:	c0 71       	brne	80003cf8 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003cec:	4e 88       	lddpc	r8,80003e8c <udc_process_setup+0x444>
80003cee:	90 09       	ld.sh	r9,r8[0x0]
80003cf0:	a9 d9       	cbr	r9,0x9
80003cf2:	b0 09       	st.h	r8[0x0],r9
80003cf4:	30 1c       	mov	r12,1
80003cf6:	c9 78       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003cf8:	30 0c       	mov	r12,0
80003cfa:	c9 58       	rjmp	80003e24 <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cfc:	4e 38       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003cfe:	90 39       	ld.sh	r9,r8[0x6]
80003d00:	30 08       	mov	r8,0
80003d02:	f0 09 19 00 	cp.h	r9,r8
80003d06:	c3 41       	brne	80003d6e <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003d08:	f0 1f 00 6f 	mcall	80003ec4 <udc_process_setup+0x47c>
80003d0c:	c3 10       	breq	80003d6e <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003d0e:	4d f8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003d10:	11 b9       	ld.ub	r9,r8[0x3]
80003d12:	4e 18       	lddpc	r8,80003e94 <udc_process_setup+0x44c>
80003d14:	70 08       	ld.w	r8,r8[0x0]
80003d16:	f1 38 00 11 	ld.ub	r8,r8[17]
80003d1a:	10 39       	cp.w	r9,r8
80003d1c:	e0 89 00 29 	brgt	80003d6e <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003d20:	f0 1f 00 6a 	mcall	80003ec8 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003d24:	4d 98       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003d26:	11 b8       	ld.ub	r8,r8[0x3]
80003d28:	4e 09       	lddpc	r9,80003ea8 <udc_process_setup+0x460>
80003d2a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003d2c:	58 08       	cp.w	r8,0
80003d2e:	c2 20       	breq	80003d72 <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003d30:	20 18       	sub	r8,1
80003d32:	4d 99       	lddpc	r9,80003e94 <udc_process_setup+0x44c>
80003d34:	72 19       	ld.w	r9,r9[0x4]
80003d36:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d3a:	4d d9       	lddpc	r9,80003eac <udc_process_setup+0x464>
80003d3c:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d3e:	70 08       	ld.w	r8,r8[0x0]
80003d40:	11 c9       	ld.ub	r9,r8[0x4]
80003d42:	30 08       	mov	r8,0
80003d44:	f0 09 18 00 	cp.b	r9,r8
80003d48:	c1 50       	breq	80003d72 <udc_process_setup+0x32a>
80003d4a:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d4c:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d4e:	4d 86       	lddpc	r6,80003eac <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d50:	0a 9b       	mov	r11,r5
80003d52:	0e 9c       	mov	r12,r7
80003d54:	f0 1f 00 5e 	mcall	80003ecc <udc_process_setup+0x484>
80003d58:	c0 b0       	breq	80003d6e <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d5a:	2f f7       	sub	r7,-1
80003d5c:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d5e:	6c 08       	ld.w	r8,r6[0x0]
80003d60:	70 08       	ld.w	r8,r8[0x0]
80003d62:	11 c8       	ld.ub	r8,r8[0x4]
80003d64:	ee 08 18 00 	cp.b	r8,r7
80003d68:	fe 9b ff f4 	brhi	80003d50 <udc_process_setup+0x308>
80003d6c:	c0 38       	rjmp	80003d72 <udc_process_setup+0x32a>
80003d6e:	30 0c       	mov	r12,0
80003d70:	c5 a8       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003d72:	30 1c       	mov	r12,1
80003d74:	c5 88       	rjmp	80003e24 <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d76:	58 18       	cp.w	r8,1
80003d78:	c2 21       	brne	80003dbc <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d7a:	4c 49       	lddpc	r9,80003e88 <udc_process_setup+0x440>
80003d7c:	13 9a       	ld.ub	r10,r9[0x1]
80003d7e:	30 b9       	mov	r9,11
80003d80:	f2 0a 18 00 	cp.b	r10,r9
80003d84:	c1 c1       	brne	80003dbc <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d86:	4c 18       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003d88:	90 39       	ld.sh	r9,r8[0x6]
80003d8a:	30 08       	mov	r8,0
80003d8c:	f0 09 19 00 	cp.h	r9,r8
80003d90:	c1 41       	brne	80003db8 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d92:	4c 68       	lddpc	r8,80003ea8 <udc_process_setup+0x460>
80003d94:	11 89       	ld.ub	r9,r8[0x0]
80003d96:	30 08       	mov	r8,0
80003d98:	f0 09 18 00 	cp.b	r9,r8
80003d9c:	c0 e0       	breq	80003db8 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d9e:	4b b8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003da0:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003da2:	11 d7       	ld.ub	r7,r8[0x5]
80003da4:	0e 9c       	mov	r12,r7
80003da6:	f0 1f 00 4b 	mcall	80003ed0 <udc_process_setup+0x488>
80003daa:	c0 70       	breq	80003db8 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003dac:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003db0:	0e 9c       	mov	r12,r7
80003db2:	f0 1f 00 47 	mcall	80003ecc <udc_process_setup+0x484>
80003db6:	c3 78       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003db8:	30 0c       	mov	r12,0
80003dba:	c3 58       	rjmp	80003e24 <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003dbc:	58 28       	cp.w	r8,2
80003dbe:	c3 71       	brne	80003e2c <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003dc0:	4b 28       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003dc2:	11 98       	ld.ub	r8,r8[0x1]
80003dc4:	30 19       	mov	r9,1
80003dc6:	f2 08 18 00 	cp.b	r8,r9
80003dca:	c0 60       	breq	80003dd6 <udc_process_setup+0x38e>
80003dcc:	30 39       	mov	r9,3
80003dce:	f2 08 18 00 	cp.b	r8,r9
80003dd2:	c2 81       	brne	80003e22 <udc_process_setup+0x3da>
80003dd4:	c1 48       	rjmp	80003dfc <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dd6:	4a d8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003dd8:	90 39       	ld.sh	r9,r8[0x6]
80003dda:	30 08       	mov	r8,0
80003ddc:	f0 09 19 00 	cp.h	r9,r8
80003de0:	c0 c1       	brne	80003df8 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003de2:	4a a8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003de4:	90 19       	ld.sh	r9,r8[0x2]
80003de6:	30 08       	mov	r8,0
80003de8:	f0 09 19 00 	cp.h	r9,r8
80003dec:	c0 61       	brne	80003df8 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003dee:	4a 78       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003df0:	11 dc       	ld.ub	r12,r8[0x5]
80003df2:	f0 1f 00 39 	mcall	80003ed4 <udc_process_setup+0x48c>
80003df6:	c1 78       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003df8:	30 0c       	mov	r12,0
80003dfa:	c1 58       	rjmp	80003e24 <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dfc:	4a 38       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003dfe:	90 39       	ld.sh	r9,r8[0x6]
80003e00:	30 08       	mov	r8,0
80003e02:	f0 09 19 00 	cp.h	r9,r8
80003e06:	c0 c1       	brne	80003e1e <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003e08:	4a 08       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003e0a:	90 19       	ld.sh	r9,r8[0x2]
80003e0c:	30 08       	mov	r8,0
80003e0e:	f0 09 19 00 	cp.h	r9,r8
80003e12:	c0 61       	brne	80003e1e <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003e14:	49 d8       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003e16:	11 dc       	ld.ub	r12,r8[0x5]
80003e18:	f0 1f 00 30 	mcall	80003ed8 <udc_process_setup+0x490>
80003e1c:	c0 48       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003e1e:	30 0c       	mov	r12,0
80003e20:	c0 28       	rjmp	80003e24 <udc_process_setup+0x3dc>
80003e22:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003e24:	58 0c       	cp.w	r12,0
80003e26:	c0 30       	breq	80003e2c <udc_process_setup+0x3e4>
80003e28:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003e2c:	49 78       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003e2e:	11 88       	ld.ub	r8,r8[0x0]
80003e30:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e34:	58 18       	cp.w	r8,1
80003e36:	c2 71       	brne	80003e84 <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e38:	49 c8       	lddpc	r8,80003ea8 <udc_process_setup+0x460>
80003e3a:	11 89       	ld.ub	r9,r8[0x0]
80003e3c:	30 08       	mov	r8,0
80003e3e:	f0 09 18 00 	cp.b	r9,r8
80003e42:	c2 10       	breq	80003e84 <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e44:	49 18       	lddpc	r8,80003e88 <udc_process_setup+0x440>
80003e46:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e48:	49 98       	lddpc	r8,80003eac <udc_process_setup+0x464>
80003e4a:	70 08       	ld.w	r8,r8[0x0]
80003e4c:	70 08       	ld.w	r8,r8[0x0]
80003e4e:	11 c8       	ld.ub	r8,r8[0x4]
80003e50:	ee 08 18 00 	cp.b	r8,r7
80003e54:	e0 88 00 18 	brls	80003e84 <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e58:	0e 96       	mov	r6,r7
80003e5a:	30 0b       	mov	r11,0
80003e5c:	0e 9c       	mov	r12,r7
80003e5e:	f0 1f 00 15 	mcall	80003eb0 <udc_process_setup+0x468>
80003e62:	c1 10       	breq	80003e84 <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e64:	49 28       	lddpc	r8,80003eac <udc_process_setup+0x464>
80003e66:	70 08       	ld.w	r8,r8[0x0]
80003e68:	70 18       	ld.w	r8,r8[0x4]
80003e6a:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e6e:	6e 3c       	ld.w	r12,r7[0xc]
80003e70:	5d 1c       	icall	r12
80003e72:	18 9b       	mov	r11,r12
80003e74:	0c 9c       	mov	r12,r6
80003e76:	f0 1f 00 0f 	mcall	80003eb0 <udc_process_setup+0x468>
80003e7a:	c0 50       	breq	80003e84 <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e7c:	6e 2c       	ld.w	r12,r7[0x8]
80003e7e:	5d 1c       	icall	r12
80003e80:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e84:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e88:	00 00       	add	r0,r0
80003e8a:	0a 00       	add	r0,r5
80003e8c:	00 00       	add	r0,r0
80003e8e:	08 7c       	tst	r12,r4
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	24 20       	sub	r0,66
80003e94:	00 00       	add	r0,r0
80003e96:	00 b0       	st.h	r0++,r0
80003e98:	00 00       	add	r0,r0
80003e9a:	00 cc       	st.b	r0++,r12
80003e9c:	00 00       	add	r0,r0
80003e9e:	00 f0       	st.b	--r0,r0
80003ea0:	00 00       	add	r0,r0
80003ea2:	00 d0       	st.w	--r0,r0
80003ea4:	00 00       	add	r0,r0
80003ea6:	00 dc       	st.w	--r0,r12
80003ea8:	00 00       	add	r0,r0
80003eaa:	08 7e       	tst	lr,r4
80003eac:	00 00       	add	r0,r0
80003eae:	08 78       	tst	r8,r4
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	38 38       	mov	r8,-125
80003eb4:	00 00       	add	r0,r0
80003eb6:	08 74       	tst	r4,r4
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	24 2c       	sub	r12,66
80003ebc:	00 00       	add	r0,r0
80003ebe:	08 80       	andn	r0,r4
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	39 0c       	mov	r12,-112
80003ec4:	80 00       	ld.sh	r0,r0[0x0]
80003ec6:	23 fa       	sub	r10,63
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	39 e8       	mov	r8,-98
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	39 24       	mov	r4,-110
80003ed0:	80 00       	ld.sh	r0,r0[0x0]
80003ed2:	39 84       	mov	r4,-104
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	24 bc       	sub	r12,75
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	24 40       	sub	r0,68

80003edc <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003edc:	eb cd 40 fc 	pushm	r2-r7,lr
80003ee0:	20 1d       	sub	sp,4
80003ee2:	16 94       	mov	r4,r11
80003ee4:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003ee6:	58 0c       	cp.w	r12,0
80003ee8:	c0 30       	breq	80003eee <_read+0x12>
80003eea:	3f f7       	mov	r7,-1
80003eec:	c1 98       	rjmp	80003f1e <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003eee:	58 0a       	cp.w	r10,0
80003ef0:	e0 89 00 04 	brgt	80003ef8 <_read+0x1c>
80003ef4:	30 07       	mov	r7,0
80003ef6:	c1 48       	rjmp	80003f1e <_read+0x42>
80003ef8:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003efa:	48 c3       	lddpc	r3,80003f28 <_read+0x4c>
80003efc:	48 c6       	lddpc	r6,80003f2c <_read+0x50>
80003efe:	1a 92       	mov	r2,sp
80003f00:	66 0c       	ld.w	r12,r3[0x0]
80003f02:	6c 08       	ld.w	r8,r6[0x0]
80003f04:	1a 9b       	mov	r11,sp
80003f06:	5d 18       	icall	r8
		if (c < 0)
80003f08:	40 08       	lddsp	r8,sp[0x0]
80003f0a:	58 08       	cp.w	r8,0
80003f0c:	c0 95       	brlt	80003f1e <_read+0x42>
		break;
		*ptr++ = c;
80003f0e:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003f12:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003f14:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003f18:	58 08       	cp.w	r8,0
80003f1a:	fe 99 ff f3 	brgt	80003f00 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003f1e:	0e 9c       	mov	r12,r7
80003f20:	2f fd       	sub	sp,-4
80003f22:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003f26:	00 00       	add	r0,r0
80003f28:	00 00       	add	r0,r0
80003f2a:	0a 28       	rsub	r8,r5
80003f2c:	00 00       	add	r0,r0
80003f2e:	0a 20       	rsub	r0,r5

80003f30 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003f30:	30 19       	mov	r9,1
80003f32:	48 28       	lddpc	r8,80003f38 <stdio_usb_enable+0x8>
80003f34:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003f36:	5e ff       	retal	1
80003f38:	00 00       	add	r0,r0
80003f3a:	08 88       	andn	r8,r4

80003f3c <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f3c:	30 09       	mov	r9,0
80003f3e:	48 28       	lddpc	r8,80003f44 <stdio_usb_disable+0x8>
80003f40:	b0 89       	st.b	r8[0x0],r9
}
80003f42:	5e fc       	retal	r12
80003f44:	00 00       	add	r0,r0
80003f46:	08 88       	andn	r8,r4

80003f48 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f48:	d4 01       	pushm	lr
	if (b_high) {
80003f4a:	58 0c       	cp.w	r12,0
80003f4c:	c0 40       	breq	80003f54 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f4e:	f0 1f 00 04 	mcall	80003f5c <stdio_usb_vbus_event+0x14>
80003f52:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f54:	f0 1f 00 03 	mcall	80003f60 <stdio_usb_vbus_event+0x18>
80003f58:	d8 02       	popm	pc
80003f5a:	00 00       	add	r0,r0
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	2a b4       	sub	r4,-85
80003f60:	80 00       	ld.sh	r0,r0[0x0]
80003f62:	27 64       	sub	r4,118

80003f64 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f64:	d4 01       	pushm	lr
	stdio_base = usart;
80003f66:	48 98       	lddpc	r8,80003f88 <stdio_usb_init+0x24>
80003f68:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f6a:	48 99       	lddpc	r9,80003f8c <stdio_usb_init+0x28>
80003f6c:	48 98       	lddpc	r8,80003f90 <stdio_usb_init+0x2c>
80003f6e:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f70:	48 99       	lddpc	r9,80003f94 <stdio_usb_init+0x30>
80003f72:	48 a8       	lddpc	r8,80003f98 <stdio_usb_init+0x34>
80003f74:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f76:	f0 1f 00 0a 	mcall	80003f9c <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f7a:	f0 1f 00 0a 	mcall	80003fa0 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f7e:	c0 41       	brne	80003f86 <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f80:	30 1c       	mov	r12,1
80003f82:	f0 1f 00 09 	mcall	80003fa4 <stdio_usb_init+0x40>
80003f86:	d8 02       	popm	pc
80003f88:	00 00       	add	r0,r0
80003f8a:	0a 28       	rsub	r8,r5
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	3f d4       	mov	r4,-3
80003f90:	00 00       	add	r0,r0
80003f92:	0a 24       	rsub	r4,r5
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	3f a8       	mov	r8,-6
80003f98:	00 00       	add	r0,r0
80003f9a:	0a 20       	rsub	r0,r5
80003f9c:	80 00       	ld.sh	r0,r0[0x0]
80003f9e:	2b 24       	sub	r4,-78
80003fa0:	80 00       	ld.sh	r0,r0[0x0]
80003fa2:	23 d4       	sub	r4,61
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3f 48       	mov	r8,-12

80003fa8 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003fa8:	eb cd 40 80 	pushm	r7,lr
80003fac:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fae:	48 88       	lddpc	r8,80003fcc <stdio_usb_getchar+0x24>
80003fb0:	11 89       	ld.ub	r9,r8[0x0]
80003fb2:	30 08       	mov	r8,0
80003fb4:	f0 09 18 00 	cp.b	r9,r8
80003fb8:	c0 51       	brne	80003fc2 <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003fba:	30 08       	mov	r8,0
80003fbc:	97 08       	st.w	r11[0x0],r8
		return;
80003fbe:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003fc2:	f0 1f 00 04 	mcall	80003fd0 <stdio_usb_getchar+0x28>
80003fc6:	8f 0c       	st.w	r7[0x0],r12
80003fc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fcc:	00 00       	add	r0,r0
80003fce:	08 88       	andn	r8,r4
80003fd0:	80 00       	ld.sh	r0,r0[0x0]
80003fd2:	35 2c       	mov	r12,82

80003fd4 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003fd4:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fd6:	48 78       	lddpc	r8,80003ff0 <stdio_usb_putchar+0x1c>
80003fd8:	11 89       	ld.ub	r9,r8[0x0]
80003fda:	30 08       	mov	r8,0
80003fdc:	f0 09 18 00 	cp.b	r9,r8
80003fe0:	c0 60       	breq	80003fec <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003fe2:	16 9c       	mov	r12,r11
80003fe4:	f0 1f 00 04 	mcall	80003ff4 <stdio_usb_putchar+0x20>
80003fe8:	c0 21       	brne	80003fec <stdio_usb_putchar+0x18>
80003fea:	dc 0a       	popm	pc,r12=-1
80003fec:	d8 0a       	popm	pc,r12=0
80003fee:	00 00       	add	r0,r0
80003ff0:	00 00       	add	r0,r0
80003ff2:	08 88       	andn	r8,r4
80003ff4:	80 00       	ld.sh	r0,r0[0x0]
80003ff6:	34 2c       	mov	r12,66

80003ff8 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003ff8:	eb cd 40 f8 	pushm	r3-r7,lr
80003ffc:	16 94       	mov	r4,r11
80003ffe:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80004000:	20 1c       	sub	r12,1
80004002:	58 2c       	cp.w	r12,2
80004004:	e0 8b 00 13 	brhi	8000402a <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80004008:	58 0a       	cp.w	r10,0
8000400a:	c0 31       	brne	80004010 <_write+0x18>
8000400c:	30 07       	mov	r7,0
8000400e:	c0 f8       	rjmp	8000402c <_write+0x34>
80004010:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80004012:	48 93       	lddpc	r3,80004034 <_write+0x3c>
80004014:	48 96       	lddpc	r6,80004038 <_write+0x40>
80004016:	66 0c       	ld.w	r12,r3[0x0]
80004018:	6c 08       	ld.w	r8,r6[0x0]
8000401a:	e8 07 07 0b 	ld.ub	r11,r4[r7]
8000401e:	5d 18       	icall	r8
80004020:	c0 55       	brlt	8000402a <_write+0x32>
				return -1;
			}
			++nChars;
80004022:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80004024:	0e 35       	cp.w	r5,r7
80004026:	cf 81       	brne	80004016 <_write+0x1e>
80004028:	c0 28       	rjmp	8000402c <_write+0x34>
8000402a:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
8000402c:	0e 9c       	mov	r12,r7
8000402e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004032:	00 00       	add	r0,r0
80004034:	00 00       	add	r0,r0
80004036:	0a 28       	rsub	r8,r5
80004038:	00 00       	add	r0,r0
8000403a:	0a 24       	rsub	r4,r5

8000403c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
8000403c:	f8 c8 ff f8 	sub	r8,r12,-8
80004040:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80004042:	3f f9       	mov	r9,-1
80004044:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
80004046:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004048:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
8000404a:	30 08       	mov	r8,0
8000404c:	99 08       	st.w	r12[0x0],r8
}
8000404e:	5e fc       	retal	r12

80004050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004050:	30 08       	mov	r8,0
80004052:	99 48       	st.w	r12[0x10],r8
}
80004054:	5e fc       	retal	r12

80004056 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
80004056:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
80004058:	70 19       	ld.w	r9,r8[0x4]
8000405a:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
8000405c:	78 19       	ld.w	r9,r12[0x4]
8000405e:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004060:	70 19       	ld.w	r9,r8[0x4]
80004062:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
80004064:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
80004066:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004068:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000406a:	78 08       	ld.w	r8,r12[0x0]
8000406c:	2f f8       	sub	r8,-1
8000406e:	99 08       	st.w	r12[0x0],r8
}
80004070:	5e fc       	retal	r12

80004072 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
80004072:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80004074:	5b fa       	cp.w	r10,-1
80004076:	c0 31       	brne	8000407c <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004078:	78 48       	ld.w	r8,r12[0x10]
8000407a:	c0 c8       	rjmp	80004092 <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
8000407c:	f8 c8 ff f8 	sub	r8,r12,-8
80004080:	70 19       	ld.w	r9,r8[0x4]
80004082:	72 09       	ld.w	r9,r9[0x0]
80004084:	12 3a       	cp.w	r10,r9
80004086:	c0 63       	brcs	80004092 <vListInsert+0x20>
80004088:	70 18       	ld.w	r8,r8[0x4]
8000408a:	70 19       	ld.w	r9,r8[0x4]
8000408c:	72 09       	ld.w	r9,r9[0x0]
8000408e:	12 3a       	cp.w	r10,r9
80004090:	cf c2       	brcc	80004088 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80004092:	70 19       	ld.w	r9,r8[0x4]
80004094:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004096:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80004098:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
8000409a:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
8000409c:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000409e:	78 08       	ld.w	r8,r12[0x0]
800040a0:	2f f8       	sub	r8,-1
800040a2:	99 08       	st.w	r12[0x0],r8
}
800040a4:	5e fc       	retal	r12

800040a6 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
800040a6:	78 18       	ld.w	r8,r12[0x4]
800040a8:	78 29       	ld.w	r9,r12[0x8]
800040aa:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
800040ac:	78 28       	ld.w	r8,r12[0x8]
800040ae:	78 19       	ld.w	r9,r12[0x4]
800040b0:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
800040b2:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
800040b4:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
800040b6:	18 39       	cp.w	r9,r12
800040b8:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
800040bc:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
800040c0:	30 09       	mov	r9,0
800040c2:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
800040c4:	70 09       	ld.w	r9,r8[0x0]
800040c6:	20 19       	sub	r9,1
800040c8:	91 09       	st.w	r8[0x0],r9
}
800040ca:	5e fc       	retal	r12

800040cc <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
800040cc:	e0 68 08 08 	mov	r8,2056
800040d0:	ea 18 08 08 	orh	r8,0x808
800040d4:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
800040d6:	e0 68 09 09 	mov	r8,2313
800040da:	ea 18 09 09 	orh	r8,0x909
800040de:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040e0:	e0 68 0a 0a 	mov	r8,2570
800040e4:	ea 18 0a 0a 	orh	r8,0xa0a
800040e8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040ea:	e0 68 0b 0b 	mov	r8,2827
800040ee:	ea 18 0b 0b 	orh	r8,0xb0b
800040f2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040f4:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040f6:	e0 68 be ef 	mov	r8,48879
800040fa:	ea 18 de ad 	orh	r8,0xdead
800040fe:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
80004100:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
80004102:	fc 18 00 40 	movh	r8,0x40
80004106:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
80004108:	e0 68 00 ff 	mov	r8,255
8000410c:	ea 18 ff 00 	orh	r8,0xff00
80004110:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
80004112:	e0 68 01 01 	mov	r8,257
80004116:	ea 18 01 01 	orh	r8,0x101
8000411a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
8000411c:	e0 68 02 02 	mov	r8,514
80004120:	ea 18 02 02 	orh	r8,0x202
80004124:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
80004126:	e0 68 03 03 	mov	r8,771
8000412a:	ea 18 03 03 	orh	r8,0x303
8000412e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80004130:	e0 68 04 04 	mov	r8,1028
80004134:	ea 18 04 04 	orh	r8,0x404
80004138:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
8000413a:	e0 68 05 05 	mov	r8,1285
8000413e:	ea 18 05 05 	orh	r8,0x505
80004142:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
80004144:	e0 68 06 06 	mov	r8,1542
80004148:	ea 18 06 06 	orh	r8,0x606
8000414c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
8000414e:	e0 68 07 07 	mov	r8,1799
80004152:	ea 18 07 07 	orh	r8,0x707
80004156:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004158:	30 08       	mov	r8,0
8000415a:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
8000415c:	5e fc       	retal	r12
8000415e:	d7 03       	nop

80004160 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004160:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
80004162:	48 38       	lddpc	r8,8000416c <vPortEnterCritical+0xc>
80004164:	70 09       	ld.w	r9,r8[0x0]
80004166:	2f f9       	sub	r9,-1
80004168:	91 09       	st.w	r8[0x0],r9
}
8000416a:	5e fc       	retal	r12
8000416c:	00 00       	add	r0,r0
8000416e:	00 f4       	st.b	--r0,r4

80004170 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004170:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
80004172:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80004174:	30 0a       	mov	r10,0
80004176:	14 9b       	mov	r11,r10
80004178:	49 2c       	lddpc	r12,800041c0 <xPortStartScheduler+0x50>
8000417a:	f0 1f 00 13 	mcall	800041c4 <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
8000417e:	e0 68 2e e0 	mov	r8,12000
80004182:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
80004186:	30 08       	mov	r8,0
80004188:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
8000418c:	e0 68 09 5c 	mov	r8,2396
80004190:	ea 18 00 00 	orh	r8,0x0
80004194:	70 00       	ld.w	r0,r8[0x0]
80004196:	60 0d       	ld.w	sp,r0[0x0]
80004198:	1b 00       	ld.w	r0,sp++
8000419a:	e0 68 00 f4 	mov	r8,244
8000419e:	ea 18 00 00 	orh	r8,0x0
800041a2:	91 00       	st.w	r8[0x0],r0
800041a4:	e3 cd 00 ff 	ldm	sp++,r0-r7
800041a8:	2f ed       	sub	sp,-8
800041aa:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
800041ae:	fa f0 ff e0 	ld.w	r0,sp[-32]
800041b2:	e3 b0 00 00 	mtsr	0x0,r0
800041b6:	fa f0 ff dc 	ld.w	r0,sp[-36]
800041ba:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
800041be:	d8 0a       	popm	pc,r12=0
800041c0:	80 00       	ld.sh	r0,r0[0x0]
800041c2:	42 8c       	lddsp	r12,sp[0xa0]
800041c4:	80 00       	ld.sh	r0,r0[0x0]
800041c6:	22 44       	sub	r4,36

800041c8 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
800041c8:	20 6d       	sub	sp,24
800041ca:	eb cd 00 ff 	pushm	r0-r7
800041ce:	fa c7 ff c0 	sub	r7,sp,-64
800041d2:	ee f0 ff f8 	ld.w	r0,r7[-8]
800041d6:	ef 40 ff e0 	st.w	r7[-32],r0
800041da:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041de:	ef 40 ff e4 	st.w	r7[-28],r0
800041e2:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041e6:	e0 68 00 f4 	mov	r8,244
800041ea:	ea 18 00 00 	orh	r8,0x0
800041ee:	70 00       	ld.w	r0,r8[0x0]
800041f0:	1a d0       	st.w	--sp,r0
800041f2:	f0 1f 00 1a 	mcall	80004258 <LABEL_RET_SCALL_266+0x14>
800041f6:	e0 68 09 5c 	mov	r8,2396
800041fa:	ea 18 00 00 	orh	r8,0x0
800041fe:	70 00       	ld.w	r0,r8[0x0]
80004200:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
80004202:	f0 1f 00 17 	mcall	8000425c <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
80004206:	e0 68 09 5c 	mov	r8,2396
8000420a:	ea 18 00 00 	orh	r8,0x0
8000420e:	70 00       	ld.w	r0,r8[0x0]
80004210:	60 0d       	ld.w	sp,r0[0x0]
80004212:	1b 00       	ld.w	r0,sp++
80004214:	e0 68 00 f4 	mov	r8,244
80004218:	ea 18 00 00 	orh	r8,0x0
8000421c:	91 00       	st.w	r8[0x0],r0
8000421e:	fa c7 ff d8 	sub	r7,sp,-40
80004222:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
80004226:	ee f0 ff e0 	ld.w	r0,r7[-32]
8000422a:	e0 61 00 f4 	mov	r1,244
8000422e:	ea 11 00 00 	orh	r1,0x0
80004232:	62 02       	ld.w	r2,r1[0x0]
80004234:	58 02       	cp.w	r2,0
80004236:	c0 70       	breq	80004244 <LABEL_RET_SCALL_266>
80004238:	e4 c2 00 01 	sub	r2,r2,1
8000423c:	83 02       	st.w	r1[0x0],r2
8000423e:	58 02       	cp.w	r2,0
80004240:	c0 21       	brne	80004244 <LABEL_RET_SCALL_266>
80004242:	b1 c0       	cbr	r0,0x10

80004244 <LABEL_RET_SCALL_266>:
80004244:	ef 40 ff f8 	st.w	r7[-8],r0
80004248:	ee f0 ff e4 	ld.w	r0,r7[-28]
8000424c:	ef 40 ff fc 	st.w	r7[-4],r0
80004250:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004254:	2f ad       	sub	sp,-24
80004256:	d6 13       	rets
80004258:	80 00       	ld.sh	r0,r0[0x0]
8000425a:	41 60       	lddsp	r0,sp[0x58]
8000425c:	80 00       	ld.sh	r0,r0[0x0]
8000425e:	43 a0       	lddsp	r0,sp[0xe8]

80004260 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004260:	e1 b8 00 43 	mfsr	r8,0x10c
80004264:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004268:	5e fc       	retal	r12
8000426a:	d7 03       	nop

8000426c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
8000426c:	48 78       	lddpc	r8,80004288 <vPortExitCritical+0x1c>
8000426e:	70 08       	ld.w	r8,r8[0x0]
80004270:	58 08       	cp.w	r8,0
80004272:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
80004274:	48 58       	lddpc	r8,80004288 <vPortExitCritical+0x1c>
80004276:	70 09       	ld.w	r9,r8[0x0]
80004278:	20 19       	sub	r9,1
8000427a:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
8000427c:	70 08       	ld.w	r8,r8[0x0]
8000427e:	58 08       	cp.w	r8,0
80004280:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
80004282:	d5 03       	csrf	0x10
80004284:	5e fc       	retal	r12
80004286:	00 00       	add	r0,r0
80004288:	00 00       	add	r0,r0
8000428a:	00 f4       	st.b	--r0,r4

8000428c <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
8000428c:	eb cd 00 ff 	pushm	r0-r7
80004290:	e0 68 00 f4 	mov	r8,244
80004294:	ea 18 00 00 	orh	r8,0x0
80004298:	70 00       	ld.w	r0,r8[0x0]
8000429a:	1a d0       	st.w	--sp,r0
8000429c:	7a 90       	ld.w	r0,sp[0x24]
8000429e:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
800042a2:	58 10       	cp.w	r0,1
800042a4:	e0 8b 00 08 	brhi	800042b4 <LABEL_INT_SKIP_SAVE_CONTEXT_240>
800042a8:	e0 68 09 5c 	mov	r8,2396
800042ac:	ea 18 00 00 	orh	r8,0x0
800042b0:	70 00       	ld.w	r0,r8[0x0]
800042b2:	81 0d       	st.w	r0[0x0],sp

800042b4 <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
800042b4:	f0 1f 00 12 	mcall	800042fc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
800042b8:	f0 1f 00 12 	mcall	80004300 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
800042bc:	f0 1f 00 12 	mcall	80004304 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
800042c0:	f0 1f 00 12 	mcall	80004308 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
800042c4:	7a 90       	ld.w	r0,sp[0x24]
800042c6:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
800042ca:	58 10       	cp.w	r0,1
800042cc:	e0 8b 00 0e 	brhi	800042e8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
800042d0:	f0 1f 00 0c 	mcall	80004300 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
800042d4:	f0 1f 00 0e 	mcall	8000430c <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042d8:	f0 1f 00 0c 	mcall	80004308 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042dc:	e0 68 09 5c 	mov	r8,2396
800042e0:	ea 18 00 00 	orh	r8,0x0
800042e4:	70 00       	ld.w	r0,r8[0x0]
800042e6:	60 0d       	ld.w	sp,r0[0x0]

800042e8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042e8:	1b 00       	ld.w	r0,sp++
800042ea:	e0 68 00 f4 	mov	r8,244
800042ee:	ea 18 00 00 	orh	r8,0x0
800042f2:	91 00       	st.w	r8[0x0],r0
800042f4:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042f8:	d6 03       	rete
800042fa:	00 00       	add	r0,r0
800042fc:	80 00       	ld.sh	r0,r0[0x0]
800042fe:	42 60       	lddsp	r0,sp[0x98]
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	41 60       	lddsp	r0,sp[0x58]
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	44 1c       	lddsp	r12,sp[0x104]
80004308:	80 00       	ld.sh	r0,r0[0x0]
8000430a:	42 6c       	lddsp	r12,sp[0x98]
8000430c:	80 00       	ld.sh	r0,r0[0x0]
8000430e:	43 a0       	lddsp	r0,sp[0xe8]

80004310 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
80004310:	d4 01       	pushm	lr
	vTaskSuspendAll();
80004312:	f0 1f 00 02 	mcall	80004318 <__malloc_lock+0x8>
}
80004316:	d8 02       	popm	pc
80004318:	80 00       	ld.sh	r0,r0[0x0]
8000431a:	43 90       	lddsp	r0,sp[0xe4]

8000431c <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
8000431c:	d4 01       	pushm	lr
	xTaskResumeAll();
8000431e:	f0 1f 00 02 	mcall	80004324 <__malloc_unlock+0x8>
}
80004322:	d8 02       	popm	pc
80004324:	80 00       	ld.sh	r0,r0[0x0]
80004326:	45 34       	lddsp	r4,sp[0x14c]

80004328 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
80004328:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
8000432a:	48 48       	lddpc	r8,80004338 <_init_startup+0x10>
8000432c:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80004330:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80004332:	f0 1f 00 03 	mcall	8000433c <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
80004336:	da 0a       	popm	pc,r12=1
80004338:	80 00       	ld.sh	r0,r0[0x0]
8000433a:	5c 00       	acr	r0
8000433c:	80 00       	ld.sh	r0,r0[0x0]
8000433e:	22 74       	sub	r4,39

80004340 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004340:	eb cd 40 80 	pushm	r7,lr
80004344:	18 97       	mov	r7,r12
	if( pv )
80004346:	58 0c       	cp.w	r12,0
80004348:	c0 80       	breq	80004358 <vPortFree+0x18>
	{
		vTaskSuspendAll();
8000434a:	f0 1f 00 05 	mcall	8000435c <vPortFree+0x1c>
		{
			free( pv );
8000434e:	0e 9c       	mov	r12,r7
80004350:	f0 1f 00 04 	mcall	80004360 <vPortFree+0x20>
		}
		xTaskResumeAll();
80004354:	f0 1f 00 04 	mcall	80004364 <vPortFree+0x24>
80004358:	e3 cd 80 80 	ldm	sp++,r7,pc
8000435c:	80 00       	ld.sh	r0,r0[0x0]
8000435e:	43 90       	lddsp	r0,sp[0xe4]
80004360:	80 00       	ld.sh	r0,r0[0x0]
80004362:	4b 50       	lddpc	r0,80004434 <vTaskIncrementTick+0x18>
80004364:	80 00       	ld.sh	r0,r0[0x0]
80004366:	45 34       	lddsp	r4,sp[0x14c]

80004368 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004368:	eb cd 40 80 	pushm	r7,lr
8000436c:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
8000436e:	f0 1f 00 06 	mcall	80004384 <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
80004372:	0e 9c       	mov	r12,r7
80004374:	f0 1f 00 05 	mcall	80004388 <pvPortMalloc+0x20>
80004378:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
8000437a:	f0 1f 00 05 	mcall	8000438c <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
8000437e:	0e 9c       	mov	r12,r7
80004380:	e3 cd 80 80 	ldm	sp++,r7,pc
80004384:	80 00       	ld.sh	r0,r0[0x0]
80004386:	43 90       	lddsp	r0,sp[0xe4]
80004388:	80 00       	ld.sh	r0,r0[0x0]
8000438a:	4b 68       	lddpc	r8,80004460 <vTaskIncrementTick+0x44>
8000438c:	80 00       	ld.sh	r0,r0[0x0]
8000438e:	45 34       	lddsp	r4,sp[0x14c]

80004390 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004390:	48 38       	lddpc	r8,8000439c <vTaskSuspendAll+0xc>
80004392:	70 09       	ld.w	r9,r8[0x0]
80004394:	2f f9       	sub	r9,-1
80004396:	91 09       	st.w	r8[0x0],r9
}
80004398:	5e fc       	retal	r12
8000439a:	00 00       	add	r0,r0
8000439c:	00 00       	add	r0,r0
8000439e:	09 8c       	ld.ub	r12,r4[0x0]

800043a0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
800043a0:	49 a8       	lddpc	r8,80004408 <vTaskSwitchContext+0x68>
800043a2:	70 08       	ld.w	r8,r8[0x0]
800043a4:	58 08       	cp.w	r8,0
800043a6:	c0 b1       	brne	800043bc <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043a8:	49 98       	lddpc	r8,8000440c <vTaskSwitchContext+0x6c>
800043aa:	70 08       	ld.w	r8,r8[0x0]
800043ac:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043b0:	49 89       	lddpc	r9,80004410 <vTaskSwitchContext+0x70>
800043b2:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800043b6:	58 08       	cp.w	r8,0
800043b8:	c0 60       	breq	800043c4 <vTaskSwitchContext+0x24>
800043ba:	c1 18       	rjmp	800043dc <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
800043bc:	30 19       	mov	r9,1
800043be:	49 68       	lddpc	r8,80004414 <vTaskSwitchContext+0x74>
800043c0:	91 09       	st.w	r8[0x0],r9
800043c2:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
800043c4:	49 28       	lddpc	r8,8000440c <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043c6:	49 3a       	lddpc	r10,80004410 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
800043c8:	70 09       	ld.w	r9,r8[0x0]
800043ca:	20 19       	sub	r9,1
800043cc:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043ce:	70 09       	ld.w	r9,r8[0x0]
800043d0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043d4:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043d8:	58 09       	cp.w	r9,0
800043da:	cf 70       	breq	800043c8 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043dc:	48 c8       	lddpc	r8,8000440c <vTaskSwitchContext+0x6c>
800043de:	70 08       	ld.w	r8,r8[0x0]
800043e0:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043e4:	48 b9       	lddpc	r9,80004410 <vTaskSwitchContext+0x70>
800043e6:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043ea:	70 19       	ld.w	r9,r8[0x4]
800043ec:	72 19       	ld.w	r9,r9[0x4]
800043ee:	91 19       	st.w	r8[0x4],r9
800043f0:	f0 ca ff f8 	sub	r10,r8,-8
800043f4:	14 39       	cp.w	r9,r10
800043f6:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043fa:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043fe:	70 18       	ld.w	r8,r8[0x4]
80004400:	70 39       	ld.w	r9,r8[0xc]
80004402:	48 68       	lddpc	r8,80004418 <vTaskSwitchContext+0x78>
80004404:	91 09       	st.w	r8[0x0],r9
80004406:	5e fc       	retal	r12
80004408:	00 00       	add	r0,r0
8000440a:	09 8c       	ld.ub	r12,r4[0x0]
8000440c:	00 00       	add	r0,r0
8000440e:	09 c4       	ld.ub	r4,r4[0x4]
80004410:	00 00       	add	r0,r0
80004412:	08 a8       	st.w	r4++,r8
80004414:	00 00       	add	r0,r0
80004416:	09 ac       	ld.ub	r12,r4[0x2]
80004418:	00 00       	add	r0,r0
8000441a:	09 5c       	ld.sh	r12,--r4

8000441c <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
8000441c:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004420:	4b a8       	lddpc	r8,80004508 <vTaskIncrementTick+0xec>
80004422:	70 08       	ld.w	r8,r8[0x0]
80004424:	58 08       	cp.w	r8,0
80004426:	c6 a1       	brne	800044fa <vTaskIncrementTick+0xde>
	{
		++xTickCount;
80004428:	4b 98       	lddpc	r8,8000450c <vTaskIncrementTick+0xf0>
8000442a:	70 09       	ld.w	r9,r8[0x0]
8000442c:	2f f9       	sub	r9,-1
8000442e:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80004430:	70 08       	ld.w	r8,r8[0x0]
80004432:	58 08       	cp.w	r8,0
80004434:	c1 a1       	brne	80004468 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
80004436:	4b 78       	lddpc	r8,80004510 <vTaskIncrementTick+0xf4>
80004438:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
8000443a:	4b 79       	lddpc	r9,80004514 <vTaskIncrementTick+0xf8>
8000443c:	72 0b       	ld.w	r11,r9[0x0]
8000443e:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004440:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
80004442:	4b 69       	lddpc	r9,80004518 <vTaskIncrementTick+0xfc>
80004444:	72 0a       	ld.w	r10,r9[0x0]
80004446:	2f fa       	sub	r10,-1
80004448:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000444a:	70 08       	ld.w	r8,r8[0x0]
8000444c:	70 08       	ld.w	r8,r8[0x0]
8000444e:	58 08       	cp.w	r8,0
80004450:	c0 51       	brne	8000445a <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
80004452:	3f f9       	mov	r9,-1
80004454:	4b 28       	lddpc	r8,8000451c <vTaskIncrementTick+0x100>
80004456:	91 09       	st.w	r8[0x0],r9
80004458:	c0 88       	rjmp	80004468 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
8000445a:	4a e8       	lddpc	r8,80004510 <vTaskIncrementTick+0xf4>
8000445c:	70 08       	ld.w	r8,r8[0x0]
8000445e:	70 38       	ld.w	r8,r8[0xc]
80004460:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80004462:	70 19       	ld.w	r9,r8[0x4]
80004464:	4a e8       	lddpc	r8,8000451c <vTaskIncrementTick+0x100>
80004466:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80004468:	4a 98       	lddpc	r8,8000450c <vTaskIncrementTick+0xf0>
8000446a:	70 09       	ld.w	r9,r8[0x0]
8000446c:	4a c8       	lddpc	r8,8000451c <vTaskIncrementTick+0x100>
8000446e:	70 08       	ld.w	r8,r8[0x0]
80004470:	10 39       	cp.w	r9,r8
80004472:	c4 83       	brcs	80004502 <vTaskIncrementTick+0xe6>
80004474:	4a 78       	lddpc	r8,80004510 <vTaskIncrementTick+0xf4>
80004476:	70 08       	ld.w	r8,r8[0x0]
80004478:	70 08       	ld.w	r8,r8[0x0]
8000447a:	58 08       	cp.w	r8,0
8000447c:	c0 c0       	breq	80004494 <vTaskIncrementTick+0x78>
8000447e:	4a 58       	lddpc	r8,80004510 <vTaskIncrementTick+0xf4>
80004480:	70 08       	ld.w	r8,r8[0x0]
80004482:	70 38       	ld.w	r8,r8[0xc]
80004484:	70 37       	ld.w	r7,r8[0xc]
80004486:	6e 18       	ld.w	r8,r7[0x4]
80004488:	4a 19       	lddpc	r9,8000450c <vTaskIncrementTick+0xf0>
8000448a:	72 09       	ld.w	r9,r9[0x0]
8000448c:	12 38       	cp.w	r8,r9
8000448e:	e0 88 00 14 	brls	800044b6 <vTaskIncrementTick+0x9a>
80004492:	c0 e8       	rjmp	800044ae <vTaskIncrementTick+0x92>
80004494:	3f f9       	mov	r9,-1
80004496:	4a 28       	lddpc	r8,8000451c <vTaskIncrementTick+0x100>
80004498:	91 09       	st.w	r8[0x0],r9
8000449a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000449e:	6a 08       	ld.w	r8,r5[0x0]
800044a0:	70 38       	ld.w	r8,r8[0xc]
800044a2:	70 37       	ld.w	r7,r8[0xc]
800044a4:	6e 18       	ld.w	r8,r7[0x4]
800044a6:	64 09       	ld.w	r9,r2[0x0]
800044a8:	12 38       	cp.w	r8,r9
800044aa:	e0 88 00 0b 	brls	800044c0 <vTaskIncrementTick+0xa4>
800044ae:	49 c9       	lddpc	r9,8000451c <vTaskIncrementTick+0x100>
800044b0:	93 08       	st.w	r9[0x0],r8
800044b2:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044b6:	49 b4       	lddpc	r4,80004520 <vTaskIncrementTick+0x104>
800044b8:	08 91       	mov	r1,r4
800044ba:	49 b3       	lddpc	r3,80004524 <vTaskIncrementTick+0x108>
800044bc:	49 55       	lddpc	r5,80004510 <vTaskIncrementTick+0xf4>
800044be:	49 42       	lddpc	r2,8000450c <vTaskIncrementTick+0xf0>
800044c0:	ee c6 ff fc 	sub	r6,r7,-4
800044c4:	0c 9c       	mov	r12,r6
800044c6:	f0 1f 00 19 	mcall	80004528 <vTaskIncrementTick+0x10c>
800044ca:	6e a8       	ld.w	r8,r7[0x28]
800044cc:	58 08       	cp.w	r8,0
800044ce:	c0 50       	breq	800044d8 <vTaskIncrementTick+0xbc>
800044d0:	ee cc ff e8 	sub	r12,r7,-24
800044d4:	f0 1f 00 15 	mcall	80004528 <vTaskIncrementTick+0x10c>
800044d8:	6e bc       	ld.w	r12,r7[0x2c]
800044da:	68 08       	ld.w	r8,r4[0x0]
800044dc:	10 3c       	cp.w	r12,r8
800044de:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044e2:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044e6:	0c 9b       	mov	r11,r6
800044e8:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044ec:	f0 1f 00 10 	mcall	8000452c <vTaskIncrementTick+0x110>
800044f0:	6a 08       	ld.w	r8,r5[0x0]
800044f2:	70 08       	ld.w	r8,r8[0x0]
800044f4:	58 08       	cp.w	r8,0
800044f6:	cd 41       	brne	8000449e <vTaskIncrementTick+0x82>
800044f8:	cc eb       	rjmp	80004494 <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044fa:	48 e8       	lddpc	r8,80004530 <vTaskIncrementTick+0x114>
800044fc:	70 09       	ld.w	r9,r8[0x0]
800044fe:	2f f9       	sub	r9,-1
80004500:	91 09       	st.w	r8[0x0],r9
80004502:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004506:	00 00       	add	r0,r0
80004508:	00 00       	add	r0,r0
8000450a:	09 8c       	ld.ub	r12,r4[0x0]
8000450c:	00 00       	add	r0,r0
8000450e:	09 88       	ld.ub	r8,r4[0x0]
80004510:	00 00       	add	r0,r0
80004512:	08 94       	mov	r4,r4
80004514:	00 00       	add	r0,r0
80004516:	08 a4       	st.w	r4++,r4
80004518:	00 00       	add	r0,r0
8000451a:	08 a0       	st.w	r4++,r0
8000451c:	00 00       	add	r0,r0
8000451e:	00 f8       	st.b	--r0,r8
80004520:	00 00       	add	r0,r0
80004522:	09 c4       	ld.ub	r4,r4[0x4]
80004524:	00 00       	add	r0,r0
80004526:	08 a8       	st.w	r4++,r8
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	40 a6       	lddsp	r6,sp[0x28]
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	40 56       	lddsp	r6,sp[0x14]
80004530:	00 00       	add	r0,r0
80004532:	08 8c       	andn	r12,r4

80004534 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
80004534:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80004536:	f0 1f 00 2c 	mcall	800045e4 <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
8000453a:	4a c8       	lddpc	r8,800045e8 <xTaskResumeAll+0xb4>
8000453c:	70 09       	ld.w	r9,r8[0x0]
8000453e:	20 19       	sub	r9,1
80004540:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004542:	70 08       	ld.w	r8,r8[0x0]
80004544:	58 08       	cp.w	r8,0
80004546:	c4 a1       	brne	800045da <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004548:	4a 98       	lddpc	r8,800045ec <xTaskResumeAll+0xb8>
8000454a:	70 08       	ld.w	r8,r8[0x0]
8000454c:	58 08       	cp.w	r8,0
8000454e:	c4 60       	breq	800045da <xTaskResumeAll+0xa6>
80004550:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004552:	4a 85       	lddpc	r5,800045f0 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
80004554:	4a 83       	lddpc	r3,800045f4 <xTaskResumeAll+0xc0>
80004556:	06 90       	mov	r0,r3
80004558:	4a 82       	lddpc	r2,800045f8 <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000455a:	4a 91       	lddpc	r1,800045fc <xTaskResumeAll+0xc8>
8000455c:	c1 e8       	rjmp	80004598 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
8000455e:	6a 38       	ld.w	r8,r5[0xc]
80004560:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
80004562:	ee cc ff e8 	sub	r12,r7,-24
80004566:	f0 1f 00 27 	mcall	80004600 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
8000456a:	ee c6 ff fc 	sub	r6,r7,-4
8000456e:	0c 9c       	mov	r12,r6
80004570:	f0 1f 00 24 	mcall	80004600 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
80004574:	6e bc       	ld.w	r12,r7[0x2c]
80004576:	66 08       	ld.w	r8,r3[0x0]
80004578:	10 3c       	cp.w	r12,r8
8000457a:	e1 fc ba 00 	st.whi	r0[0x0],r12
8000457e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004582:	0c 9b       	mov	r11,r6
80004584:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004588:	f0 1f 00 1f 	mcall	80004604 <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000458c:	62 08       	ld.w	r8,r1[0x0]
8000458e:	6e b9       	ld.w	r9,r7[0x2c]
80004590:	70 b8       	ld.w	r8,r8[0x2c]
80004592:	10 39       	cp.w	r9,r8
80004594:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004598:	6a 08       	ld.w	r8,r5[0x0]
8000459a:	58 08       	cp.w	r8,0
8000459c:	ce 11       	brne	8000455e <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000459e:	49 b8       	lddpc	r8,80004608 <xTaskResumeAll+0xd4>
800045a0:	70 08       	ld.w	r8,r8[0x0]
800045a2:	58 08       	cp.w	r8,0
800045a4:	c0 f0       	breq	800045c2 <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
800045a6:	49 98       	lddpc	r8,80004608 <xTaskResumeAll+0xd4>
800045a8:	70 08       	ld.w	r8,r8[0x0]
800045aa:	58 08       	cp.w	r8,0
800045ac:	c1 10       	breq	800045ce <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
800045ae:	49 77       	lddpc	r7,80004608 <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
800045b0:	f0 1f 00 17 	mcall	8000460c <xTaskResumeAll+0xd8>
						--uxMissedTicks;
800045b4:	6e 08       	ld.w	r8,r7[0x0]
800045b6:	20 18       	sub	r8,1
800045b8:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
800045ba:	6e 08       	ld.w	r8,r7[0x0]
800045bc:	58 08       	cp.w	r8,0
800045be:	cf 91       	brne	800045b0 <xTaskResumeAll+0x7c>
800045c0:	c0 78       	rjmp	800045ce <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
800045c2:	58 14       	cp.w	r4,1
800045c4:	c0 50       	breq	800045ce <xTaskResumeAll+0x9a>
800045c6:	49 38       	lddpc	r8,80004610 <xTaskResumeAll+0xdc>
800045c8:	70 08       	ld.w	r8,r8[0x0]
800045ca:	58 18       	cp.w	r8,1
800045cc:	c0 71       	brne	800045da <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
800045ce:	30 09       	mov	r9,0
800045d0:	49 08       	lddpc	r8,80004610 <xTaskResumeAll+0xdc>
800045d2:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
800045d4:	d7 33       	scall
800045d6:	30 17       	mov	r7,1
800045d8:	c0 28       	rjmp	800045dc <xTaskResumeAll+0xa8>
800045da:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045dc:	f0 1f 00 0e 	mcall	80004614 <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045e0:	0e 9c       	mov	r12,r7
800045e2:	d8 32       	popm	r0-r7,pc
800045e4:	80 00       	ld.sh	r0,r0[0x0]
800045e6:	41 60       	lddsp	r0,sp[0x58]
800045e8:	00 00       	add	r0,r0
800045ea:	09 8c       	ld.ub	r12,r4[0x0]
800045ec:	00 00       	add	r0,r0
800045ee:	09 a8       	ld.ub	r8,r4[0x2]
800045f0:	00 00       	add	r0,r0
800045f2:	09 60       	ld.uh	r0,--r4
800045f4:	00 00       	add	r0,r0
800045f6:	09 c4       	ld.ub	r4,r4[0x4]
800045f8:	00 00       	add	r0,r0
800045fa:	08 a8       	st.w	r4++,r8
800045fc:	00 00       	add	r0,r0
800045fe:	09 5c       	ld.sh	r12,--r4
80004600:	80 00       	ld.sh	r0,r0[0x0]
80004602:	40 a6       	lddsp	r6,sp[0x28]
80004604:	80 00       	ld.sh	r0,r0[0x0]
80004606:	40 56       	lddsp	r6,sp[0x14]
80004608:	00 00       	add	r0,r0
8000460a:	08 8c       	andn	r12,r4
8000460c:	80 00       	ld.sh	r0,r0[0x0]
8000460e:	44 1c       	lddsp	r12,sp[0x104]
80004610:	00 00       	add	r0,r0
80004612:	09 ac       	ld.ub	r12,r4[0x2]
80004614:	80 00       	ld.sh	r0,r0[0x0]
80004616:	42 6c       	lddsp	r12,sp[0x98]

80004618 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
80004618:	eb cd 40 80 	pushm	r7,lr
8000461c:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
8000461e:	49 08       	lddpc	r8,8000465c <prvAddCurrentTaskToDelayedList+0x44>
80004620:	70 08       	ld.w	r8,r8[0x0]
80004622:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
80004624:	48 f8       	lddpc	r8,80004660 <prvAddCurrentTaskToDelayedList+0x48>
80004626:	70 08       	ld.w	r8,r8[0x0]
80004628:	10 3c       	cp.w	r12,r8
8000462a:	c0 a2       	brcc	8000463e <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000462c:	48 c8       	lddpc	r8,8000465c <prvAddCurrentTaskToDelayedList+0x44>
8000462e:	70 0b       	ld.w	r11,r8[0x0]
80004630:	48 d8       	lddpc	r8,80004664 <prvAddCurrentTaskToDelayedList+0x4c>
80004632:	70 0c       	ld.w	r12,r8[0x0]
80004634:	2f cb       	sub	r11,-4
80004636:	f0 1f 00 0d 	mcall	80004668 <prvAddCurrentTaskToDelayedList+0x50>
8000463a:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000463e:	48 88       	lddpc	r8,8000465c <prvAddCurrentTaskToDelayedList+0x44>
80004640:	70 0b       	ld.w	r11,r8[0x0]
80004642:	48 b8       	lddpc	r8,8000466c <prvAddCurrentTaskToDelayedList+0x54>
80004644:	70 0c       	ld.w	r12,r8[0x0]
80004646:	2f cb       	sub	r11,-4
80004648:	f0 1f 00 08 	mcall	80004668 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
8000464c:	48 98       	lddpc	r8,80004670 <prvAddCurrentTaskToDelayedList+0x58>
8000464e:	70 08       	ld.w	r8,r8[0x0]
80004650:	10 37       	cp.w	r7,r8
80004652:	c0 32       	brcc	80004658 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
80004654:	48 78       	lddpc	r8,80004670 <prvAddCurrentTaskToDelayedList+0x58>
80004656:	91 07       	st.w	r8[0x0],r7
80004658:	e3 cd 80 80 	ldm	sp++,r7,pc
8000465c:	00 00       	add	r0,r0
8000465e:	09 5c       	ld.sh	r12,--r4
80004660:	00 00       	add	r0,r0
80004662:	09 88       	ld.ub	r8,r4[0x0]
80004664:	00 00       	add	r0,r0
80004666:	08 a4       	st.w	r4++,r4
80004668:	80 00       	ld.sh	r0,r0[0x0]
8000466a:	40 72       	lddsp	r2,sp[0x1c]
8000466c:	00 00       	add	r0,r0
8000466e:	08 94       	mov	r4,r4
80004670:	00 00       	add	r0,r0
80004672:	00 f8       	st.b	--r0,r8

80004674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
80004674:	eb cd 40 c0 	pushm	r6-r7,lr
80004678:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
8000467a:	58 0c       	cp.w	r12,0
8000467c:	c1 10       	breq	8000469e <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
8000467e:	f0 1f 00 0a 	mcall	800046a4 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80004682:	48 a8       	lddpc	r8,800046a8 <vTaskDelay+0x34>
80004684:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004686:	48 a8       	lddpc	r8,800046ac <vTaskDelay+0x38>
80004688:	70 0c       	ld.w	r12,r8[0x0]
8000468a:	2f cc       	sub	r12,-4
8000468c:	f0 1f 00 09 	mcall	800046b0 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004690:	ee 06 00 0c 	add	r12,r7,r6
80004694:	f0 1f 00 08 	mcall	800046b4 <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004698:	f0 1f 00 08 	mcall	800046b8 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
8000469c:	c0 21       	brne	800046a0 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
8000469e:	d7 33       	scall
800046a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800046a4:	80 00       	ld.sh	r0,r0[0x0]
800046a6:	43 90       	lddsp	r0,sp[0xe4]
800046a8:	00 00       	add	r0,r0
800046aa:	09 88       	ld.ub	r8,r4[0x0]
800046ac:	00 00       	add	r0,r0
800046ae:	09 5c       	ld.sh	r12,--r4
800046b0:	80 00       	ld.sh	r0,r0[0x0]
800046b2:	40 a6       	lddsp	r6,sp[0x28]
800046b4:	80 00       	ld.sh	r0,r0[0x0]
800046b6:	46 18       	lddsp	r8,sp[0x184]
800046b8:	80 00       	ld.sh	r0,r0[0x0]
800046ba:	45 34       	lddsp	r4,sp[0x14c]

800046bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800046bc:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800046c0:	49 57       	lddpc	r7,80004714 <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046c2:	49 64       	lddpc	r4,80004718 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
800046c4:	49 63       	lddpc	r3,8000471c <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046c6:	49 75       	lddpc	r5,80004720 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800046c8:	6e 08       	ld.w	r8,r7[0x0]
800046ca:	58 08       	cp.w	r8,0
800046cc:	c1 e0       	breq	80004708 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
800046ce:	f0 1f 00 16 	mcall	80004724 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046d2:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
800046d4:	f0 1f 00 15 	mcall	80004728 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046d8:	58 06       	cp.w	r6,0
800046da:	c1 70       	breq	80004708 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046dc:	f0 1f 00 14 	mcall	8000472c <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046e0:	68 38       	ld.w	r8,r4[0xc]
800046e2:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046e4:	ec cc ff fc 	sub	r12,r6,-4
800046e8:	f0 1f 00 12 	mcall	80004730 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046ec:	66 08       	ld.w	r8,r3[0x0]
800046ee:	20 18       	sub	r8,1
800046f0:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046f2:	6e 08       	ld.w	r8,r7[0x0]
800046f4:	20 18       	sub	r8,1
800046f6:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046f8:	f0 1f 00 0f 	mcall	80004734 <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046fc:	6c cc       	ld.w	r12,r6[0x30]
800046fe:	f0 1f 00 0f 	mcall	80004738 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
80004702:	0c 9c       	mov	r12,r6
80004704:	f0 1f 00 0d 	mcall	80004738 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80004708:	6a 08       	ld.w	r8,r5[0x0]
8000470a:	58 18       	cp.w	r8,1
8000470c:	fe 98 ff de 	brls	800046c8 <prvIdleTask+0xc>
			{
				taskYIELD();
80004710:	d7 33       	scall
80004712:	cd bb       	rjmp	800046c8 <prvIdleTask+0xc>
80004714:	00 00       	add	r0,r0
80004716:	08 9c       	mov	r12,r4
80004718:	00 00       	add	r0,r0
8000471a:	09 48       	ld.w	r8,--r4
8000471c:	00 00       	add	r0,r0
8000471e:	09 a8       	ld.ub	r8,r4[0x2]
80004720:	00 00       	add	r0,r0
80004722:	08 a8       	st.w	r4++,r8
80004724:	80 00       	ld.sh	r0,r0[0x0]
80004726:	43 90       	lddsp	r0,sp[0xe4]
80004728:	80 00       	ld.sh	r0,r0[0x0]
8000472a:	45 34       	lddsp	r4,sp[0x14c]
8000472c:	80 00       	ld.sh	r0,r0[0x0]
8000472e:	41 60       	lddsp	r0,sp[0x58]
80004730:	80 00       	ld.sh	r0,r0[0x0]
80004732:	40 a6       	lddsp	r6,sp[0x28]
80004734:	80 00       	ld.sh	r0,r0[0x0]
80004736:	42 6c       	lddsp	r12,sp[0x98]
80004738:	80 00       	ld.sh	r0,r0[0x0]
8000473a:	43 40       	lddsp	r0,sp[0xd0]

8000473c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
8000473c:	d4 31       	pushm	r0-r7,lr
8000473e:	20 1d       	sub	sp,4
80004740:	fa c4 ff d8 	sub	r4,sp,-40
80004744:	50 0c       	stdsp	sp[0x0],r12
80004746:	16 91       	mov	r1,r11
80004748:	14 97       	mov	r7,r10
8000474a:	12 90       	mov	r0,r9
8000474c:	10 93       	mov	r3,r8
8000474e:	68 02       	ld.w	r2,r4[0x0]
80004750:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
80004752:	34 4c       	mov	r12,68
80004754:	f0 1f 00 5b 	mcall	800048c0 <xTaskGenericCreate+0x184>
80004758:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
8000475a:	c0 31       	brne	80004760 <xTaskGenericCreate+0x24>
8000475c:	3f fc       	mov	r12,-1
8000475e:	ca d8       	rjmp	800048b8 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004760:	58 06       	cp.w	r6,0
80004762:	e0 81 00 ad 	brne	800048bc <xTaskGenericCreate+0x180>
80004766:	0e 9c       	mov	r12,r7
80004768:	5c 7c       	castu.h	r12
8000476a:	a3 6c       	lsl	r12,0x2
8000476c:	f0 1f 00 55 	mcall	800048c0 <xTaskGenericCreate+0x184>
80004770:	18 96       	mov	r6,r12
80004772:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
80004774:	c0 61       	brne	80004780 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
80004776:	0a 9c       	mov	r12,r5
80004778:	f0 1f 00 53 	mcall	800048c4 <xTaskGenericCreate+0x188>
8000477c:	3f fc       	mov	r12,-1
8000477e:	c9 d8       	rjmp	800048b8 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004780:	5c 77       	castu.h	r7
80004782:	ee 0a 15 02 	lsl	r10,r7,0x2
80004786:	e0 6b 00 a5 	mov	r11,165
8000478a:	0c 9c       	mov	r12,r6
8000478c:	f0 1f 00 4f 	mcall	800048c8 <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004790:	ee c6 00 01 	sub	r6,r7,1
80004794:	6a c8       	ld.w	r8,r5[0x30]
80004796:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000479a:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
8000479e:	31 0a       	mov	r10,16
800047a0:	02 9b       	mov	r11,r1
800047a2:	ea cc ff cc 	sub	r12,r5,-52
800047a6:	f0 1f 00 4a 	mcall	800048cc <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
800047aa:	30 08       	mov	r8,0
800047ac:	eb 68 00 43 	st.b	r5[67],r8
800047b0:	58 73       	cp.w	r3,7
800047b2:	e6 07 17 80 	movls	r7,r3
800047b6:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
800047ba:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800047bc:	ea c4 ff fc 	sub	r4,r5,-4
800047c0:	08 9c       	mov	r12,r4
800047c2:	f0 1f 00 44 	mcall	800048d0 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800047c6:	ea cc ff e8 	sub	r12,r5,-24
800047ca:	f0 1f 00 42 	mcall	800048d0 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800047ce:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
800047d0:	ee 07 11 08 	rsub	r7,r7,8
800047d4:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800047d6:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047d8:	00 9a       	mov	r10,r0
800047da:	40 0b       	lddsp	r11,sp[0x0]
800047dc:	0c 9c       	mov	r12,r6
800047de:	f0 1f 00 3e 	mcall	800048d4 <xTaskGenericCreate+0x198>
800047e2:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047e4:	58 02       	cp.w	r2,0
800047e6:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047ea:	f0 1f 00 3c 	mcall	800048d8 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047ee:	4b c8       	lddpc	r8,800048dc <xTaskGenericCreate+0x1a0>
800047f0:	70 09       	ld.w	r9,r8[0x0]
800047f2:	2f f9       	sub	r9,-1
800047f4:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047f6:	4b b8       	lddpc	r8,800048e0 <xTaskGenericCreate+0x1a4>
800047f8:	70 08       	ld.w	r8,r8[0x0]
800047fa:	58 08       	cp.w	r8,0
800047fc:	c2 61       	brne	80004848 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047fe:	4b 98       	lddpc	r8,800048e0 <xTaskGenericCreate+0x1a4>
80004800:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
80004802:	4b 78       	lddpc	r8,800048dc <xTaskGenericCreate+0x1a0>
80004804:	70 08       	ld.w	r8,r8[0x0]
80004806:	58 18       	cp.w	r8,1
80004808:	c2 b1       	brne	8000485e <xTaskGenericCreate+0x122>
8000480a:	4b 77       	lddpc	r7,800048e4 <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
8000480c:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
80004810:	0e 9c       	mov	r12,r7
80004812:	f0 1f 00 36 	mcall	800048e8 <xTaskGenericCreate+0x1ac>
80004816:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
80004818:	0c 37       	cp.w	r7,r6
8000481a:	cf b1       	brne	80004810 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
8000481c:	4b 47       	lddpc	r7,800048ec <xTaskGenericCreate+0x1b0>
8000481e:	0e 9c       	mov	r12,r7
80004820:	f0 1f 00 32 	mcall	800048e8 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
80004824:	4b 36       	lddpc	r6,800048f0 <xTaskGenericCreate+0x1b4>
80004826:	0c 9c       	mov	r12,r6
80004828:	f0 1f 00 30 	mcall	800048e8 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
8000482c:	4b 2c       	lddpc	r12,800048f4 <xTaskGenericCreate+0x1b8>
8000482e:	f0 1f 00 2f 	mcall	800048e8 <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
80004832:	4b 2c       	lddpc	r12,800048f8 <xTaskGenericCreate+0x1bc>
80004834:	f0 1f 00 2d 	mcall	800048e8 <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004838:	4b 1c       	lddpc	r12,800048fc <xTaskGenericCreate+0x1c0>
8000483a:	f0 1f 00 2c 	mcall	800048e8 <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
8000483e:	4b 18       	lddpc	r8,80004900 <xTaskGenericCreate+0x1c4>
80004840:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80004842:	4b 18       	lddpc	r8,80004904 <xTaskGenericCreate+0x1c8>
80004844:	91 06       	st.w	r8[0x0],r6
80004846:	c0 c8       	rjmp	8000485e <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004848:	4b 08       	lddpc	r8,80004908 <xTaskGenericCreate+0x1cc>
8000484a:	70 08       	ld.w	r8,r8[0x0]
8000484c:	58 08       	cp.w	r8,0
8000484e:	c0 81       	brne	8000485e <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004850:	4a 48       	lddpc	r8,800048e0 <xTaskGenericCreate+0x1a4>
80004852:	70 08       	ld.w	r8,r8[0x0]
80004854:	70 b8       	ld.w	r8,r8[0x2c]
80004856:	10 33       	cp.w	r3,r8
80004858:	c0 33       	brcs	8000485e <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
8000485a:	4a 28       	lddpc	r8,800048e0 <xTaskGenericCreate+0x1a4>
8000485c:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
8000485e:	6a b8       	ld.w	r8,r5[0x2c]
80004860:	4a b9       	lddpc	r9,8000490c <xTaskGenericCreate+0x1d0>
80004862:	72 09       	ld.w	r9,r9[0x0]
80004864:	12 38       	cp.w	r8,r9
80004866:	e0 88 00 04 	brls	8000486e <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
8000486a:	4a 99       	lddpc	r9,8000490c <xTaskGenericCreate+0x1d0>
8000486c:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
8000486e:	4a 98       	lddpc	r8,80004910 <xTaskGenericCreate+0x1d4>
80004870:	70 09       	ld.w	r9,r8[0x0]
80004872:	2f f9       	sub	r9,-1
80004874:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
80004876:	6a b8       	ld.w	r8,r5[0x2c]
80004878:	4a 79       	lddpc	r9,80004914 <xTaskGenericCreate+0x1d8>
8000487a:	72 09       	ld.w	r9,r9[0x0]
8000487c:	12 38       	cp.w	r8,r9
8000487e:	e0 88 00 04 	brls	80004886 <xTaskGenericCreate+0x14a>
80004882:	4a 59       	lddpc	r9,80004914 <xTaskGenericCreate+0x1d8>
80004884:	93 08       	st.w	r9[0x0],r8
80004886:	6a bc       	ld.w	r12,r5[0x2c]
80004888:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000488c:	08 9b       	mov	r11,r4
8000488e:	49 68       	lddpc	r8,800048e4 <xTaskGenericCreate+0x1a8>
80004890:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004894:	f0 1f 00 21 	mcall	80004918 <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80004898:	f0 1f 00 21 	mcall	8000491c <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
8000489c:	49 b8       	lddpc	r8,80004908 <xTaskGenericCreate+0x1cc>
8000489e:	70 08       	ld.w	r8,r8[0x0]
800048a0:	58 08       	cp.w	r8,0
800048a2:	c0 a0       	breq	800048b6 <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800048a4:	48 f8       	lddpc	r8,800048e0 <xTaskGenericCreate+0x1a4>
800048a6:	70 08       	ld.w	r8,r8[0x0]
800048a8:	70 b8       	ld.w	r8,r8[0x2c]
800048aa:	10 33       	cp.w	r3,r8
800048ac:	e0 88 00 05 	brls	800048b6 <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
800048b0:	d7 33       	scall
800048b2:	30 1c       	mov	r12,1
800048b4:	c0 28       	rjmp	800048b8 <xTaskGenericCreate+0x17c>
800048b6:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
800048b8:	2f fd       	sub	sp,-4
800048ba:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
800048bc:	99 c6       	st.w	r12[0x30],r6
800048be:	c6 1b       	rjmp	80004780 <xTaskGenericCreate+0x44>
800048c0:	80 00       	ld.sh	r0,r0[0x0]
800048c2:	43 68       	lddsp	r8,sp[0xd8]
800048c4:	80 00       	ld.sh	r0,r0[0x0]
800048c6:	43 40       	lddsp	r0,sp[0xd0]
800048c8:	80 00       	ld.sh	r0,r0[0x0]
800048ca:	4f d0       	lddpc	r0,80004abc <main+0x58>
800048cc:	80 00       	ld.sh	r0,r0[0x0]
800048ce:	51 44       	stdsp	sp[0x50],r4
800048d0:	80 00       	ld.sh	r0,r0[0x0]
800048d2:	40 50       	lddsp	r0,sp[0x14]
800048d4:	80 00       	ld.sh	r0,r0[0x0]
800048d6:	40 cc       	lddsp	r12,sp[0x30]
800048d8:	80 00       	ld.sh	r0,r0[0x0]
800048da:	41 60       	lddsp	r0,sp[0x58]
800048dc:	00 00       	add	r0,r0
800048de:	09 a8       	ld.ub	r8,r4[0x2]
800048e0:	00 00       	add	r0,r0
800048e2:	09 5c       	ld.sh	r12,--r4
800048e4:	00 00       	add	r0,r0
800048e6:	08 a8       	st.w	r4++,r8
800048e8:	80 00       	ld.sh	r0,r0[0x0]
800048ea:	40 3c       	lddsp	r12,sp[0xc]
800048ec:	00 00       	add	r0,r0
800048ee:	09 74       	ld.ub	r4,--r4
800048f0:	00 00       	add	r0,r0
800048f2:	09 90       	ld.ub	r0,r4[0x1]
800048f4:	00 00       	add	r0,r0
800048f6:	09 60       	ld.uh	r0,--r4
800048f8:	00 00       	add	r0,r0
800048fa:	09 48       	ld.w	r8,--r4
800048fc:	00 00       	add	r0,r0
800048fe:	09 b0       	ld.ub	r0,r4[0x3]
80004900:	00 00       	add	r0,r0
80004902:	08 94       	mov	r4,r4
80004904:	00 00       	add	r0,r0
80004906:	08 a4       	st.w	r4++,r4
80004908:	00 00       	add	r0,r0
8000490a:	08 98       	mov	r8,r4
8000490c:	00 00       	add	r0,r0
8000490e:	08 90       	mov	r0,r4
80004910:	00 00       	add	r0,r0
80004912:	09 a4       	ld.ub	r4,r4[0x2]
80004914:	00 00       	add	r0,r0
80004916:	09 c4       	ld.ub	r4,r4[0x4]
80004918:	80 00       	ld.sh	r0,r0[0x0]
8000491a:	40 56       	lddsp	r6,sp[0x14]
8000491c:	80 00       	ld.sh	r0,r0[0x0]
8000491e:	42 6c       	lddsp	r12,sp[0x98]

80004920 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
80004920:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
80004922:	30 09       	mov	r9,0
80004924:	1a d9       	st.w	--sp,r9
80004926:	1a d9       	st.w	--sp,r9
80004928:	1a d9       	st.w	--sp,r9
8000492a:	12 98       	mov	r8,r9
8000492c:	e0 6a 01 00 	mov	r10,256
80004930:	48 9b       	lddpc	r11,80004954 <vTaskStartScheduler+0x34>
80004932:	48 ac       	lddpc	r12,80004958 <vTaskStartScheduler+0x38>
80004934:	f0 1f 00 0a 	mcall	8000495c <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004938:	2f dd       	sub	sp,-12
8000493a:	58 1c       	cp.w	r12,1
8000493c:	c0 a1       	brne	80004950 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
8000493e:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004940:	30 19       	mov	r9,1
80004942:	48 88       	lddpc	r8,80004960 <vTaskStartScheduler+0x40>
80004944:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
80004946:	30 09       	mov	r9,0
80004948:	48 78       	lddpc	r8,80004964 <vTaskStartScheduler+0x44>
8000494a:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
8000494c:	f0 1f 00 07 	mcall	80004968 <vTaskStartScheduler+0x48>
80004950:	d8 02       	popm	pc
80004952:	00 00       	add	r0,r0
80004954:	80 00       	ld.sh	r0,r0[0x0]
80004956:	5f 08       	sreq	r8
80004958:	80 00       	ld.sh	r0,r0[0x0]
8000495a:	46 bc       	lddsp	r12,sp[0x1ac]
8000495c:	80 00       	ld.sh	r0,r0[0x0]
8000495e:	47 3c       	lddsp	r12,sp[0x1cc]
80004960:	00 00       	add	r0,r0
80004962:	08 98       	mov	r8,r4
80004964:	00 00       	add	r0,r0
80004966:	09 88       	ld.ub	r8,r4[0x0]
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	41 70       	lddsp	r0,sp[0x5c]

8000496c <busy_delay_ms>:
		uint32_t useBusyWait;
	};


void busy_delay_ms(int delay){
    for(; delay != 0; delay--){
8000496c:	58 0c       	cp.w	r12,0
8000496e:	c0 91       	brne	80004980 <busy_delay_ms+0x14>
80004970:	5e fc       	retal	r12
        for(int i = 0; i < 2108; i++){
80004972:	2f f8       	sub	r8,-1
80004974:	e0 48 08 3c 	cp.w	r8,2108
80004978:	cf d1       	brne	80004972 <busy_delay_ms+0x6>
		uint32_t useBusyWait;
	};


void busy_delay_ms(int delay){
    for(; delay != 0; delay--){
8000497a:	20 1c       	sub	r12,1
8000497c:	c0 31       	brne	80004982 <busy_delay_ms+0x16>
8000497e:	5e fc       	retal	r12
80004980:	30 09       	mov	r9,0
80004982:	12 98       	mov	r8,r9
80004984:	cf 7b       	rjmp	80004972 <busy_delay_ms+0x6>

80004986 <busy_delay_short>:
            asm volatile ("" ::: "memory");
        }
    }
}

void busy_delay_short(void){
80004986:	30 08       	mov	r8,0
    for(int i = 0; i < 10; i++){
80004988:	2f f8       	sub	r8,-1
8000498a:	58 a8       	cp.w	r8,10
8000498c:	cf e1       	brne	80004988 <busy_delay_short+0x2>
        asm volatile ("" ::: "memory");
    }
}
8000498e:	5e fc       	retal	r12

80004990 <responseTask>:
		
		vTaskDelay(delay);
	}
}

static void responseTask(void* args){
80004990:	eb cd 40 f8 	pushm	r3-r7,lr
	struct responseTaskArgs a = *(struct responseTaskArgs*)args;
80004994:	78 24       	ld.w	r4,r12[0x8]
80004996:	78 16       	ld.w	r6,r12[0x4]
80004998:	78 07       	ld.w	r7,r12[0x0]
	while(1){
		if(gpio_pin_is_low(a.pin.test)){
			if (a.useBusyWait) {
				busy_delay_ms(3);
8000499a:	30 33       	mov	r3,3
			gpio_clr_gpio_pin(a.pin.response);
			//vTaskDelay(1);
			busy_delay_short();
			gpio_set_gpio_pin(a.pin.response);
		}
	vTaskDelay(1);
8000499c:	30 15       	mov	r5,1
}

static void responseTask(void* args){
	struct responseTaskArgs a = *(struct responseTaskArgs*)args;
	while(1){
		if(gpio_pin_is_low(a.pin.test)){
8000499e:	0e 9c       	mov	r12,r7
800049a0:	f0 1f 00 0a 	mcall	800049c8 <responseTask+0x38>
800049a4:	c0 e1       	brne	800049c0 <responseTask+0x30>
			if (a.useBusyWait) {
800049a6:	58 04       	cp.w	r4,0
800049a8:	c0 40       	breq	800049b0 <responseTask+0x20>
				busy_delay_ms(3);
800049aa:	06 9c       	mov	r12,r3
800049ac:	f0 1f 00 08 	mcall	800049cc <responseTask+0x3c>
			}
			gpio_clr_gpio_pin(a.pin.response);
800049b0:	0c 9c       	mov	r12,r6
800049b2:	f0 1f 00 08 	mcall	800049d0 <responseTask+0x40>
			//vTaskDelay(1);
			busy_delay_short();
800049b6:	f0 1f 00 08 	mcall	800049d4 <responseTask+0x44>
			gpio_set_gpio_pin(a.pin.response);
800049ba:	0c 9c       	mov	r12,r6
800049bc:	f0 1f 00 07 	mcall	800049d8 <responseTask+0x48>
		}
	vTaskDelay(1);
800049c0:	0a 9c       	mov	r12,r5
800049c2:	f0 1f 00 07 	mcall	800049dc <responseTask+0x4c>
	}
800049c6:	ce cb       	rjmp	8000499e <responseTask+0xe>
800049c8:	80 00       	ld.sh	r0,r0[0x0]
800049ca:	21 f4       	sub	r4,31
800049cc:	80 00       	ld.sh	r0,r0[0x0]
800049ce:	49 6c       	lddpc	r12,80004a24 <init+0x44>
800049d0:	80 00       	ld.sh	r0,r0[0x0]
800049d2:	22 26       	sub	r6,34
800049d4:	80 00       	ld.sh	r0,r0[0x0]
800049d6:	49 86       	lddpc	r6,80004a34 <init+0x54>
800049d8:	80 00       	ld.sh	r0,r0[0x0]
800049da:	22 0a       	sub	r10,32
800049dc:	80 00       	ld.sh	r0,r0[0x0]
800049de:	46 74       	lddsp	r4,sp[0x19c]

800049e0 <init>:
    for(int i = 0; i < 10; i++){
        asm volatile ("" ::: "memory");
    }
}

void init(){
800049e0:	eb cd 40 80 	pushm	r7,lr
	board_init();
800049e4:	f0 1f 00 1a 	mcall	80004a4c <init+0x6c>
	
    gpio_configure_pin(TEST_A, GPIO_DIR_INPUT);
800049e8:	30 0b       	mov	r11,0
800049ea:	31 fc       	mov	r12,31
800049ec:	f0 1f 00 19 	mcall	80004a50 <init+0x70>
    gpio_configure_pin(TEST_B, GPIO_DIR_INPUT);
800049f0:	30 0b       	mov	r11,0
800049f2:	31 dc       	mov	r12,29
800049f4:	f0 1f 00 17 	mcall	80004a50 <init+0x70>
    gpio_configure_pin(TEST_C, GPIO_DIR_INPUT);
800049f8:	30 0b       	mov	r11,0
800049fa:	31 bc       	mov	r12,27
800049fc:	f0 1f 00 15 	mcall	80004a50 <init+0x70>
    gpio_configure_pin(RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004a00:	30 3b       	mov	r11,3
80004a02:	31 ec       	mov	r12,30
80004a04:	f0 1f 00 13 	mcall	80004a50 <init+0x70>
    gpio_configure_pin(RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004a08:	30 3b       	mov	r11,3
80004a0a:	31 cc       	mov	r12,28
80004a0c:	f0 1f 00 11 	mcall	80004a50 <init+0x70>
    gpio_configure_pin(RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004a10:	30 3b       	mov	r11,3
80004a12:	32 0c       	mov	r12,32
80004a14:	f0 1f 00 0f 	mcall	80004a50 <init+0x70>

	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80004a18:	30 3a       	mov	r10,3
80004a1a:	e0 6b 1b 00 	mov	r11,6912
80004a1e:	ea 1b 00 b7 	orh	r11,0xb7
80004a22:	30 0c       	mov	r12,0
80004a24:	f0 1f 00 0c 	mcall	80004a54 <init+0x74>
	
	stdio_usb_init(&CONFIG_USART_IF);
80004a28:	fe 7c 1c 00 	mov	r12,-58368
80004a2c:	f0 1f 00 0b 	mcall	80004a58 <init+0x78>

    #if defined(__GNUC__) && defined(__AVR32__)
	    setbuf(stdout, NULL);
80004a30:	48 b7       	lddpc	r7,80004a5c <init+0x7c>
80004a32:	6e 08       	ld.w	r8,r7[0x0]
80004a34:	30 0b       	mov	r11,0
80004a36:	70 1c       	ld.w	r12,r8[0x4]
80004a38:	f0 1f 00 0a 	mcall	80004a60 <init+0x80>
	    setbuf(stdin,  NULL);
80004a3c:	6e 08       	ld.w	r8,r7[0x0]
80004a3e:	30 0b       	mov	r11,0
80004a40:	70 0c       	ld.w	r12,r8[0x0]
80004a42:	f0 1f 00 08 	mcall	80004a60 <init+0x80>
    #endif
}
80004a46:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a4a:	00 00       	add	r0,r0
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	21 0c       	sub	r12,16
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	21 3c       	sub	r12,19
80004a54:	80 00       	ld.sh	r0,r0[0x0]
80004a56:	23 b8       	sub	r8,59
80004a58:	80 00       	ld.sh	r0,r0[0x0]
80004a5a:	3f 64       	mov	r4,-10
80004a5c:	00 00       	add	r0,r0
80004a5e:	01 ec       	ld.ub	r12,r0[0x6]
80004a60:	80 00       	ld.sh	r0,r0[0x0]
80004a62:	50 08       	stdsp	sp[0x0],r8

80004a64 <main>:
	vTaskDelay(1);
	}
}


int main(){
80004a64:	eb cd 40 e0 	pushm	r5-r7,lr
80004a68:	20 9d       	sub	sp,36
	init();
80004a6a:	f0 1f 00 23 	mcall	80004af4 <main+0x90>
        
	//xTaskCreate(taskFn, "", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
	//xTaskCreate(taskFn2, "", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
	
	xTaskCreate(responseTask, "", 1024, (&(struct responseTaskArgs){{TEST_A, RESPONSE_A}, 0}), tskIDLE_PRIORITY + 2, NULL);
80004a6e:	4a 38       	lddpc	r8,80004af8 <main+0x94>
80004a70:	1a 99       	mov	r9,sp
80004a72:	f0 ea 00 00 	ld.d	r10,r8[0]
80004a76:	fa eb 00 00 	st.d	sp[0],r10
80004a7a:	70 28       	ld.w	r8,r8[0x8]
80004a7c:	50 28       	stdsp	sp[0x8],r8
80004a7e:	4a 06       	lddpc	r6,80004afc <main+0x98>
80004a80:	4a 05       	lddpc	r5,80004b00 <main+0x9c>
80004a82:	30 07       	mov	r7,0
80004a84:	1a d7       	st.w	--sp,r7
80004a86:	1a d7       	st.w	--sp,r7
80004a88:	1a d7       	st.w	--sp,r7
80004a8a:	30 28       	mov	r8,2
80004a8c:	e0 6a 04 00 	mov	r10,1024
80004a90:	0c 9b       	mov	r11,r6
80004a92:	0a 9c       	mov	r12,r5
80004a94:	f0 1f 00 1c 	mcall	80004b04 <main+0xa0>
	xTaskCreate(responseTask, "", 1024, (&(struct responseTaskArgs){{TEST_B, RESPONSE_B}, 0}), tskIDLE_PRIORITY + 2, NULL);
80004a98:	49 c8       	lddpc	r8,80004b08 <main+0xa4>
80004a9a:	fa c9 ff e8 	sub	r9,sp,-24
80004a9e:	f0 ea 00 00 	ld.d	r10,r8[0]
80004aa2:	f2 eb 00 00 	st.d	r9[0],r10
80004aa6:	70 28       	ld.w	r8,r8[0x8]
80004aa8:	93 28       	st.w	r9[0x8],r8
80004aaa:	1a d7       	st.w	--sp,r7
80004aac:	1a d7       	st.w	--sp,r7
80004aae:	1a d7       	st.w	--sp,r7
80004ab0:	30 28       	mov	r8,2
80004ab2:	e0 6a 04 00 	mov	r10,1024
80004ab6:	0c 9b       	mov	r11,r6
80004ab8:	0a 9c       	mov	r12,r5
80004aba:	f0 1f 00 13 	mcall	80004b04 <main+0xa0>
	xTaskCreate(responseTask, "", 1024, (&(struct responseTaskArgs){{TEST_C, RESPONSE_C}, 1}), tskIDLE_PRIORITY + 1, NULL);
80004abe:	49 48       	lddpc	r8,80004b0c <main+0xa8>
80004ac0:	fa c9 ff d0 	sub	r9,sp,-48
80004ac4:	f0 ea 00 00 	ld.d	r10,r8[0]
80004ac8:	f2 eb 00 00 	st.d	r9[0],r10
80004acc:	70 28       	ld.w	r8,r8[0x8]
80004ace:	93 28       	st.w	r9[0x8],r8
80004ad0:	1a d7       	st.w	--sp,r7
80004ad2:	1a d7       	st.w	--sp,r7
80004ad4:	1a d7       	st.w	--sp,r7
80004ad6:	30 18       	mov	r8,1
80004ad8:	e0 6a 04 00 	mov	r10,1024
80004adc:	0c 9b       	mov	r11,r6
80004ade:	0a 9c       	mov	r12,r5
80004ae0:	f0 1f 00 09 	mcall	80004b04 <main+0xa0>

	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004ae4:	2f 7d       	sub	sp,-36
80004ae6:	f0 1f 00 0b 	mcall	80004b10 <main+0xac>
    
}
80004aea:	0e 9c       	mov	r12,r7
80004aec:	2f 7d       	sub	sp,-36
80004aee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004af2:	00 00       	add	r0,r0
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	49 e0       	lddpc	r0,80004b6c <malloc+0x4>
80004af8:	80 00       	ld.sh	r0,r0[0x0]
80004afa:	5f 28       	srhs	r8
80004afc:	80 00       	ld.sh	r0,r0[0x0]
80004afe:	5f 0c       	sreq	r12
80004b00:	80 00       	ld.sh	r0,r0[0x0]
80004b02:	49 90       	lddpc	r0,80004b64 <free+0x14>
80004b04:	80 00       	ld.sh	r0,r0[0x0]
80004b06:	47 3c       	lddsp	r12,sp[0x1cc]
80004b08:	80 00       	ld.sh	r0,r0[0x0]
80004b0a:	5f 10       	srne	r0
80004b0c:	80 00       	ld.sh	r0,r0[0x0]
80004b0e:	5f 1c       	srne	r12
80004b10:	80 00       	ld.sh	r0,r0[0x0]
80004b12:	49 20       	lddpc	r0,80004b58 <free+0x8>

80004b14 <atexit>:
80004b14:	d4 01       	pushm	lr
80004b16:	30 09       	mov	r9,0
80004b18:	18 9b       	mov	r11,r12
80004b1a:	12 9a       	mov	r10,r9
80004b1c:	12 9c       	mov	r12,r9
80004b1e:	f0 1f 00 02 	mcall	80004b24 <atexit+0x10>
80004b22:	d8 02       	popm	pc
80004b24:	80 00       	ld.sh	r0,r0[0x0]
80004b26:	51 e8       	stdsp	sp[0x78],r8

80004b28 <exit>:
80004b28:	d4 21       	pushm	r4-r7,lr
80004b2a:	30 0b       	mov	r11,0
80004b2c:	18 97       	mov	r7,r12
80004b2e:	f0 1f 00 06 	mcall	80004b44 <exit+0x1c>
80004b32:	48 68       	lddpc	r8,80004b48 <exit+0x20>
80004b34:	70 0c       	ld.w	r12,r8[0x0]
80004b36:	78 a8       	ld.w	r8,r12[0x28]
80004b38:	58 08       	cp.w	r8,0
80004b3a:	c0 20       	breq	80004b3e <exit+0x16>
80004b3c:	5d 18       	icall	r8
80004b3e:	0e 9c       	mov	r12,r7
80004b40:	f0 1f 00 03 	mcall	80004b4c <exit+0x24>
80004b44:	80 00       	ld.sh	r0,r0[0x0]
80004b46:	52 94       	stdsp	sp[0xa4],r4
80004b48:	80 00       	ld.sh	r0,r0[0x0]
80004b4a:	5f 38       	srlo	r8
80004b4c:	80 00       	ld.sh	r0,r0[0x0]
80004b4e:	51 6e       	stdsp	sp[0x58],lr

80004b50 <free>:
80004b50:	d4 01       	pushm	lr
80004b52:	48 48       	lddpc	r8,80004b60 <free+0x10>
80004b54:	18 9b       	mov	r11,r12
80004b56:	70 0c       	ld.w	r12,r8[0x0]
80004b58:	f0 1f 00 03 	mcall	80004b64 <free+0x14>
80004b5c:	d8 02       	popm	pc
80004b5e:	00 00       	add	r0,r0
80004b60:	00 00       	add	r0,r0
80004b62:	01 ec       	ld.ub	r12,r0[0x6]
80004b64:	80 00       	ld.sh	r0,r0[0x0]
80004b66:	56 a8       	stdsp	sp[0x1a8],r8

80004b68 <malloc>:
80004b68:	d4 01       	pushm	lr
80004b6a:	48 48       	lddpc	r8,80004b78 <malloc+0x10>
80004b6c:	18 9b       	mov	r11,r12
80004b6e:	70 0c       	ld.w	r12,r8[0x0]
80004b70:	f0 1f 00 03 	mcall	80004b7c <malloc+0x14>
80004b74:	d8 02       	popm	pc
80004b76:	00 00       	add	r0,r0
80004b78:	00 00       	add	r0,r0
80004b7a:	01 ec       	ld.ub	r12,r0[0x6]
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	4b 80       	lddpc	r0,80004c5c <_malloc_r+0xdc>

80004b80 <_malloc_r>:
80004b80:	d4 31       	pushm	r0-r7,lr
80004b82:	f6 c8 ff f5 	sub	r8,r11,-11
80004b86:	18 95       	mov	r5,r12
80004b88:	10 97       	mov	r7,r8
80004b8a:	e0 17 ff f8 	andl	r7,0xfff8
80004b8e:	59 68       	cp.w	r8,22
80004b90:	f9 b7 08 10 	movls	r7,16
80004b94:	16 37       	cp.w	r7,r11
80004b96:	5f 38       	srlo	r8
80004b98:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004b9c:	c0 50       	breq	80004ba6 <_malloc_r+0x26>
80004b9e:	30 c8       	mov	r8,12
80004ba0:	99 38       	st.w	r12[0xc],r8
80004ba2:	e0 8f 01 f3 	bral	80004f88 <_malloc_r+0x408>
80004ba6:	f0 1f 00 50 	mcall	80004ce4 <_malloc_r+0x164>
80004baa:	e0 47 01 f7 	cp.w	r7,503
80004bae:	e0 8b 00 1c 	brhi	80004be6 <_malloc_r+0x66>
80004bb2:	ee 03 16 03 	lsr	r3,r7,0x3
80004bb6:	4c d8       	lddpc	r8,80004ce8 <_malloc_r+0x168>
80004bb8:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004bbc:	70 36       	ld.w	r6,r8[0xc]
80004bbe:	10 36       	cp.w	r6,r8
80004bc0:	c0 61       	brne	80004bcc <_malloc_r+0x4c>
80004bc2:	ec c8 ff f8 	sub	r8,r6,-8
80004bc6:	70 36       	ld.w	r6,r8[0xc]
80004bc8:	10 36       	cp.w	r6,r8
80004bca:	c0 c0       	breq	80004be2 <_malloc_r+0x62>
80004bcc:	6c 18       	ld.w	r8,r6[0x4]
80004bce:	e0 18 ff fc 	andl	r8,0xfffc
80004bd2:	6c 3a       	ld.w	r10,r6[0xc]
80004bd4:	ec 08 00 09 	add	r9,r6,r8
80004bd8:	0a 9c       	mov	r12,r5
80004bda:	6c 28       	ld.w	r8,r6[0x8]
80004bdc:	95 28       	st.w	r10[0x8],r8
80004bde:	91 3a       	st.w	r8[0xc],r10
80004be0:	c4 68       	rjmp	80004c6c <_malloc_r+0xec>
80004be2:	2f e3       	sub	r3,-2
80004be4:	c4 c8       	rjmp	80004c7c <_malloc_r+0xfc>
80004be6:	ee 03 16 09 	lsr	r3,r7,0x9
80004bea:	c0 41       	brne	80004bf2 <_malloc_r+0x72>
80004bec:	ee 03 16 03 	lsr	r3,r7,0x3
80004bf0:	c2 68       	rjmp	80004c3c <_malloc_r+0xbc>
80004bf2:	58 43       	cp.w	r3,4
80004bf4:	e0 8b 00 06 	brhi	80004c00 <_malloc_r+0x80>
80004bf8:	ee 03 16 06 	lsr	r3,r7,0x6
80004bfc:	2c 83       	sub	r3,-56
80004bfe:	c1 f8       	rjmp	80004c3c <_malloc_r+0xbc>
80004c00:	59 43       	cp.w	r3,20
80004c02:	e0 8b 00 04 	brhi	80004c0a <_malloc_r+0x8a>
80004c06:	2a 53       	sub	r3,-91
80004c08:	c1 a8       	rjmp	80004c3c <_malloc_r+0xbc>
80004c0a:	e0 43 00 54 	cp.w	r3,84
80004c0e:	e0 8b 00 06 	brhi	80004c1a <_malloc_r+0x9a>
80004c12:	ee 03 16 0c 	lsr	r3,r7,0xc
80004c16:	29 23       	sub	r3,-110
80004c18:	c1 28       	rjmp	80004c3c <_malloc_r+0xbc>
80004c1a:	e0 43 01 54 	cp.w	r3,340
80004c1e:	e0 8b 00 06 	brhi	80004c2a <_malloc_r+0xaa>
80004c22:	ee 03 16 0f 	lsr	r3,r7,0xf
80004c26:	28 93       	sub	r3,-119
80004c28:	c0 a8       	rjmp	80004c3c <_malloc_r+0xbc>
80004c2a:	e0 43 05 54 	cp.w	r3,1364
80004c2e:	e0 88 00 04 	brls	80004c36 <_malloc_r+0xb6>
80004c32:	37 e3       	mov	r3,126
80004c34:	c0 48       	rjmp	80004c3c <_malloc_r+0xbc>
80004c36:	ee 03 16 12 	lsr	r3,r7,0x12
80004c3a:	28 43       	sub	r3,-124
80004c3c:	4a ba       	lddpc	r10,80004ce8 <_malloc_r+0x168>
80004c3e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004c42:	74 36       	ld.w	r6,r10[0xc]
80004c44:	c1 98       	rjmp	80004c76 <_malloc_r+0xf6>
80004c46:	6c 19       	ld.w	r9,r6[0x4]
80004c48:	e0 19 ff fc 	andl	r9,0xfffc
80004c4c:	f2 07 01 0b 	sub	r11,r9,r7
80004c50:	58 fb       	cp.w	r11,15
80004c52:	e0 8a 00 04 	brle	80004c5a <_malloc_r+0xda>
80004c56:	20 13       	sub	r3,1
80004c58:	c1 18       	rjmp	80004c7a <_malloc_r+0xfa>
80004c5a:	6c 38       	ld.w	r8,r6[0xc]
80004c5c:	58 0b       	cp.w	r11,0
80004c5e:	c0 b5       	brlt	80004c74 <_malloc_r+0xf4>
80004c60:	6c 2a       	ld.w	r10,r6[0x8]
80004c62:	ec 09 00 09 	add	r9,r6,r9
80004c66:	0a 9c       	mov	r12,r5
80004c68:	91 2a       	st.w	r8[0x8],r10
80004c6a:	95 38       	st.w	r10[0xc],r8
80004c6c:	72 18       	ld.w	r8,r9[0x4]
80004c6e:	a1 a8       	sbr	r8,0x0
80004c70:	93 18       	st.w	r9[0x4],r8
80004c72:	cb c8       	rjmp	80004dea <_malloc_r+0x26a>
80004c74:	10 96       	mov	r6,r8
80004c76:	14 36       	cp.w	r6,r10
80004c78:	ce 71       	brne	80004c46 <_malloc_r+0xc6>
80004c7a:	2f f3       	sub	r3,-1
80004c7c:	49 ba       	lddpc	r10,80004ce8 <_malloc_r+0x168>
80004c7e:	f4 cc ff f8 	sub	r12,r10,-8
80004c82:	78 26       	ld.w	r6,r12[0x8]
80004c84:	18 36       	cp.w	r6,r12
80004c86:	c6 e0       	breq	80004d62 <_malloc_r+0x1e2>
80004c88:	6c 19       	ld.w	r9,r6[0x4]
80004c8a:	e0 19 ff fc 	andl	r9,0xfffc
80004c8e:	f2 07 01 08 	sub	r8,r9,r7
80004c92:	58 f8       	cp.w	r8,15
80004c94:	e0 89 00 90 	brgt	80004db4 <_malloc_r+0x234>
80004c98:	99 3c       	st.w	r12[0xc],r12
80004c9a:	99 2c       	st.w	r12[0x8],r12
80004c9c:	58 08       	cp.w	r8,0
80004c9e:	c0 55       	brlt	80004ca8 <_malloc_r+0x128>
80004ca0:	ec 09 00 09 	add	r9,r6,r9
80004ca4:	0a 9c       	mov	r12,r5
80004ca6:	ce 3b       	rjmp	80004c6c <_malloc_r+0xec>
80004ca8:	e0 49 01 ff 	cp.w	r9,511
80004cac:	e0 8b 00 13 	brhi	80004cd2 <_malloc_r+0x152>
80004cb0:	a3 99       	lsr	r9,0x3
80004cb2:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004cb6:	70 2b       	ld.w	r11,r8[0x8]
80004cb8:	8d 38       	st.w	r6[0xc],r8
80004cba:	8d 2b       	st.w	r6[0x8],r11
80004cbc:	97 36       	st.w	r11[0xc],r6
80004cbe:	91 26       	st.w	r8[0x8],r6
80004cc0:	a3 49       	asr	r9,0x2
80004cc2:	74 18       	ld.w	r8,r10[0x4]
80004cc4:	30 1b       	mov	r11,1
80004cc6:	f6 09 09 49 	lsl	r9,r11,r9
80004cca:	f1 e9 10 09 	or	r9,r8,r9
80004cce:	95 19       	st.w	r10[0x4],r9
80004cd0:	c4 98       	rjmp	80004d62 <_malloc_r+0x1e2>
80004cd2:	f2 0a 16 09 	lsr	r10,r9,0x9
80004cd6:	58 4a       	cp.w	r10,4
80004cd8:	e0 8b 00 0a 	brhi	80004cec <_malloc_r+0x16c>
80004cdc:	f2 0a 16 06 	lsr	r10,r9,0x6
80004ce0:	2c 8a       	sub	r10,-56
80004ce2:	c2 38       	rjmp	80004d28 <_malloc_r+0x1a8>
80004ce4:	80 00       	ld.sh	r0,r0[0x0]
80004ce6:	43 10       	lddsp	r0,sp[0xc4]
80004ce8:	00 00       	add	r0,r0
80004cea:	01 f0       	ld.ub	r0,r0[0x7]
80004cec:	59 4a       	cp.w	r10,20
80004cee:	e0 8b 00 04 	brhi	80004cf6 <_malloc_r+0x176>
80004cf2:	2a 5a       	sub	r10,-91
80004cf4:	c1 a8       	rjmp	80004d28 <_malloc_r+0x1a8>
80004cf6:	e0 4a 00 54 	cp.w	r10,84
80004cfa:	e0 8b 00 06 	brhi	80004d06 <_malloc_r+0x186>
80004cfe:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004d02:	29 2a       	sub	r10,-110
80004d04:	c1 28       	rjmp	80004d28 <_malloc_r+0x1a8>
80004d06:	e0 4a 01 54 	cp.w	r10,340
80004d0a:	e0 8b 00 06 	brhi	80004d16 <_malloc_r+0x196>
80004d0e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004d12:	28 9a       	sub	r10,-119
80004d14:	c0 a8       	rjmp	80004d28 <_malloc_r+0x1a8>
80004d16:	e0 4a 05 54 	cp.w	r10,1364
80004d1a:	e0 88 00 04 	brls	80004d22 <_malloc_r+0x1a2>
80004d1e:	37 ea       	mov	r10,126
80004d20:	c0 48       	rjmp	80004d28 <_malloc_r+0x1a8>
80004d22:	f2 0a 16 12 	lsr	r10,r9,0x12
80004d26:	28 4a       	sub	r10,-124
80004d28:	4c 8b       	lddpc	r11,80004e48 <_malloc_r+0x2c8>
80004d2a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004d2e:	68 28       	ld.w	r8,r4[0x8]
80004d30:	08 38       	cp.w	r8,r4
80004d32:	c0 e1       	brne	80004d4e <_malloc_r+0x1ce>
80004d34:	76 19       	ld.w	r9,r11[0x4]
80004d36:	a3 4a       	asr	r10,0x2
80004d38:	30 1e       	mov	lr,1
80004d3a:	fc 0a 09 4a 	lsl	r10,lr,r10
80004d3e:	f3 ea 10 0a 	or	r10,r9,r10
80004d42:	10 99       	mov	r9,r8
80004d44:	97 1a       	st.w	r11[0x4],r10
80004d46:	c0 a8       	rjmp	80004d5a <_malloc_r+0x1da>
80004d48:	70 28       	ld.w	r8,r8[0x8]
80004d4a:	08 38       	cp.w	r8,r4
80004d4c:	c0 60       	breq	80004d58 <_malloc_r+0x1d8>
80004d4e:	70 1a       	ld.w	r10,r8[0x4]
80004d50:	e0 1a ff fc 	andl	r10,0xfffc
80004d54:	14 39       	cp.w	r9,r10
80004d56:	cf 93       	brcs	80004d48 <_malloc_r+0x1c8>
80004d58:	70 39       	ld.w	r9,r8[0xc]
80004d5a:	8d 39       	st.w	r6[0xc],r9
80004d5c:	8d 28       	st.w	r6[0x8],r8
80004d5e:	91 36       	st.w	r8[0xc],r6
80004d60:	93 26       	st.w	r9[0x8],r6
80004d62:	e6 08 14 02 	asr	r8,r3,0x2
80004d66:	30 1b       	mov	r11,1
80004d68:	4b 84       	lddpc	r4,80004e48 <_malloc_r+0x2c8>
80004d6a:	f6 08 09 4b 	lsl	r11,r11,r8
80004d6e:	68 18       	ld.w	r8,r4[0x4]
80004d70:	10 3b       	cp.w	r11,r8
80004d72:	e0 8b 00 6f 	brhi	80004e50 <_malloc_r+0x2d0>
80004d76:	f7 e8 00 09 	and	r9,r11,r8
80004d7a:	c0 b1       	brne	80004d90 <_malloc_r+0x210>
80004d7c:	e0 13 ff fc 	andl	r3,0xfffc
80004d80:	a1 7b       	lsl	r11,0x1
80004d82:	2f c3       	sub	r3,-4
80004d84:	c0 38       	rjmp	80004d8a <_malloc_r+0x20a>
80004d86:	2f c3       	sub	r3,-4
80004d88:	a1 7b       	lsl	r11,0x1
80004d8a:	f7 e8 00 09 	and	r9,r11,r8
80004d8e:	cf c0       	breq	80004d86 <_malloc_r+0x206>
80004d90:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004d94:	06 92       	mov	r2,r3
80004d96:	1c 91       	mov	r1,lr
80004d98:	62 36       	ld.w	r6,r1[0xc]
80004d9a:	c2 e8       	rjmp	80004df6 <_malloc_r+0x276>
80004d9c:	6c 1a       	ld.w	r10,r6[0x4]
80004d9e:	e0 1a ff fc 	andl	r10,0xfffc
80004da2:	f4 07 01 08 	sub	r8,r10,r7
80004da6:	58 f8       	cp.w	r8,15
80004da8:	e0 8a 00 15 	brle	80004dd2 <_malloc_r+0x252>
80004dac:	6c 3a       	ld.w	r10,r6[0xc]
80004dae:	6c 29       	ld.w	r9,r6[0x8]
80004db0:	95 29       	st.w	r10[0x8],r9
80004db2:	93 3a       	st.w	r9[0xc],r10
80004db4:	0e 99       	mov	r9,r7
80004db6:	ec 07 00 07 	add	r7,r6,r7
80004dba:	a1 a9       	sbr	r9,0x0
80004dbc:	99 37       	st.w	r12[0xc],r7
80004dbe:	99 27       	st.w	r12[0x8],r7
80004dc0:	8d 19       	st.w	r6[0x4],r9
80004dc2:	ee 08 09 08 	st.w	r7[r8],r8
80004dc6:	8f 2c       	st.w	r7[0x8],r12
80004dc8:	8f 3c       	st.w	r7[0xc],r12
80004dca:	a1 a8       	sbr	r8,0x0
80004dcc:	0a 9c       	mov	r12,r5
80004dce:	8f 18       	st.w	r7[0x4],r8
80004dd0:	c0 d8       	rjmp	80004dea <_malloc_r+0x26a>
80004dd2:	6c 39       	ld.w	r9,r6[0xc]
80004dd4:	58 08       	cp.w	r8,0
80004dd6:	c0 f5       	brlt	80004df4 <_malloc_r+0x274>
80004dd8:	ec 0a 00 0a 	add	r10,r6,r10
80004ddc:	74 18       	ld.w	r8,r10[0x4]
80004dde:	a1 a8       	sbr	r8,0x0
80004de0:	0a 9c       	mov	r12,r5
80004de2:	95 18       	st.w	r10[0x4],r8
80004de4:	6c 28       	ld.w	r8,r6[0x8]
80004de6:	93 28       	st.w	r9[0x8],r8
80004de8:	91 39       	st.w	r8[0xc],r9
80004dea:	f0 1f 00 19 	mcall	80004e4c <_malloc_r+0x2cc>
80004dee:	ec cc ff f8 	sub	r12,r6,-8
80004df2:	d8 32       	popm	r0-r7,pc
80004df4:	12 96       	mov	r6,r9
80004df6:	02 36       	cp.w	r6,r1
80004df8:	cd 21       	brne	80004d9c <_malloc_r+0x21c>
80004dfa:	2f f2       	sub	r2,-1
80004dfc:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004e00:	c0 30       	breq	80004e06 <_malloc_r+0x286>
80004e02:	2f 81       	sub	r1,-8
80004e04:	cc ab       	rjmp	80004d98 <_malloc_r+0x218>
80004e06:	1c 98       	mov	r8,lr
80004e08:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004e0c:	c0 81       	brne	80004e1c <_malloc_r+0x29c>
80004e0e:	68 19       	ld.w	r9,r4[0x4]
80004e10:	f6 08 11 ff 	rsub	r8,r11,-1
80004e14:	f3 e8 00 08 	and	r8,r9,r8
80004e18:	89 18       	st.w	r4[0x4],r8
80004e1a:	c0 78       	rjmp	80004e28 <_malloc_r+0x2a8>
80004e1c:	f0 c9 00 08 	sub	r9,r8,8
80004e20:	20 13       	sub	r3,1
80004e22:	70 08       	ld.w	r8,r8[0x0]
80004e24:	12 38       	cp.w	r8,r9
80004e26:	cf 10       	breq	80004e08 <_malloc_r+0x288>
80004e28:	a1 7b       	lsl	r11,0x1
80004e2a:	68 18       	ld.w	r8,r4[0x4]
80004e2c:	10 3b       	cp.w	r11,r8
80004e2e:	e0 8b 00 11 	brhi	80004e50 <_malloc_r+0x2d0>
80004e32:	58 0b       	cp.w	r11,0
80004e34:	c0 e0       	breq	80004e50 <_malloc_r+0x2d0>
80004e36:	04 93       	mov	r3,r2
80004e38:	c0 38       	rjmp	80004e3e <_malloc_r+0x2be>
80004e3a:	2f c3       	sub	r3,-4
80004e3c:	a1 7b       	lsl	r11,0x1
80004e3e:	f7 e8 00 09 	and	r9,r11,r8
80004e42:	ca 71       	brne	80004d90 <_malloc_r+0x210>
80004e44:	cf bb       	rjmp	80004e3a <_malloc_r+0x2ba>
80004e46:	00 00       	add	r0,r0
80004e48:	00 00       	add	r0,r0
80004e4a:	01 f0       	ld.ub	r0,r0[0x7]
80004e4c:	80 00       	ld.sh	r0,r0[0x0]
80004e4e:	43 1c       	lddsp	r12,sp[0xc4]
80004e50:	68 23       	ld.w	r3,r4[0x8]
80004e52:	66 12       	ld.w	r2,r3[0x4]
80004e54:	e0 12 ff fc 	andl	r2,0xfffc
80004e58:	0e 32       	cp.w	r2,r7
80004e5a:	5f 39       	srlo	r9
80004e5c:	e4 07 01 08 	sub	r8,r2,r7
80004e60:	58 f8       	cp.w	r8,15
80004e62:	5f aa       	srle	r10
80004e64:	f5 e9 10 09 	or	r9,r10,r9
80004e68:	e0 80 00 a2 	breq	80004fac <_malloc_r+0x42c>
80004e6c:	4c 88       	lddpc	r8,80004f8c <_malloc_r+0x40c>
80004e6e:	70 01       	ld.w	r1,r8[0x0]
80004e70:	4c 88       	lddpc	r8,80004f90 <_malloc_r+0x410>
80004e72:	2f 01       	sub	r1,-16
80004e74:	70 08       	ld.w	r8,r8[0x0]
80004e76:	0e 01       	add	r1,r7
80004e78:	5b f8       	cp.w	r8,-1
80004e7a:	c0 40       	breq	80004e82 <_malloc_r+0x302>
80004e7c:	28 11       	sub	r1,-127
80004e7e:	e0 11 ff 80 	andl	r1,0xff80
80004e82:	02 9b       	mov	r11,r1
80004e84:	0a 9c       	mov	r12,r5
80004e86:	f0 1f 00 44 	mcall	80004f94 <_malloc_r+0x414>
80004e8a:	18 96       	mov	r6,r12
80004e8c:	5b fc       	cp.w	r12,-1
80004e8e:	c6 e0       	breq	80004f6a <_malloc_r+0x3ea>
80004e90:	e6 02 00 08 	add	r8,r3,r2
80004e94:	10 3c       	cp.w	r12,r8
80004e96:	c0 32       	brcc	80004e9c <_malloc_r+0x31c>
80004e98:	08 33       	cp.w	r3,r4
80004e9a:	c6 81       	brne	80004f6a <_malloc_r+0x3ea>
80004e9c:	4b fa       	lddpc	r10,80004f98 <_malloc_r+0x418>
80004e9e:	74 09       	ld.w	r9,r10[0x0]
80004ea0:	e2 09 00 09 	add	r9,r1,r9
80004ea4:	95 09       	st.w	r10[0x0],r9
80004ea6:	10 36       	cp.w	r6,r8
80004ea8:	c0 a1       	brne	80004ebc <_malloc_r+0x33c>
80004eaa:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004eae:	c0 71       	brne	80004ebc <_malloc_r+0x33c>
80004eb0:	e2 02 00 02 	add	r2,r1,r2
80004eb4:	68 28       	ld.w	r8,r4[0x8]
80004eb6:	a1 a2       	sbr	r2,0x0
80004eb8:	91 12       	st.w	r8[0x4],r2
80004eba:	c4 c8       	rjmp	80004f52 <_malloc_r+0x3d2>
80004ebc:	4b 5a       	lddpc	r10,80004f90 <_malloc_r+0x410>
80004ebe:	74 0b       	ld.w	r11,r10[0x0]
80004ec0:	5b fb       	cp.w	r11,-1
80004ec2:	c0 31       	brne	80004ec8 <_malloc_r+0x348>
80004ec4:	95 06       	st.w	r10[0x0],r6
80004ec6:	c0 68       	rjmp	80004ed2 <_malloc_r+0x352>
80004ec8:	ec 09 00 09 	add	r9,r6,r9
80004ecc:	4b 3a       	lddpc	r10,80004f98 <_malloc_r+0x418>
80004ece:	10 19       	sub	r9,r8
80004ed0:	95 09       	st.w	r10[0x0],r9
80004ed2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004ed6:	f0 09 11 08 	rsub	r9,r8,8
80004eda:	58 08       	cp.w	r8,0
80004edc:	f2 08 17 10 	movne	r8,r9
80004ee0:	ed d8 e1 06 	addne	r6,r6,r8
80004ee4:	28 08       	sub	r8,-128
80004ee6:	ec 01 00 01 	add	r1,r6,r1
80004eea:	0a 9c       	mov	r12,r5
80004eec:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004ef0:	f0 01 01 01 	sub	r1,r8,r1
80004ef4:	02 9b       	mov	r11,r1
80004ef6:	f0 1f 00 28 	mcall	80004f94 <_malloc_r+0x414>
80004efa:	4a 88       	lddpc	r8,80004f98 <_malloc_r+0x418>
80004efc:	5b fc       	cp.w	r12,-1
80004efe:	ec 0c 17 00 	moveq	r12,r6
80004f02:	f9 b1 00 00 	moveq	r1,0
80004f06:	70 09       	ld.w	r9,r8[0x0]
80004f08:	0c 1c       	sub	r12,r6
80004f0a:	89 26       	st.w	r4[0x8],r6
80004f0c:	02 0c       	add	r12,r1
80004f0e:	12 01       	add	r1,r9
80004f10:	a1 ac       	sbr	r12,0x0
80004f12:	91 01       	st.w	r8[0x0],r1
80004f14:	8d 1c       	st.w	r6[0x4],r12
80004f16:	08 33       	cp.w	r3,r4
80004f18:	c1 d0       	breq	80004f52 <_malloc_r+0x3d2>
80004f1a:	58 f2       	cp.w	r2,15
80004f1c:	e0 8b 00 05 	brhi	80004f26 <_malloc_r+0x3a6>
80004f20:	30 18       	mov	r8,1
80004f22:	8d 18       	st.w	r6[0x4],r8
80004f24:	c2 38       	rjmp	80004f6a <_malloc_r+0x3ea>
80004f26:	30 59       	mov	r9,5
80004f28:	20 c2       	sub	r2,12
80004f2a:	e0 12 ff f8 	andl	r2,0xfff8
80004f2e:	e6 02 00 08 	add	r8,r3,r2
80004f32:	91 29       	st.w	r8[0x8],r9
80004f34:	91 19       	st.w	r8[0x4],r9
80004f36:	66 18       	ld.w	r8,r3[0x4]
80004f38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f3c:	e5 e8 10 08 	or	r8,r2,r8
80004f40:	87 18       	st.w	r3[0x4],r8
80004f42:	58 f2       	cp.w	r2,15
80004f44:	e0 88 00 07 	brls	80004f52 <_malloc_r+0x3d2>
80004f48:	e6 cb ff f8 	sub	r11,r3,-8
80004f4c:	0a 9c       	mov	r12,r5
80004f4e:	f0 1f 00 14 	mcall	80004f9c <_malloc_r+0x41c>
80004f52:	49 49       	lddpc	r9,80004fa0 <_malloc_r+0x420>
80004f54:	72 0a       	ld.w	r10,r9[0x0]
80004f56:	49 18       	lddpc	r8,80004f98 <_malloc_r+0x418>
80004f58:	70 08       	ld.w	r8,r8[0x0]
80004f5a:	14 38       	cp.w	r8,r10
80004f5c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f60:	49 19       	lddpc	r9,80004fa4 <_malloc_r+0x424>
80004f62:	72 0a       	ld.w	r10,r9[0x0]
80004f64:	14 38       	cp.w	r8,r10
80004f66:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f6a:	68 28       	ld.w	r8,r4[0x8]
80004f6c:	70 18       	ld.w	r8,r8[0x4]
80004f6e:	e0 18 ff fc 	andl	r8,0xfffc
80004f72:	0e 38       	cp.w	r8,r7
80004f74:	5f 39       	srlo	r9
80004f76:	0e 18       	sub	r8,r7
80004f78:	58 f8       	cp.w	r8,15
80004f7a:	5f aa       	srle	r10
80004f7c:	f5 e9 10 09 	or	r9,r10,r9
80004f80:	c1 60       	breq	80004fac <_malloc_r+0x42c>
80004f82:	0a 9c       	mov	r12,r5
80004f84:	f0 1f 00 09 	mcall	80004fa8 <_malloc_r+0x428>
80004f88:	d8 3a       	popm	r0-r7,pc,r12=0
80004f8a:	00 00       	add	r0,r0
80004f8c:	00 00       	add	r0,r0
80004f8e:	09 d0       	ld.ub	r0,r4[0x5]
80004f90:	00 00       	add	r0,r0
80004f92:	05 fc       	ld.ub	r12,r2[0x7]
80004f94:	80 00       	ld.sh	r0,r0[0x0]
80004f96:	4f e0       	lddpc	r0,8000518c <_close+0x14>
80004f98:	00 00       	add	r0,r0
80004f9a:	09 d4       	ld.ub	r4,r4[0x5]
80004f9c:	80 00       	ld.sh	r0,r0[0x0]
80004f9e:	56 a8       	stdsp	sp[0x1a8],r8
80004fa0:	00 00       	add	r0,r0
80004fa2:	09 cc       	ld.ub	r12,r4[0x4]
80004fa4:	00 00       	add	r0,r0
80004fa6:	09 c8       	ld.ub	r8,r4[0x4]
80004fa8:	80 00       	ld.sh	r0,r0[0x0]
80004faa:	43 1c       	lddsp	r12,sp[0xc4]
80004fac:	68 26       	ld.w	r6,r4[0x8]
80004fae:	a1 a8       	sbr	r8,0x0
80004fb0:	0e 99       	mov	r9,r7
80004fb2:	a1 a9       	sbr	r9,0x0
80004fb4:	8d 19       	st.w	r6[0x4],r9
80004fb6:	ec 07 00 07 	add	r7,r6,r7
80004fba:	0a 9c       	mov	r12,r5
80004fbc:	89 27       	st.w	r4[0x8],r7
80004fbe:	8f 18       	st.w	r7[0x4],r8
80004fc0:	f0 1f 00 03 	mcall	80004fcc <_malloc_r+0x44c>
80004fc4:	ec cc ff f8 	sub	r12,r6,-8
80004fc8:	d8 32       	popm	r0-r7,pc
80004fca:	00 00       	add	r0,r0
80004fcc:	80 00       	ld.sh	r0,r0[0x0]
80004fce:	43 1c       	lddsp	r12,sp[0xc4]

80004fd0 <memset>:
80004fd0:	18 98       	mov	r8,r12
80004fd2:	c0 38       	rjmp	80004fd8 <memset+0x8>
80004fd4:	10 cb       	st.b	r8++,r11
80004fd6:	20 1a       	sub	r10,1
80004fd8:	58 0a       	cp.w	r10,0
80004fda:	cf d1       	brne	80004fd4 <memset+0x4>
80004fdc:	5e fc       	retal	r12
80004fde:	d7 03       	nop

80004fe0 <_sbrk_r>:
80004fe0:	d4 21       	pushm	r4-r7,lr
80004fe2:	30 08       	mov	r8,0
80004fe4:	18 97       	mov	r7,r12
80004fe6:	48 76       	lddpc	r6,80005000 <_sbrk_r+0x20>
80004fe8:	16 9c       	mov	r12,r11
80004fea:	8d 08       	st.w	r6[0x0],r8
80004fec:	f0 1f 00 06 	mcall	80005004 <_sbrk_r+0x24>
80004ff0:	5b fc       	cp.w	r12,-1
80004ff2:	c0 51       	brne	80004ffc <_sbrk_r+0x1c>
80004ff4:	6c 08       	ld.w	r8,r6[0x0]
80004ff6:	58 08       	cp.w	r8,0
80004ff8:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004ffc:	d8 22       	popm	r4-r7,pc
80004ffe:	00 00       	add	r0,r0
80005000:	00 00       	add	r0,r0
80005002:	0a 2c       	rsub	r12,r5
80005004:	80 00       	ld.sh	r0,r0[0x0]
80005006:	51 a8       	stdsp	sp[0x68],r8

80005008 <setbuf>:
80005008:	d4 01       	pushm	lr
8000500a:	e0 69 04 00 	mov	r9,1024
8000500e:	58 0b       	cp.w	r11,0
80005010:	f9 ba 00 02 	moveq	r10,2
80005014:	f9 ba 01 00 	movne	r10,0
80005018:	f0 1f 00 02 	mcall	80005020 <setbuf+0x18>
8000501c:	d8 02       	popm	pc
8000501e:	00 00       	add	r0,r0
80005020:	80 00       	ld.sh	r0,r0[0x0]
80005022:	50 24       	stdsp	sp[0x8],r4

80005024 <setvbuf>:
80005024:	d4 31       	pushm	r0-r7,lr
80005026:	4b f8       	lddpc	r8,80005120 <setvbuf+0xfc>
80005028:	18 97       	mov	r7,r12
8000502a:	16 96       	mov	r6,r11
8000502c:	14 95       	mov	r5,r10
8000502e:	12 94       	mov	r4,r9
80005030:	70 0c       	ld.w	r12,r8[0x0]
80005032:	58 0c       	cp.w	r12,0
80005034:	c0 60       	breq	80005040 <setvbuf+0x1c>
80005036:	78 68       	ld.w	r8,r12[0x18]
80005038:	58 08       	cp.w	r8,0
8000503a:	c0 31       	brne	80005040 <setvbuf+0x1c>
8000503c:	f0 1f 00 3a 	mcall	80005124 <setvbuf+0x100>
80005040:	4b a8       	lddpc	r8,80005128 <setvbuf+0x104>
80005042:	10 37       	cp.w	r7,r8
80005044:	c0 51       	brne	8000504e <setvbuf+0x2a>
80005046:	4b 78       	lddpc	r8,80005120 <setvbuf+0xfc>
80005048:	70 08       	ld.w	r8,r8[0x0]
8000504a:	70 07       	ld.w	r7,r8[0x0]
8000504c:	c0 e8       	rjmp	80005068 <setvbuf+0x44>
8000504e:	4b 88       	lddpc	r8,8000512c <setvbuf+0x108>
80005050:	10 37       	cp.w	r7,r8
80005052:	c0 51       	brne	8000505c <setvbuf+0x38>
80005054:	4b 38       	lddpc	r8,80005120 <setvbuf+0xfc>
80005056:	70 08       	ld.w	r8,r8[0x0]
80005058:	70 17       	ld.w	r7,r8[0x4]
8000505a:	c0 78       	rjmp	80005068 <setvbuf+0x44>
8000505c:	4b 58       	lddpc	r8,80005130 <setvbuf+0x10c>
8000505e:	10 37       	cp.w	r7,r8
80005060:	c0 41       	brne	80005068 <setvbuf+0x44>
80005062:	4b 08       	lddpc	r8,80005120 <setvbuf+0xfc>
80005064:	70 08       	ld.w	r8,r8[0x0]
80005066:	70 27       	ld.w	r7,r8[0x8]
80005068:	58 25       	cp.w	r5,2
8000506a:	5f b8       	srhi	r8
8000506c:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80005070:	c0 20       	breq	80005074 <setvbuf+0x50>
80005072:	dc 3a       	popm	r0-r7,pc,r12=-1
80005074:	4a b3       	lddpc	r3,80005120 <setvbuf+0xfc>
80005076:	0e 9b       	mov	r11,r7
80005078:	66 0c       	ld.w	r12,r3[0x0]
8000507a:	f0 1f 00 2f 	mcall	80005134 <setvbuf+0x110>
8000507e:	30 08       	mov	r8,0
80005080:	8f 68       	st.w	r7[0x18],r8
80005082:	8f 18       	st.w	r7[0x4],r8
80005084:	8e 68       	ld.sh	r8,r7[0xc]
80005086:	ed b8 00 07 	bld	r8,0x7
8000508a:	c0 51       	brne	80005094 <setvbuf+0x70>
8000508c:	66 0c       	ld.w	r12,r3[0x0]
8000508e:	6e 4b       	ld.w	r11,r7[0x10]
80005090:	f0 1f 00 2a 	mcall	80005138 <setvbuf+0x114>
80005094:	8e 68       	ld.sh	r8,r7[0xc]
80005096:	e0 18 ff 7c 	andl	r8,0xff7c
8000509a:	ae 68       	st.h	r7[0xc],r8
8000509c:	58 25       	cp.w	r5,2
8000509e:	c0 31       	brne	800050a4 <setvbuf+0x80>
800050a0:	30 0c       	mov	r12,0
800050a2:	c1 38       	rjmp	800050c8 <setvbuf+0xa4>
800050a4:	58 06       	cp.w	r6,0
800050a6:	c2 11       	brne	800050e8 <setvbuf+0xc4>
800050a8:	e0 63 04 00 	mov	r3,1024
800050ac:	58 04       	cp.w	r4,0
800050ae:	e6 04 17 00 	moveq	r4,r3
800050b2:	08 9c       	mov	r12,r4
800050b4:	f0 1f 00 22 	mcall	8000513c <setvbuf+0x118>
800050b8:	18 96       	mov	r6,r12
800050ba:	c1 41       	brne	800050e2 <setvbuf+0xbe>
800050bc:	06 9c       	mov	r12,r3
800050be:	f0 1f 00 20 	mcall	8000513c <setvbuf+0x118>
800050c2:	18 96       	mov	r6,r12
800050c4:	c0 e1       	brne	800050e0 <setvbuf+0xbc>
800050c6:	3f fc       	mov	r12,-1
800050c8:	8e 68       	ld.sh	r8,r7[0xc]
800050ca:	a1 b8       	sbr	r8,0x1
800050cc:	ae 68       	st.h	r7[0xc],r8
800050ce:	ee c8 ff b9 	sub	r8,r7,-71
800050d2:	8f 48       	st.w	r7[0x10],r8
800050d4:	8f 08       	st.w	r7[0x0],r8
800050d6:	30 08       	mov	r8,0
800050d8:	8f 28       	st.w	r7[0x8],r8
800050da:	30 18       	mov	r8,1
800050dc:	8f 58       	st.w	r7[0x14],r8
800050de:	d8 32       	popm	r0-r7,pc
800050e0:	06 94       	mov	r4,r3
800050e2:	8e 68       	ld.sh	r8,r7[0xc]
800050e4:	a7 b8       	sbr	r8,0x7
800050e6:	ae 68       	st.h	r7[0xc],r8
800050e8:	58 15       	cp.w	r5,1
800050ea:	c0 71       	brne	800050f8 <setvbuf+0xd4>
800050ec:	8e 68       	ld.sh	r8,r7[0xc]
800050ee:	a1 a8       	sbr	r8,0x0
800050f0:	ae 68       	st.h	r7[0xc],r8
800050f2:	e8 08 11 00 	rsub	r8,r4,0
800050f6:	8f 68       	st.w	r7[0x18],r8
800050f8:	48 a8       	lddpc	r8,80005120 <setvbuf+0xfc>
800050fa:	49 29       	lddpc	r9,80005140 <setvbuf+0x11c>
800050fc:	70 08       	ld.w	r8,r8[0x0]
800050fe:	8f 46       	st.w	r7[0x10],r6
80005100:	91 a9       	st.w	r8[0x28],r9
80005102:	8f 06       	st.w	r7[0x0],r6
80005104:	8f 54       	st.w	r7[0x14],r4
80005106:	8e 68       	ld.sh	r8,r7[0xc]
80005108:	10 9c       	mov	r12,r8
8000510a:	e2 1c 00 08 	andl	r12,0x8,COH
8000510e:	c0 70       	breq	8000511c <setvbuf+0xf8>
80005110:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005114:	30 0c       	mov	r12,0
80005116:	f9 b4 01 00 	movne	r4,0
8000511a:	8f 24       	st.w	r7[0x8],r4
8000511c:	d8 32       	popm	r0-r7,pc
8000511e:	00 00       	add	r0,r0
80005120:	00 00       	add	r0,r0
80005122:	01 ec       	ld.ub	r12,r0[0x6]
80005124:	80 00       	ld.sh	r0,r0[0x0]
80005126:	55 50       	stdsp	sp[0x154],r0
80005128:	80 00       	ld.sh	r0,r0[0x0]
8000512a:	5f 3c       	srlo	r12
8000512c:	80 00       	ld.sh	r0,r0[0x0]
8000512e:	5f 5c       	srlt	r12
80005130:	80 00       	ld.sh	r0,r0[0x0]
80005132:	5f 7c       	srpl	r12
80005134:	80 00       	ld.sh	r0,r0[0x0]
80005136:	53 74       	stdsp	sp[0xdc],r4
80005138:	80 00       	ld.sh	r0,r0[0x0]
8000513a:	56 a8       	stdsp	sp[0x1a8],r8
8000513c:	80 00       	ld.sh	r0,r0[0x0]
8000513e:	4b 68       	lddpc	r8,80005214 <__register_exitproc+0x2c>
80005140:	80 00       	ld.sh	r0,r0[0x0]
80005142:	54 90       	stdsp	sp[0x124],r0

80005144 <strncpy>:
80005144:	30 08       	mov	r8,0
80005146:	10 3a       	cp.w	r10,r8
80005148:	5e 0c       	reteq	r12
8000514a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000514e:	f8 08 0b 09 	st.b	r12[r8],r9
80005152:	2f f8       	sub	r8,-1
80005154:	58 09       	cp.w	r9,0
80005156:	cf 81       	brne	80005146 <strncpy+0x2>
80005158:	10 3a       	cp.w	r10,r8
8000515a:	5e 0c       	reteq	r12
8000515c:	f8 08 0b 09 	st.b	r12[r8],r9
80005160:	2f f8       	sub	r8,-1
80005162:	cf bb       	rjmp	80005158 <strncpy+0x14>

80005164 <_init_argv>:
80005164:	30 e8       	mov	r8,14
80005166:	d6 73       	breakpoint
80005168:	3f fc       	mov	r12,-1
8000516a:	35 8b       	mov	r11,88
8000516c:	5e fc       	retal	r12

8000516e <_exit>:
8000516e:	30 d8       	mov	r8,13
80005170:	d6 73       	breakpoint
80005172:	3f fc       	mov	r12,-1
80005174:	35 8b       	mov	r11,88
80005176:	c0 08       	rjmp	80005176 <_exit+0x8>

80005178 <_close>:
80005178:	30 28       	mov	r8,2
8000517a:	d6 73       	breakpoint
8000517c:	3f fc       	mov	r12,-1
8000517e:	35 8b       	mov	r11,88
80005180:	58 0c       	cp.w	r12,0
80005182:	5e 4c       	retge	r12
80005184:	48 2a       	lddpc	r10,8000518c <_close+0x14>
80005186:	95 0b       	st.w	r10[0x0],r11
80005188:	5e fc       	retal	r12
8000518a:	00 00       	add	r0,r0
8000518c:	00 00       	add	r0,r0
8000518e:	0a 2c       	rsub	r12,r5

80005190 <_lseek>:
80005190:	30 58       	mov	r8,5
80005192:	d6 73       	breakpoint
80005194:	3f fc       	mov	r12,-1
80005196:	35 8b       	mov	r11,88
80005198:	58 0c       	cp.w	r12,0
8000519a:	5e 4c       	retge	r12
8000519c:	48 2a       	lddpc	r10,800051a4 <_lseek+0x14>
8000519e:	95 0b       	st.w	r10[0x0],r11
800051a0:	5e fc       	retal	r12
800051a2:	00 00       	add	r0,r0
800051a4:	00 00       	add	r0,r0
800051a6:	0a 2c       	rsub	r12,r5

800051a8 <_sbrk>:
800051a8:	d4 01       	pushm	lr
800051aa:	48 c8       	lddpc	r8,800051d8 <_sbrk+0x30>
800051ac:	70 09       	ld.w	r9,r8[0x0]
800051ae:	58 09       	cp.w	r9,0
800051b0:	c0 31       	brne	800051b6 <_sbrk+0xe>
800051b2:	48 b9       	lddpc	r9,800051dc <_sbrk+0x34>
800051b4:	91 09       	st.w	r8[0x0],r9
800051b6:	48 99       	lddpc	r9,800051d8 <_sbrk+0x30>
800051b8:	48 aa       	lddpc	r10,800051e0 <_sbrk+0x38>
800051ba:	72 08       	ld.w	r8,r9[0x0]
800051bc:	f0 0c 00 0c 	add	r12,r8,r12
800051c0:	14 3c       	cp.w	r12,r10
800051c2:	e0 8b 00 04 	brhi	800051ca <_sbrk+0x22>
800051c6:	93 0c       	st.w	r9[0x0],r12
800051c8:	c0 68       	rjmp	800051d4 <_sbrk+0x2c>
800051ca:	f0 1f 00 07 	mcall	800051e4 <_sbrk+0x3c>
800051ce:	30 c8       	mov	r8,12
800051d0:	99 08       	st.w	r12[0x0],r8
800051d2:	3f f8       	mov	r8,-1
800051d4:	10 9c       	mov	r12,r8
800051d6:	d8 02       	popm	pc
800051d8:	00 00       	add	r0,r0
800051da:	09 fc       	ld.ub	r12,r4[0x7]
800051dc:	00 00       	add	r0,r0
800051de:	0a 30       	cp.w	r0,r5
800051e0:	00 00       	add	r0,r0
800051e2:	f0 00       	*unknown*
800051e4:	80 00       	ld.sh	r0,r0[0x0]
800051e6:	53 68       	stdsp	sp[0xd8],r8

800051e8 <__register_exitproc>:
800051e8:	d4 31       	pushm	r0-r7,lr
800051ea:	4a 98       	lddpc	r8,8000528c <__register_exitproc+0xa4>
800051ec:	70 03       	ld.w	r3,r8[0x0]
800051ee:	67 24       	ld.w	r4,r3[0x48]
800051f0:	e6 c8 ff b4 	sub	r8,r3,-76
800051f4:	58 04       	cp.w	r4,0
800051f6:	f0 04 17 00 	moveq	r4,r8
800051fa:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800051fe:	18 97       	mov	r7,r12
80005200:	16 96       	mov	r6,r11
80005202:	14 95       	mov	r5,r10
80005204:	12 92       	mov	r2,r9
80005206:	68 18       	ld.w	r8,r4[0x4]
80005208:	59 f8       	cp.w	r8,31
8000520a:	e0 8a 00 0e 	brle	80005226 <__register_exitproc+0x3e>
8000520e:	e0 6c 00 8c 	mov	r12,140
80005212:	f0 1f 00 20 	mcall	80005290 <__register_exitproc+0xa8>
80005216:	18 94       	mov	r4,r12
80005218:	c3 80       	breq	80005288 <__register_exitproc+0xa0>
8000521a:	67 28       	ld.w	r8,r3[0x48]
8000521c:	99 08       	st.w	r12[0x0],r8
8000521e:	e7 4c 00 48 	st.w	r3[72],r12
80005222:	30 08       	mov	r8,0
80005224:	99 18       	st.w	r12[0x4],r8
80005226:	58 07       	cp.w	r7,0
80005228:	c2 70       	breq	80005276 <__register_exitproc+0x8e>
8000522a:	e8 fc 00 88 	ld.w	r12,r4[136]
8000522e:	58 0c       	cp.w	r12,0
80005230:	c0 d1       	brne	8000524a <__register_exitproc+0x62>
80005232:	e0 6c 01 08 	mov	r12,264
80005236:	f0 1f 00 17 	mcall	80005290 <__register_exitproc+0xa8>
8000523a:	c2 70       	breq	80005288 <__register_exitproc+0xa0>
8000523c:	30 08       	mov	r8,0
8000523e:	e9 4c 00 88 	st.w	r4[136],r12
80005242:	f9 48 01 04 	st.w	r12[260],r8
80005246:	f9 48 01 00 	st.w	r12[256],r8
8000524a:	68 18       	ld.w	r8,r4[0x4]
8000524c:	f0 c9 ff e0 	sub	r9,r8,-32
80005250:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80005254:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80005258:	30 1a       	mov	r10,1
8000525a:	f8 f9 01 00 	ld.w	r9,r12[256]
8000525e:	f4 08 09 48 	lsl	r8,r10,r8
80005262:	10 49       	or	r9,r8
80005264:	f9 49 01 00 	st.w	r12[256],r9
80005268:	58 27       	cp.w	r7,2
8000526a:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000526e:	f3 d8 e0 38 	oreq	r8,r9,r8
80005272:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80005276:	68 18       	ld.w	r8,r4[0x4]
80005278:	30 0c       	mov	r12,0
8000527a:	f0 c9 ff ff 	sub	r9,r8,-1
8000527e:	2f e8       	sub	r8,-2
80005280:	89 19       	st.w	r4[0x4],r9
80005282:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80005286:	d8 32       	popm	r0-r7,pc
80005288:	dc 3a       	popm	r0-r7,pc,r12=-1
8000528a:	00 00       	add	r0,r0
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	5f 38       	srlo	r8
80005290:	80 00       	ld.sh	r0,r0[0x0]
80005292:	4b 68       	lddpc	r8,80005368 <__errno>

80005294 <__call_exitprocs>:
80005294:	d4 31       	pushm	r0-r7,lr
80005296:	20 3d       	sub	sp,12
80005298:	4b 28       	lddpc	r8,80005360 <__call_exitprocs+0xcc>
8000529a:	50 2c       	stdsp	sp[0x8],r12
8000529c:	70 08       	ld.w	r8,r8[0x0]
8000529e:	16 91       	mov	r1,r11
800052a0:	50 08       	stdsp	sp[0x0],r8
800052a2:	2b 88       	sub	r8,-72
800052a4:	50 18       	stdsp	sp[0x4],r8
800052a6:	40 0a       	lddsp	r10,sp[0x0]
800052a8:	40 14       	lddsp	r4,sp[0x4]
800052aa:	75 27       	ld.w	r7,r10[0x48]
800052ac:	c5 58       	rjmp	80005356 <__call_exitprocs+0xc2>
800052ae:	6e 15       	ld.w	r5,r7[0x4]
800052b0:	ee f6 00 88 	ld.w	r6,r7[136]
800052b4:	ea c2 ff ff 	sub	r2,r5,-1
800052b8:	20 15       	sub	r5,1
800052ba:	ee 02 00 22 	add	r2,r7,r2<<0x2
800052be:	ec 05 00 23 	add	r3,r6,r5<<0x2
800052c2:	c3 58       	rjmp	8000532c <__call_exitprocs+0x98>
800052c4:	58 01       	cp.w	r1,0
800052c6:	c0 70       	breq	800052d4 <__call_exitprocs+0x40>
800052c8:	58 06       	cp.w	r6,0
800052ca:	c2 e0       	breq	80005326 <__call_exitprocs+0x92>
800052cc:	e6 f8 00 80 	ld.w	r8,r3[128]
800052d0:	02 38       	cp.w	r8,r1
800052d2:	c2 a1       	brne	80005326 <__call_exitprocs+0x92>
800052d4:	6e 19       	ld.w	r9,r7[0x4]
800052d6:	64 08       	ld.w	r8,r2[0x0]
800052d8:	20 19       	sub	r9,1
800052da:	12 35       	cp.w	r5,r9
800052dc:	ef f5 0a 01 	st.weq	r7[0x4],r5
800052e0:	f9 b9 01 00 	movne	r9,0
800052e4:	e5 f9 1a 00 	st.wne	r2[0x0],r9
800052e8:	58 08       	cp.w	r8,0
800052ea:	c1 e0       	breq	80005326 <__call_exitprocs+0x92>
800052ec:	6e 10       	ld.w	r0,r7[0x4]
800052ee:	58 06       	cp.w	r6,0
800052f0:	c0 90       	breq	80005302 <__call_exitprocs+0x6e>
800052f2:	30 1a       	mov	r10,1
800052f4:	f4 05 09 49 	lsl	r9,r10,r5
800052f8:	ec fa 01 00 	ld.w	r10,r6[256]
800052fc:	f3 ea 00 0a 	and	r10,r9,r10
80005300:	c0 31       	brne	80005306 <__call_exitprocs+0x72>
80005302:	5d 18       	icall	r8
80005304:	c0 b8       	rjmp	8000531a <__call_exitprocs+0x86>
80005306:	ec fa 01 04 	ld.w	r10,r6[260]
8000530a:	66 0b       	ld.w	r11,r3[0x0]
8000530c:	14 69       	and	r9,r10
8000530e:	c0 41       	brne	80005316 <__call_exitprocs+0x82>
80005310:	40 2c       	lddsp	r12,sp[0x8]
80005312:	5d 18       	icall	r8
80005314:	c0 38       	rjmp	8000531a <__call_exitprocs+0x86>
80005316:	16 9c       	mov	r12,r11
80005318:	5d 18       	icall	r8
8000531a:	6e 18       	ld.w	r8,r7[0x4]
8000531c:	10 30       	cp.w	r0,r8
8000531e:	cc 41       	brne	800052a6 <__call_exitprocs+0x12>
80005320:	68 08       	ld.w	r8,r4[0x0]
80005322:	0e 38       	cp.w	r8,r7
80005324:	cc 11       	brne	800052a6 <__call_exitprocs+0x12>
80005326:	20 15       	sub	r5,1
80005328:	20 43       	sub	r3,4
8000532a:	20 42       	sub	r2,4
8000532c:	58 05       	cp.w	r5,0
8000532e:	cc b4       	brge	800052c4 <__call_exitprocs+0x30>
80005330:	6e 18       	ld.w	r8,r7[0x4]
80005332:	58 08       	cp.w	r8,0
80005334:	c0 f1       	brne	80005352 <__call_exitprocs+0xbe>
80005336:	6e 08       	ld.w	r8,r7[0x0]
80005338:	58 08       	cp.w	r8,0
8000533a:	c0 c0       	breq	80005352 <__call_exitprocs+0xbe>
8000533c:	89 08       	st.w	r4[0x0],r8
8000533e:	58 06       	cp.w	r6,0
80005340:	c0 40       	breq	80005348 <__call_exitprocs+0xb4>
80005342:	0c 9c       	mov	r12,r6
80005344:	f0 1f 00 08 	mcall	80005364 <__call_exitprocs+0xd0>
80005348:	0e 9c       	mov	r12,r7
8000534a:	f0 1f 00 07 	mcall	80005364 <__call_exitprocs+0xd0>
8000534e:	68 07       	ld.w	r7,r4[0x0]
80005350:	c0 38       	rjmp	80005356 <__call_exitprocs+0xc2>
80005352:	0e 94       	mov	r4,r7
80005354:	6e 07       	ld.w	r7,r7[0x0]
80005356:	58 07       	cp.w	r7,0
80005358:	ca b1       	brne	800052ae <__call_exitprocs+0x1a>
8000535a:	2f dd       	sub	sp,-12
8000535c:	d8 32       	popm	r0-r7,pc
8000535e:	00 00       	add	r0,r0
80005360:	80 00       	ld.sh	r0,r0[0x0]
80005362:	5f 38       	srlo	r8
80005364:	80 00       	ld.sh	r0,r0[0x0]
80005366:	4b 50       	lddpc	r0,80005438 <_fflush_r+0xc4>

80005368 <__errno>:
80005368:	48 28       	lddpc	r8,80005370 <__errno+0x8>
8000536a:	70 0c       	ld.w	r12,r8[0x0]
8000536c:	2f 4c       	sub	r12,-12
8000536e:	5e fc       	retal	r12
80005370:	00 00       	add	r0,r0
80005372:	01 ec       	ld.ub	r12,r0[0x6]

80005374 <_fflush_r>:
80005374:	d4 21       	pushm	r4-r7,lr
80005376:	16 97       	mov	r7,r11
80005378:	18 96       	mov	r6,r12
8000537a:	76 48       	ld.w	r8,r11[0x10]
8000537c:	58 08       	cp.w	r8,0
8000537e:	c7 d0       	breq	80005478 <_fflush_r+0x104>
80005380:	58 0c       	cp.w	r12,0
80005382:	c0 60       	breq	8000538e <_fflush_r+0x1a>
80005384:	78 68       	ld.w	r8,r12[0x18]
80005386:	58 08       	cp.w	r8,0
80005388:	c0 31       	brne	8000538e <_fflush_r+0x1a>
8000538a:	f0 1f 00 3d 	mcall	8000547c <_fflush_r+0x108>
8000538e:	4b d8       	lddpc	r8,80005480 <_fflush_r+0x10c>
80005390:	10 37       	cp.w	r7,r8
80005392:	c0 31       	brne	80005398 <_fflush_r+0x24>
80005394:	6c 07       	ld.w	r7,r6[0x0]
80005396:	c0 a8       	rjmp	800053aa <_fflush_r+0x36>
80005398:	4b b8       	lddpc	r8,80005484 <_fflush_r+0x110>
8000539a:	10 37       	cp.w	r7,r8
8000539c:	c0 31       	brne	800053a2 <_fflush_r+0x2e>
8000539e:	6c 17       	ld.w	r7,r6[0x4]
800053a0:	c0 58       	rjmp	800053aa <_fflush_r+0x36>
800053a2:	4b a8       	lddpc	r8,80005488 <_fflush_r+0x114>
800053a4:	10 37       	cp.w	r7,r8
800053a6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800053aa:	8e 6a       	ld.sh	r10,r7[0xc]
800053ac:	14 98       	mov	r8,r10
800053ae:	ed ba 00 03 	bld	r10,0x3
800053b2:	c4 20       	breq	80005436 <_fflush_r+0xc2>
800053b4:	ab ba       	sbr	r10,0xb
800053b6:	ae 6a       	st.h	r7[0xc],r10
800053b8:	6e 18       	ld.w	r8,r7[0x4]
800053ba:	58 08       	cp.w	r8,0
800053bc:	e0 89 00 06 	brgt	800053c8 <_fflush_r+0x54>
800053c0:	6f 08       	ld.w	r8,r7[0x40]
800053c2:	58 08       	cp.w	r8,0
800053c4:	e0 8a 00 5a 	brle	80005478 <_fflush_r+0x104>
800053c8:	6e b8       	ld.w	r8,r7[0x2c]
800053ca:	58 08       	cp.w	r8,0
800053cc:	c5 60       	breq	80005478 <_fflush_r+0x104>
800053ce:	e2 1a 10 00 	andl	r10,0x1000,COH
800053d2:	c0 30       	breq	800053d8 <_fflush_r+0x64>
800053d4:	6f 55       	ld.w	r5,r7[0x54]
800053d6:	c0 f8       	rjmp	800053f4 <_fflush_r+0x80>
800053d8:	30 19       	mov	r9,1
800053da:	6e 8b       	ld.w	r11,r7[0x20]
800053dc:	0c 9c       	mov	r12,r6
800053de:	5d 18       	icall	r8
800053e0:	18 95       	mov	r5,r12
800053e2:	5b fc       	cp.w	r12,-1
800053e4:	c0 81       	brne	800053f4 <_fflush_r+0x80>
800053e6:	6c 38       	ld.w	r8,r6[0xc]
800053e8:	59 d8       	cp.w	r8,29
800053ea:	c4 70       	breq	80005478 <_fflush_r+0x104>
800053ec:	8e 68       	ld.sh	r8,r7[0xc]
800053ee:	a7 a8       	sbr	r8,0x6
800053f0:	ae 68       	st.h	r7[0xc],r8
800053f2:	d8 22       	popm	r4-r7,pc
800053f4:	8e 68       	ld.sh	r8,r7[0xc]
800053f6:	ed b8 00 02 	bld	r8,0x2
800053fa:	c0 91       	brne	8000540c <_fflush_r+0x98>
800053fc:	6e 18       	ld.w	r8,r7[0x4]
800053fe:	10 15       	sub	r5,r8
80005400:	6e d8       	ld.w	r8,r7[0x34]
80005402:	58 08       	cp.w	r8,0
80005404:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80005408:	eb d8 e1 15 	subne	r5,r5,r8
8000540c:	6e b8       	ld.w	r8,r7[0x2c]
8000540e:	0c 9c       	mov	r12,r6
80005410:	30 09       	mov	r9,0
80005412:	0a 9a       	mov	r10,r5
80005414:	6e 8b       	ld.w	r11,r7[0x20]
80005416:	5d 18       	icall	r8
80005418:	8e 68       	ld.sh	r8,r7[0xc]
8000541a:	0a 3c       	cp.w	r12,r5
8000541c:	c2 61       	brne	80005468 <_fflush_r+0xf4>
8000541e:	ab d8       	cbr	r8,0xb
80005420:	30 0c       	mov	r12,0
80005422:	6e 49       	ld.w	r9,r7[0x10]
80005424:	ae 68       	st.h	r7[0xc],r8
80005426:	8f 1c       	st.w	r7[0x4],r12
80005428:	8f 09       	st.w	r7[0x0],r9
8000542a:	ed b8 00 0c 	bld	r8,0xc
8000542e:	c2 51       	brne	80005478 <_fflush_r+0x104>
80005430:	ef 45 00 54 	st.w	r7[84],r5
80005434:	d8 22       	popm	r4-r7,pc
80005436:	6e 45       	ld.w	r5,r7[0x10]
80005438:	58 05       	cp.w	r5,0
8000543a:	c1 f0       	breq	80005478 <_fflush_r+0x104>
8000543c:	6e 04       	ld.w	r4,r7[0x0]
8000543e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80005442:	8f 05       	st.w	r7[0x0],r5
80005444:	f9 b8 01 00 	movne	r8,0
80005448:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000544c:	0a 14       	sub	r4,r5
8000544e:	8f 28       	st.w	r7[0x8],r8
80005450:	c1 18       	rjmp	80005472 <_fflush_r+0xfe>
80005452:	08 99       	mov	r9,r4
80005454:	0a 9a       	mov	r10,r5
80005456:	6e a8       	ld.w	r8,r7[0x28]
80005458:	6e 8b       	ld.w	r11,r7[0x20]
8000545a:	0c 9c       	mov	r12,r6
8000545c:	5d 18       	icall	r8
8000545e:	18 14       	sub	r4,r12
80005460:	58 0c       	cp.w	r12,0
80005462:	e0 89 00 07 	brgt	80005470 <_fflush_r+0xfc>
80005466:	8e 68       	ld.sh	r8,r7[0xc]
80005468:	a7 a8       	sbr	r8,0x6
8000546a:	3f fc       	mov	r12,-1
8000546c:	ae 68       	st.h	r7[0xc],r8
8000546e:	d8 22       	popm	r4-r7,pc
80005470:	18 05       	add	r5,r12
80005472:	58 04       	cp.w	r4,0
80005474:	fe 99 ff ef 	brgt	80005452 <_fflush_r+0xde>
80005478:	d8 2a       	popm	r4-r7,pc,r12=0
8000547a:	00 00       	add	r0,r0
8000547c:	80 00       	ld.sh	r0,r0[0x0]
8000547e:	55 50       	stdsp	sp[0x154],r0
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	5f 3c       	srlo	r12
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	5f 5c       	srlt	r12
80005488:	80 00       	ld.sh	r0,r0[0x0]
8000548a:	5f 7c       	srpl	r12

8000548c <__sfp_lock_acquire>:
8000548c:	5e fc       	retal	r12

8000548e <__sfp_lock_release>:
8000548e:	5e fc       	retal	r12

80005490 <_cleanup_r>:
80005490:	d4 01       	pushm	lr
80005492:	48 3b       	lddpc	r11,8000549c <_cleanup_r+0xc>
80005494:	f0 1f 00 03 	mcall	800054a0 <_cleanup_r+0x10>
80005498:	d8 02       	popm	pc
8000549a:	00 00       	add	r0,r0
8000549c:	80 00       	ld.sh	r0,r0[0x0]
8000549e:	5a 54       	cp.w	r4,-27
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	58 48       	cp.w	r8,4

800054a4 <__sfmoreglue>:
800054a4:	d4 21       	pushm	r4-r7,lr
800054a6:	16 95       	mov	r5,r11
800054a8:	f6 06 10 5c 	mul	r6,r11,92
800054ac:	ec cb ff f4 	sub	r11,r6,-12
800054b0:	f0 1f 00 07 	mcall	800054cc <__sfmoreglue+0x28>
800054b4:	18 97       	mov	r7,r12
800054b6:	c0 90       	breq	800054c8 <__sfmoreglue+0x24>
800054b8:	99 15       	st.w	r12[0x4],r5
800054ba:	30 0b       	mov	r11,0
800054bc:	2f 4c       	sub	r12,-12
800054be:	0c 9a       	mov	r10,r6
800054c0:	8f 2c       	st.w	r7[0x8],r12
800054c2:	8f 0b       	st.w	r7[0x0],r11
800054c4:	f0 1f 00 03 	mcall	800054d0 <__sfmoreglue+0x2c>
800054c8:	0e 9c       	mov	r12,r7
800054ca:	d8 22       	popm	r4-r7,pc
800054cc:	80 00       	ld.sh	r0,r0[0x0]
800054ce:	4b 80       	lddpc	r0,800055ac <__sinit+0x5c>
800054d0:	80 00       	ld.sh	r0,r0[0x0]
800054d2:	4f d0       	lddpc	r0,800056c4 <_free_r+0x1c>

800054d4 <__sfp>:
800054d4:	d4 21       	pushm	r4-r7,lr
800054d6:	49 c8       	lddpc	r8,80005544 <__sfp+0x70>
800054d8:	18 96       	mov	r6,r12
800054da:	70 07       	ld.w	r7,r8[0x0]
800054dc:	6e 68       	ld.w	r8,r7[0x18]
800054de:	58 08       	cp.w	r8,0
800054e0:	c0 41       	brne	800054e8 <__sfp+0x14>
800054e2:	0e 9c       	mov	r12,r7
800054e4:	f0 1f 00 19 	mcall	80005548 <__sfp+0x74>
800054e8:	ee c7 ff 28 	sub	r7,r7,-216
800054ec:	30 05       	mov	r5,0
800054ee:	6e 2c       	ld.w	r12,r7[0x8]
800054f0:	6e 18       	ld.w	r8,r7[0x4]
800054f2:	c0 68       	rjmp	800054fe <__sfp+0x2a>
800054f4:	98 69       	ld.sh	r9,r12[0xc]
800054f6:	ea 09 19 00 	cp.h	r9,r5
800054fa:	c1 20       	breq	8000551e <__sfp+0x4a>
800054fc:	2a 4c       	sub	r12,-92
800054fe:	20 18       	sub	r8,1
80005500:	cf a7       	brpl	800054f4 <__sfp+0x20>
80005502:	6e 08       	ld.w	r8,r7[0x0]
80005504:	58 08       	cp.w	r8,0
80005506:	c0 71       	brne	80005514 <__sfp+0x40>
80005508:	30 4b       	mov	r11,4
8000550a:	0c 9c       	mov	r12,r6
8000550c:	f0 1f 00 10 	mcall	8000554c <__sfp+0x78>
80005510:	8f 0c       	st.w	r7[0x0],r12
80005512:	c0 30       	breq	80005518 <__sfp+0x44>
80005514:	6e 07       	ld.w	r7,r7[0x0]
80005516:	ce cb       	rjmp	800054ee <__sfp+0x1a>
80005518:	30 c8       	mov	r8,12
8000551a:	8d 38       	st.w	r6[0xc],r8
8000551c:	d8 22       	popm	r4-r7,pc
8000551e:	30 08       	mov	r8,0
80005520:	f9 48 00 4c 	st.w	r12[76],r8
80005524:	99 08       	st.w	r12[0x0],r8
80005526:	99 28       	st.w	r12[0x8],r8
80005528:	99 18       	st.w	r12[0x4],r8
8000552a:	99 48       	st.w	r12[0x10],r8
8000552c:	99 58       	st.w	r12[0x14],r8
8000552e:	99 68       	st.w	r12[0x18],r8
80005530:	99 d8       	st.w	r12[0x34],r8
80005532:	99 e8       	st.w	r12[0x38],r8
80005534:	f9 48 00 48 	st.w	r12[72],r8
80005538:	3f f8       	mov	r8,-1
8000553a:	b8 78       	st.h	r12[0xe],r8
8000553c:	30 18       	mov	r8,1
8000553e:	b8 68       	st.h	r12[0xc],r8
80005540:	d8 22       	popm	r4-r7,pc
80005542:	00 00       	add	r0,r0
80005544:	80 00       	ld.sh	r0,r0[0x0]
80005546:	5f 38       	srlo	r8
80005548:	80 00       	ld.sh	r0,r0[0x0]
8000554a:	55 50       	stdsp	sp[0x154],r0
8000554c:	80 00       	ld.sh	r0,r0[0x0]
8000554e:	54 a4       	stdsp	sp[0x128],r4

80005550 <__sinit>:
80005550:	d4 21       	pushm	r4-r7,lr
80005552:	18 96       	mov	r6,r12
80005554:	78 67       	ld.w	r7,r12[0x18]
80005556:	58 07       	cp.w	r7,0
80005558:	c4 71       	brne	800055e6 <__sinit+0x96>
8000555a:	4a 48       	lddpc	r8,800055e8 <__sinit+0x98>
8000555c:	30 15       	mov	r5,1
8000555e:	99 a8       	st.w	r12[0x28],r8
80005560:	f9 47 00 d8 	st.w	r12[216],r7
80005564:	f9 47 00 dc 	st.w	r12[220],r7
80005568:	f9 47 00 e0 	st.w	r12[224],r7
8000556c:	99 65       	st.w	r12[0x18],r5
8000556e:	f0 1f 00 20 	mcall	800055ec <__sinit+0x9c>
80005572:	8d 0c       	st.w	r6[0x0],r12
80005574:	0c 9c       	mov	r12,r6
80005576:	f0 1f 00 1e 	mcall	800055ec <__sinit+0x9c>
8000557a:	8d 1c       	st.w	r6[0x4],r12
8000557c:	0c 9c       	mov	r12,r6
8000557e:	f0 1f 00 1c 	mcall	800055ec <__sinit+0x9c>
80005582:	6c 09       	ld.w	r9,r6[0x0]
80005584:	30 48       	mov	r8,4
80005586:	93 07       	st.w	r9[0x0],r7
80005588:	b2 68       	st.h	r9[0xc],r8
8000558a:	93 17       	st.w	r9[0x4],r7
8000558c:	93 27       	st.w	r9[0x8],r7
8000558e:	6c 18       	ld.w	r8,r6[0x4]
80005590:	b2 77       	st.h	r9[0xe],r7
80005592:	93 47       	st.w	r9[0x10],r7
80005594:	93 57       	st.w	r9[0x14],r7
80005596:	93 67       	st.w	r9[0x18],r7
80005598:	93 89       	st.w	r9[0x20],r9
8000559a:	91 07       	st.w	r8[0x0],r7
8000559c:	91 17       	st.w	r8[0x4],r7
8000559e:	91 27       	st.w	r8[0x8],r7
800055a0:	49 4e       	lddpc	lr,800055f0 <__sinit+0xa0>
800055a2:	49 5b       	lddpc	r11,800055f4 <__sinit+0xa4>
800055a4:	93 9e       	st.w	r9[0x24],lr
800055a6:	93 ab       	st.w	r9[0x28],r11
800055a8:	49 4a       	lddpc	r10,800055f8 <__sinit+0xa8>
800055aa:	49 54       	lddpc	r4,800055fc <__sinit+0xac>
800055ac:	93 ba       	st.w	r9[0x2c],r10
800055ae:	93 c4       	st.w	r9[0x30],r4
800055b0:	30 99       	mov	r9,9
800055b2:	b0 69       	st.h	r8[0xc],r9
800055b4:	b0 75       	st.h	r8[0xe],r5
800055b6:	91 c4       	st.w	r8[0x30],r4
800055b8:	91 47       	st.w	r8[0x10],r7
800055ba:	91 57       	st.w	r8[0x14],r7
800055bc:	91 67       	st.w	r8[0x18],r7
800055be:	91 88       	st.w	r8[0x20],r8
800055c0:	91 9e       	st.w	r8[0x24],lr
800055c2:	91 ab       	st.w	r8[0x28],r11
800055c4:	91 ba       	st.w	r8[0x2c],r10
800055c6:	8d 2c       	st.w	r6[0x8],r12
800055c8:	31 28       	mov	r8,18
800055ca:	99 07       	st.w	r12[0x0],r7
800055cc:	b8 68       	st.h	r12[0xc],r8
800055ce:	99 17       	st.w	r12[0x4],r7
800055d0:	99 27       	st.w	r12[0x8],r7
800055d2:	30 28       	mov	r8,2
800055d4:	b8 78       	st.h	r12[0xe],r8
800055d6:	99 c4       	st.w	r12[0x30],r4
800055d8:	99 67       	st.w	r12[0x18],r7
800055da:	99 9e       	st.w	r12[0x24],lr
800055dc:	99 ab       	st.w	r12[0x28],r11
800055de:	99 ba       	st.w	r12[0x2c],r10
800055e0:	99 47       	st.w	r12[0x10],r7
800055e2:	99 57       	st.w	r12[0x14],r7
800055e4:	99 8c       	st.w	r12[0x20],r12
800055e6:	d8 22       	popm	r4-r7,pc
800055e8:	80 00       	ld.sh	r0,r0[0x0]
800055ea:	54 90       	stdsp	sp[0x124],r0
800055ec:	80 00       	ld.sh	r0,r0[0x0]
800055ee:	54 d4       	stdsp	sp[0x134],r4
800055f0:	80 00       	ld.sh	r0,r0[0x0]
800055f2:	59 0c       	cp.w	r12,16
800055f4:	80 00       	ld.sh	r0,r0[0x0]
800055f6:	58 d4       	cp.w	r4,13
800055f8:	80 00       	ld.sh	r0,r0[0x0]
800055fa:	58 ac       	cp.w	r12,10
800055fc:	80 00       	ld.sh	r0,r0[0x0]
800055fe:	58 9c       	cp.w	r12,9

80005600 <_malloc_trim_r>:
80005600:	d4 21       	pushm	r4-r7,lr
80005602:	16 95       	mov	r5,r11
80005604:	18 97       	mov	r7,r12
80005606:	f0 1f 00 23 	mcall	80005690 <_malloc_trim_r+0x90>
8000560a:	4a 34       	lddpc	r4,80005694 <_malloc_trim_r+0x94>
8000560c:	68 28       	ld.w	r8,r4[0x8]
8000560e:	70 16       	ld.w	r6,r8[0x4]
80005610:	e0 16 ff fc 	andl	r6,0xfffc
80005614:	ec c8 ff 91 	sub	r8,r6,-111
80005618:	f0 05 01 05 	sub	r5,r8,r5
8000561c:	e0 15 ff 80 	andl	r5,0xff80
80005620:	ea c5 00 80 	sub	r5,r5,128
80005624:	e0 45 00 7f 	cp.w	r5,127
80005628:	e0 8a 00 23 	brle	8000566e <_malloc_trim_r+0x6e>
8000562c:	30 0b       	mov	r11,0
8000562e:	0e 9c       	mov	r12,r7
80005630:	f0 1f 00 1a 	mcall	80005698 <_malloc_trim_r+0x98>
80005634:	68 28       	ld.w	r8,r4[0x8]
80005636:	0c 08       	add	r8,r6
80005638:	10 3c       	cp.w	r12,r8
8000563a:	c1 a1       	brne	8000566e <_malloc_trim_r+0x6e>
8000563c:	ea 0b 11 00 	rsub	r11,r5,0
80005640:	0e 9c       	mov	r12,r7
80005642:	f0 1f 00 16 	mcall	80005698 <_malloc_trim_r+0x98>
80005646:	5b fc       	cp.w	r12,-1
80005648:	c1 71       	brne	80005676 <_malloc_trim_r+0x76>
8000564a:	30 0b       	mov	r11,0
8000564c:	0e 9c       	mov	r12,r7
8000564e:	f0 1f 00 13 	mcall	80005698 <_malloc_trim_r+0x98>
80005652:	68 28       	ld.w	r8,r4[0x8]
80005654:	f8 08 01 09 	sub	r9,r12,r8
80005658:	58 f9       	cp.w	r9,15
8000565a:	e0 8a 00 0a 	brle	8000566e <_malloc_trim_r+0x6e>
8000565e:	a1 a9       	sbr	r9,0x0
80005660:	91 19       	st.w	r8[0x4],r9
80005662:	48 f8       	lddpc	r8,8000569c <_malloc_trim_r+0x9c>
80005664:	70 09       	ld.w	r9,r8[0x0]
80005666:	48 f8       	lddpc	r8,800056a0 <_malloc_trim_r+0xa0>
80005668:	f8 09 01 09 	sub	r9,r12,r9
8000566c:	91 09       	st.w	r8[0x0],r9
8000566e:	0e 9c       	mov	r12,r7
80005670:	f0 1f 00 0d 	mcall	800056a4 <_malloc_trim_r+0xa4>
80005674:	d8 2a       	popm	r4-r7,pc,r12=0
80005676:	68 28       	ld.w	r8,r4[0x8]
80005678:	0a 16       	sub	r6,r5
8000567a:	a1 a6       	sbr	r6,0x0
8000567c:	91 16       	st.w	r8[0x4],r6
8000567e:	48 98       	lddpc	r8,800056a0 <_malloc_trim_r+0xa0>
80005680:	70 09       	ld.w	r9,r8[0x0]
80005682:	0a 19       	sub	r9,r5
80005684:	0e 9c       	mov	r12,r7
80005686:	91 09       	st.w	r8[0x0],r9
80005688:	f0 1f 00 07 	mcall	800056a4 <_malloc_trim_r+0xa4>
8000568c:	da 2a       	popm	r4-r7,pc,r12=1
8000568e:	00 00       	add	r0,r0
80005690:	80 00       	ld.sh	r0,r0[0x0]
80005692:	43 10       	lddsp	r0,sp[0xc4]
80005694:	00 00       	add	r0,r0
80005696:	01 f0       	ld.ub	r0,r0[0x7]
80005698:	80 00       	ld.sh	r0,r0[0x0]
8000569a:	4f e0       	lddpc	r0,80005890 <_fwalk+0x48>
8000569c:	00 00       	add	r0,r0
8000569e:	05 fc       	ld.ub	r12,r2[0x7]
800056a0:	00 00       	add	r0,r0
800056a2:	09 d4       	ld.ub	r4,r4[0x5]
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	43 1c       	lddsp	r12,sp[0xc4]

800056a8 <_free_r>:
800056a8:	d4 21       	pushm	r4-r7,lr
800056aa:	16 96       	mov	r6,r11
800056ac:	18 97       	mov	r7,r12
800056ae:	58 0b       	cp.w	r11,0
800056b0:	e0 80 00 c8 	breq	80005840 <_free_r+0x198>
800056b4:	f0 1f 00 4c 	mcall	800057e4 <_free_r+0x13c>
800056b8:	20 86       	sub	r6,8
800056ba:	4c ca       	lddpc	r10,800057e8 <_free_r+0x140>
800056bc:	6c 18       	ld.w	r8,r6[0x4]
800056be:	74 2e       	ld.w	lr,r10[0x8]
800056c0:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800056c4:	a1 c8       	cbr	r8,0x0
800056c6:	ec 08 00 09 	add	r9,r6,r8
800056ca:	72 1b       	ld.w	r11,r9[0x4]
800056cc:	e0 1b ff fc 	andl	r11,0xfffc
800056d0:	1c 39       	cp.w	r9,lr
800056d2:	c1 d1       	brne	8000570c <_free_r+0x64>
800056d4:	f6 08 00 08 	add	r8,r11,r8
800056d8:	58 0c       	cp.w	r12,0
800056da:	c0 81       	brne	800056ea <_free_r+0x42>
800056dc:	6c 09       	ld.w	r9,r6[0x0]
800056de:	12 16       	sub	r6,r9
800056e0:	12 08       	add	r8,r9
800056e2:	6c 3b       	ld.w	r11,r6[0xc]
800056e4:	6c 29       	ld.w	r9,r6[0x8]
800056e6:	97 29       	st.w	r11[0x8],r9
800056e8:	93 3b       	st.w	r9[0xc],r11
800056ea:	10 99       	mov	r9,r8
800056ec:	95 26       	st.w	r10[0x8],r6
800056ee:	a1 a9       	sbr	r9,0x0
800056f0:	8d 19       	st.w	r6[0x4],r9
800056f2:	4b f9       	lddpc	r9,800057ec <_free_r+0x144>
800056f4:	72 09       	ld.w	r9,r9[0x0]
800056f6:	12 38       	cp.w	r8,r9
800056f8:	c0 63       	brcs	80005704 <_free_r+0x5c>
800056fa:	4b e8       	lddpc	r8,800057f0 <_free_r+0x148>
800056fc:	0e 9c       	mov	r12,r7
800056fe:	70 0b       	ld.w	r11,r8[0x0]
80005700:	f0 1f 00 3d 	mcall	800057f4 <_free_r+0x14c>
80005704:	0e 9c       	mov	r12,r7
80005706:	f0 1f 00 3d 	mcall	800057f8 <_free_r+0x150>
8000570a:	d8 22       	popm	r4-r7,pc
8000570c:	93 1b       	st.w	r9[0x4],r11
8000570e:	58 0c       	cp.w	r12,0
80005710:	c0 30       	breq	80005716 <_free_r+0x6e>
80005712:	30 0c       	mov	r12,0
80005714:	c1 08       	rjmp	80005734 <_free_r+0x8c>
80005716:	6c 0e       	ld.w	lr,r6[0x0]
80005718:	f4 c5 ff f8 	sub	r5,r10,-8
8000571c:	1c 16       	sub	r6,lr
8000571e:	1c 08       	add	r8,lr
80005720:	6c 2e       	ld.w	lr,r6[0x8]
80005722:	0a 3e       	cp.w	lr,r5
80005724:	f9 bc 00 01 	moveq	r12,1
80005728:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000572c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80005730:	fd f5 1a 03 	st.wne	lr[0xc],r5
80005734:	f2 0b 00 0e 	add	lr,r9,r11
80005738:	7c 1e       	ld.w	lr,lr[0x4]
8000573a:	ed be 00 00 	bld	lr,0x0
8000573e:	c1 30       	breq	80005764 <_free_r+0xbc>
80005740:	16 08       	add	r8,r11
80005742:	58 0c       	cp.w	r12,0
80005744:	c0 c1       	brne	8000575c <_free_r+0xb4>
80005746:	4a 9e       	lddpc	lr,800057e8 <_free_r+0x140>
80005748:	72 2b       	ld.w	r11,r9[0x8]
8000574a:	2f 8e       	sub	lr,-8
8000574c:	1c 3b       	cp.w	r11,lr
8000574e:	c0 71       	brne	8000575c <_free_r+0xb4>
80005750:	97 36       	st.w	r11[0xc],r6
80005752:	97 26       	st.w	r11[0x8],r6
80005754:	8d 2b       	st.w	r6[0x8],r11
80005756:	8d 3b       	st.w	r6[0xc],r11
80005758:	30 1c       	mov	r12,1
8000575a:	c0 58       	rjmp	80005764 <_free_r+0xbc>
8000575c:	72 2b       	ld.w	r11,r9[0x8]
8000575e:	72 39       	ld.w	r9,r9[0xc]
80005760:	93 2b       	st.w	r9[0x8],r11
80005762:	97 39       	st.w	r11[0xc],r9
80005764:	10 99       	mov	r9,r8
80005766:	ec 08 09 08 	st.w	r6[r8],r8
8000576a:	a1 a9       	sbr	r9,0x0
8000576c:	8d 19       	st.w	r6[0x4],r9
8000576e:	58 0c       	cp.w	r12,0
80005770:	c6 51       	brne	8000583a <_free_r+0x192>
80005772:	e0 48 01 ff 	cp.w	r8,511
80005776:	e0 8b 00 13 	brhi	8000579c <_free_r+0xf4>
8000577a:	a3 98       	lsr	r8,0x3
8000577c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80005780:	72 2b       	ld.w	r11,r9[0x8]
80005782:	8d 39       	st.w	r6[0xc],r9
80005784:	8d 2b       	st.w	r6[0x8],r11
80005786:	97 36       	st.w	r11[0xc],r6
80005788:	93 26       	st.w	r9[0x8],r6
8000578a:	a3 48       	asr	r8,0x2
8000578c:	74 19       	ld.w	r9,r10[0x4]
8000578e:	30 1b       	mov	r11,1
80005790:	f6 08 09 48 	lsl	r8,r11,r8
80005794:	f3 e8 10 08 	or	r8,r9,r8
80005798:	95 18       	st.w	r10[0x4],r8
8000579a:	c5 08       	rjmp	8000583a <_free_r+0x192>
8000579c:	f0 0b 16 09 	lsr	r11,r8,0x9
800057a0:	58 4b       	cp.w	r11,4
800057a2:	e0 8b 00 06 	brhi	800057ae <_free_r+0x106>
800057a6:	f0 0b 16 06 	lsr	r11,r8,0x6
800057aa:	2c 8b       	sub	r11,-56
800057ac:	c2 b8       	rjmp	80005802 <_free_r+0x15a>
800057ae:	59 4b       	cp.w	r11,20
800057b0:	e0 8b 00 04 	brhi	800057b8 <_free_r+0x110>
800057b4:	2a 5b       	sub	r11,-91
800057b6:	c2 68       	rjmp	80005802 <_free_r+0x15a>
800057b8:	e0 4b 00 54 	cp.w	r11,84
800057bc:	e0 8b 00 06 	brhi	800057c8 <_free_r+0x120>
800057c0:	f0 0b 16 0c 	lsr	r11,r8,0xc
800057c4:	29 2b       	sub	r11,-110
800057c6:	c1 e8       	rjmp	80005802 <_free_r+0x15a>
800057c8:	e0 4b 01 54 	cp.w	r11,340
800057cc:	e0 8b 00 06 	brhi	800057d8 <_free_r+0x130>
800057d0:	f0 0b 16 0f 	lsr	r11,r8,0xf
800057d4:	28 9b       	sub	r11,-119
800057d6:	c1 68       	rjmp	80005802 <_free_r+0x15a>
800057d8:	e0 4b 05 54 	cp.w	r11,1364
800057dc:	e0 88 00 10 	brls	800057fc <_free_r+0x154>
800057e0:	37 eb       	mov	r11,126
800057e2:	c1 08       	rjmp	80005802 <_free_r+0x15a>
800057e4:	80 00       	ld.sh	r0,r0[0x0]
800057e6:	43 10       	lddsp	r0,sp[0xc4]
800057e8:	00 00       	add	r0,r0
800057ea:	01 f0       	ld.ub	r0,r0[0x7]
800057ec:	00 00       	add	r0,r0
800057ee:	05 f8       	ld.ub	r8,r2[0x7]
800057f0:	00 00       	add	r0,r0
800057f2:	09 d0       	ld.ub	r0,r4[0x5]
800057f4:	80 00       	ld.sh	r0,r0[0x0]
800057f6:	56 00       	stdsp	sp[0x180],r0
800057f8:	80 00       	ld.sh	r0,r0[0x0]
800057fa:	43 1c       	lddsp	r12,sp[0xc4]
800057fc:	f0 0b 16 12 	lsr	r11,r8,0x12
80005800:	28 4b       	sub	r11,-124
80005802:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80005806:	78 29       	ld.w	r9,r12[0x8]
80005808:	18 39       	cp.w	r9,r12
8000580a:	c0 e1       	brne	80005826 <_free_r+0x17e>
8000580c:	74 18       	ld.w	r8,r10[0x4]
8000580e:	a3 4b       	asr	r11,0x2
80005810:	30 1c       	mov	r12,1
80005812:	f8 0b 09 4b 	lsl	r11,r12,r11
80005816:	f1 eb 10 0b 	or	r11,r8,r11
8000581a:	12 98       	mov	r8,r9
8000581c:	95 1b       	st.w	r10[0x4],r11
8000581e:	c0 a8       	rjmp	80005832 <_free_r+0x18a>
80005820:	72 29       	ld.w	r9,r9[0x8]
80005822:	18 39       	cp.w	r9,r12
80005824:	c0 60       	breq	80005830 <_free_r+0x188>
80005826:	72 1a       	ld.w	r10,r9[0x4]
80005828:	e0 1a ff fc 	andl	r10,0xfffc
8000582c:	14 38       	cp.w	r8,r10
8000582e:	cf 93       	brcs	80005820 <_free_r+0x178>
80005830:	72 38       	ld.w	r8,r9[0xc]
80005832:	8d 38       	st.w	r6[0xc],r8
80005834:	8d 29       	st.w	r6[0x8],r9
80005836:	93 36       	st.w	r9[0xc],r6
80005838:	91 26       	st.w	r8[0x8],r6
8000583a:	0e 9c       	mov	r12,r7
8000583c:	f0 1f 00 02 	mcall	80005844 <_free_r+0x19c>
80005840:	d8 22       	popm	r4-r7,pc
80005842:	00 00       	add	r0,r0
80005844:	80 00       	ld.sh	r0,r0[0x0]
80005846:	43 1c       	lddsp	r12,sp[0xc4]

80005848 <_fwalk>:
80005848:	d4 31       	pushm	r0-r7,lr
8000584a:	30 05       	mov	r5,0
8000584c:	16 91       	mov	r1,r11
8000584e:	f8 c7 ff 28 	sub	r7,r12,-216
80005852:	0a 92       	mov	r2,r5
80005854:	f0 1f 00 10 	mcall	80005894 <_fwalk+0x4c>
80005858:	3f f3       	mov	r3,-1
8000585a:	c1 68       	rjmp	80005886 <_fwalk+0x3e>
8000585c:	6e 26       	ld.w	r6,r7[0x8]
8000585e:	6e 14       	ld.w	r4,r7[0x4]
80005860:	2f 46       	sub	r6,-12
80005862:	c0 c8       	rjmp	8000587a <_fwalk+0x32>
80005864:	8c 08       	ld.sh	r8,r6[0x0]
80005866:	e4 08 19 00 	cp.h	r8,r2
8000586a:	c0 70       	breq	80005878 <_fwalk+0x30>
8000586c:	8c 18       	ld.sh	r8,r6[0x2]
8000586e:	e6 08 19 00 	cp.h	r8,r3
80005872:	c0 30       	breq	80005878 <_fwalk+0x30>
80005874:	5d 11       	icall	r1
80005876:	18 45       	or	r5,r12
80005878:	2a 46       	sub	r6,-92
8000587a:	20 14       	sub	r4,1
8000587c:	ec cc 00 0c 	sub	r12,r6,12
80005880:	58 04       	cp.w	r4,0
80005882:	cf 14       	brge	80005864 <_fwalk+0x1c>
80005884:	6e 07       	ld.w	r7,r7[0x0]
80005886:	58 07       	cp.w	r7,0
80005888:	ce a1       	brne	8000585c <_fwalk+0x14>
8000588a:	f0 1f 00 04 	mcall	80005898 <_fwalk+0x50>
8000588e:	0a 9c       	mov	r12,r5
80005890:	d8 32       	popm	r0-r7,pc
80005892:	00 00       	add	r0,r0
80005894:	80 00       	ld.sh	r0,r0[0x0]
80005896:	54 8c       	stdsp	sp[0x120],r12
80005898:	80 00       	ld.sh	r0,r0[0x0]
8000589a:	54 8e       	stdsp	sp[0x120],lr

8000589c <__sclose>:
8000589c:	d4 01       	pushm	lr
8000589e:	96 7b       	ld.sh	r11,r11[0xe]
800058a0:	f0 1f 00 02 	mcall	800058a8 <__sclose+0xc>
800058a4:	d8 02       	popm	pc
800058a6:	00 00       	add	r0,r0
800058a8:	80 00       	ld.sh	r0,r0[0x0]
800058aa:	59 5c       	cp.w	r12,21

800058ac <__sseek>:
800058ac:	d4 21       	pushm	r4-r7,lr
800058ae:	16 97       	mov	r7,r11
800058b0:	96 7b       	ld.sh	r11,r11[0xe]
800058b2:	f0 1f 00 08 	mcall	800058d0 <__sseek+0x24>
800058b6:	8e 68       	ld.sh	r8,r7[0xc]
800058b8:	10 99       	mov	r9,r8
800058ba:	ad c8       	cbr	r8,0xc
800058bc:	ad a9       	sbr	r9,0xc
800058be:	5b fc       	cp.w	r12,-1
800058c0:	ef f8 0c 06 	st.heq	r7[0xc],r8
800058c4:	ef f9 1c 06 	st.hne	r7[0xc],r9
800058c8:	ef fc 1a 15 	st.wne	r7[0x54],r12
800058cc:	d8 22       	popm	r4-r7,pc
800058ce:	00 00       	add	r0,r0
800058d0:	80 00       	ld.sh	r0,r0[0x0]
800058d2:	5a 6c       	cp.w	r12,-26

800058d4 <__swrite>:
800058d4:	d4 21       	pushm	r4-r7,lr
800058d6:	96 68       	ld.sh	r8,r11[0xc]
800058d8:	16 97       	mov	r7,r11
800058da:	14 95       	mov	r5,r10
800058dc:	12 94       	mov	r4,r9
800058de:	e2 18 01 00 	andl	r8,0x100,COH
800058e2:	18 96       	mov	r6,r12
800058e4:	c0 60       	breq	800058f0 <__swrite+0x1c>
800058e6:	30 29       	mov	r9,2
800058e8:	30 0a       	mov	r10,0
800058ea:	96 7b       	ld.sh	r11,r11[0xe]
800058ec:	f0 1f 00 06 	mcall	80005904 <__swrite+0x30>
800058f0:	8e 68       	ld.sh	r8,r7[0xc]
800058f2:	ad c8       	cbr	r8,0xc
800058f4:	08 99       	mov	r9,r4
800058f6:	0a 9a       	mov	r10,r5
800058f8:	8e 7b       	ld.sh	r11,r7[0xe]
800058fa:	0c 9c       	mov	r12,r6
800058fc:	ae 68       	st.h	r7[0xc],r8
800058fe:	f0 1f 00 03 	mcall	80005908 <__swrite+0x34>
80005902:	d8 22       	popm	r4-r7,pc
80005904:	80 00       	ld.sh	r0,r0[0x0]
80005906:	5a 6c       	cp.w	r12,-26
80005908:	80 00       	ld.sh	r0,r0[0x0]
8000590a:	59 30       	cp.w	r0,19

8000590c <__sread>:
8000590c:	d4 21       	pushm	r4-r7,lr
8000590e:	16 97       	mov	r7,r11
80005910:	96 7b       	ld.sh	r11,r11[0xe]
80005912:	f0 1f 00 07 	mcall	8000592c <__sread+0x20>
80005916:	c0 65       	brlt	80005922 <__sread+0x16>
80005918:	6f 58       	ld.w	r8,r7[0x54]
8000591a:	18 08       	add	r8,r12
8000591c:	ef 48 00 54 	st.w	r7[84],r8
80005920:	d8 22       	popm	r4-r7,pc
80005922:	8e 68       	ld.sh	r8,r7[0xc]
80005924:	ad c8       	cbr	r8,0xc
80005926:	ae 68       	st.h	r7[0xc],r8
80005928:	d8 22       	popm	r4-r7,pc
8000592a:	00 00       	add	r0,r0
8000592c:	80 00       	ld.sh	r0,r0[0x0]
8000592e:	5a 98       	cp.w	r8,-23

80005930 <_write_r>:
80005930:	d4 21       	pushm	r4-r7,lr
80005932:	16 98       	mov	r8,r11
80005934:	18 97       	mov	r7,r12
80005936:	10 9c       	mov	r12,r8
80005938:	30 08       	mov	r8,0
8000593a:	14 9b       	mov	r11,r10
8000593c:	48 66       	lddpc	r6,80005954 <_write_r+0x24>
8000593e:	12 9a       	mov	r10,r9
80005940:	8d 08       	st.w	r6[0x0],r8
80005942:	f0 1f 00 06 	mcall	80005958 <_write_r+0x28>
80005946:	5b fc       	cp.w	r12,-1
80005948:	c0 51       	brne	80005952 <_write_r+0x22>
8000594a:	6c 08       	ld.w	r8,r6[0x0]
8000594c:	58 08       	cp.w	r8,0
8000594e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005952:	d8 22       	popm	r4-r7,pc
80005954:	00 00       	add	r0,r0
80005956:	0a 2c       	rsub	r12,r5
80005958:	80 00       	ld.sh	r0,r0[0x0]
8000595a:	3f f8       	mov	r8,-1

8000595c <_close_r>:
8000595c:	d4 21       	pushm	r4-r7,lr
8000595e:	30 08       	mov	r8,0
80005960:	18 97       	mov	r7,r12
80005962:	48 76       	lddpc	r6,8000597c <_close_r+0x20>
80005964:	16 9c       	mov	r12,r11
80005966:	8d 08       	st.w	r6[0x0],r8
80005968:	f0 1f 00 06 	mcall	80005980 <_close_r+0x24>
8000596c:	5b fc       	cp.w	r12,-1
8000596e:	c0 51       	brne	80005978 <_close_r+0x1c>
80005970:	6c 08       	ld.w	r8,r6[0x0]
80005972:	58 08       	cp.w	r8,0
80005974:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005978:	d8 22       	popm	r4-r7,pc
8000597a:	00 00       	add	r0,r0
8000597c:	00 00       	add	r0,r0
8000597e:	0a 2c       	rsub	r12,r5
80005980:	80 00       	ld.sh	r0,r0[0x0]
80005982:	51 78       	stdsp	sp[0x5c],r8

80005984 <_fclose_r>:
80005984:	d4 21       	pushm	r4-r7,lr
80005986:	18 96       	mov	r6,r12
80005988:	16 97       	mov	r7,r11
8000598a:	58 0b       	cp.w	r11,0
8000598c:	c0 31       	brne	80005992 <_fclose_r+0xe>
8000598e:	16 95       	mov	r5,r11
80005990:	c5 08       	rjmp	80005a30 <_fclose_r+0xac>
80005992:	f0 1f 00 29 	mcall	80005a34 <_fclose_r+0xb0>
80005996:	58 06       	cp.w	r6,0
80005998:	c0 70       	breq	800059a6 <_fclose_r+0x22>
8000599a:	6c 68       	ld.w	r8,r6[0x18]
8000599c:	58 08       	cp.w	r8,0
8000599e:	c0 41       	brne	800059a6 <_fclose_r+0x22>
800059a0:	0c 9c       	mov	r12,r6
800059a2:	f0 1f 00 26 	mcall	80005a38 <_fclose_r+0xb4>
800059a6:	4a 68       	lddpc	r8,80005a3c <_fclose_r+0xb8>
800059a8:	10 37       	cp.w	r7,r8
800059aa:	c0 31       	brne	800059b0 <_fclose_r+0x2c>
800059ac:	6c 07       	ld.w	r7,r6[0x0]
800059ae:	c0 a8       	rjmp	800059c2 <_fclose_r+0x3e>
800059b0:	4a 48       	lddpc	r8,80005a40 <_fclose_r+0xbc>
800059b2:	10 37       	cp.w	r7,r8
800059b4:	c0 31       	brne	800059ba <_fclose_r+0x36>
800059b6:	6c 17       	ld.w	r7,r6[0x4]
800059b8:	c0 58       	rjmp	800059c2 <_fclose_r+0x3e>
800059ba:	4a 38       	lddpc	r8,80005a44 <_fclose_r+0xc0>
800059bc:	10 37       	cp.w	r7,r8
800059be:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800059c2:	8e 69       	ld.sh	r9,r7[0xc]
800059c4:	30 08       	mov	r8,0
800059c6:	f0 09 19 00 	cp.h	r9,r8
800059ca:	c0 51       	brne	800059d4 <_fclose_r+0x50>
800059cc:	f0 1f 00 1f 	mcall	80005a48 <_fclose_r+0xc4>
800059d0:	30 05       	mov	r5,0
800059d2:	c2 f8       	rjmp	80005a30 <_fclose_r+0xac>
800059d4:	0e 9b       	mov	r11,r7
800059d6:	0c 9c       	mov	r12,r6
800059d8:	f0 1f 00 1d 	mcall	80005a4c <_fclose_r+0xc8>
800059dc:	6e c8       	ld.w	r8,r7[0x30]
800059de:	18 95       	mov	r5,r12
800059e0:	58 08       	cp.w	r8,0
800059e2:	c0 60       	breq	800059ee <_fclose_r+0x6a>
800059e4:	6e 8b       	ld.w	r11,r7[0x20]
800059e6:	0c 9c       	mov	r12,r6
800059e8:	5d 18       	icall	r8
800059ea:	f9 b5 05 ff 	movlt	r5,-1
800059ee:	8e 68       	ld.sh	r8,r7[0xc]
800059f0:	ed b8 00 07 	bld	r8,0x7
800059f4:	c0 51       	brne	800059fe <_fclose_r+0x7a>
800059f6:	6e 4b       	ld.w	r11,r7[0x10]
800059f8:	0c 9c       	mov	r12,r6
800059fa:	f0 1f 00 16 	mcall	80005a50 <_fclose_r+0xcc>
800059fe:	6e db       	ld.w	r11,r7[0x34]
80005a00:	58 0b       	cp.w	r11,0
80005a02:	c0 a0       	breq	80005a16 <_fclose_r+0x92>
80005a04:	ee c8 ff bc 	sub	r8,r7,-68
80005a08:	10 3b       	cp.w	r11,r8
80005a0a:	c0 40       	breq	80005a12 <_fclose_r+0x8e>
80005a0c:	0c 9c       	mov	r12,r6
80005a0e:	f0 1f 00 11 	mcall	80005a50 <_fclose_r+0xcc>
80005a12:	30 08       	mov	r8,0
80005a14:	8f d8       	st.w	r7[0x34],r8
80005a16:	6f 2b       	ld.w	r11,r7[0x48]
80005a18:	58 0b       	cp.w	r11,0
80005a1a:	c0 70       	breq	80005a28 <_fclose_r+0xa4>
80005a1c:	0c 9c       	mov	r12,r6
80005a1e:	f0 1f 00 0d 	mcall	80005a50 <_fclose_r+0xcc>
80005a22:	30 08       	mov	r8,0
80005a24:	ef 48 00 48 	st.w	r7[72],r8
80005a28:	30 08       	mov	r8,0
80005a2a:	ae 68       	st.h	r7[0xc],r8
80005a2c:	f0 1f 00 07 	mcall	80005a48 <_fclose_r+0xc4>
80005a30:	0a 9c       	mov	r12,r5
80005a32:	d8 22       	popm	r4-r7,pc
80005a34:	80 00       	ld.sh	r0,r0[0x0]
80005a36:	54 8c       	stdsp	sp[0x120],r12
80005a38:	80 00       	ld.sh	r0,r0[0x0]
80005a3a:	55 50       	stdsp	sp[0x154],r0
80005a3c:	80 00       	ld.sh	r0,r0[0x0]
80005a3e:	5f 3c       	srlo	r12
80005a40:	80 00       	ld.sh	r0,r0[0x0]
80005a42:	5f 5c       	srlt	r12
80005a44:	80 00       	ld.sh	r0,r0[0x0]
80005a46:	5f 7c       	srpl	r12
80005a48:	80 00       	ld.sh	r0,r0[0x0]
80005a4a:	54 8e       	stdsp	sp[0x120],lr
80005a4c:	80 00       	ld.sh	r0,r0[0x0]
80005a4e:	53 74       	stdsp	sp[0xdc],r4
80005a50:	80 00       	ld.sh	r0,r0[0x0]
80005a52:	56 a8       	stdsp	sp[0x1a8],r8

80005a54 <fclose>:
80005a54:	d4 01       	pushm	lr
80005a56:	48 48       	lddpc	r8,80005a64 <fclose+0x10>
80005a58:	18 9b       	mov	r11,r12
80005a5a:	70 0c       	ld.w	r12,r8[0x0]
80005a5c:	f0 1f 00 03 	mcall	80005a68 <fclose+0x14>
80005a60:	d8 02       	popm	pc
80005a62:	00 00       	add	r0,r0
80005a64:	00 00       	add	r0,r0
80005a66:	01 ec       	ld.ub	r12,r0[0x6]
80005a68:	80 00       	ld.sh	r0,r0[0x0]
80005a6a:	59 84       	cp.w	r4,24

80005a6c <_lseek_r>:
80005a6c:	d4 21       	pushm	r4-r7,lr
80005a6e:	16 98       	mov	r8,r11
80005a70:	18 97       	mov	r7,r12
80005a72:	10 9c       	mov	r12,r8
80005a74:	30 08       	mov	r8,0
80005a76:	14 9b       	mov	r11,r10
80005a78:	48 66       	lddpc	r6,80005a90 <_lseek_r+0x24>
80005a7a:	12 9a       	mov	r10,r9
80005a7c:	8d 08       	st.w	r6[0x0],r8
80005a7e:	f0 1f 00 06 	mcall	80005a94 <_lseek_r+0x28>
80005a82:	5b fc       	cp.w	r12,-1
80005a84:	c0 51       	brne	80005a8e <_lseek_r+0x22>
80005a86:	6c 08       	ld.w	r8,r6[0x0]
80005a88:	58 08       	cp.w	r8,0
80005a8a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005a8e:	d8 22       	popm	r4-r7,pc
80005a90:	00 00       	add	r0,r0
80005a92:	0a 2c       	rsub	r12,r5
80005a94:	80 00       	ld.sh	r0,r0[0x0]
80005a96:	51 90       	stdsp	sp[0x64],r0

80005a98 <_read_r>:
80005a98:	d4 21       	pushm	r4-r7,lr
80005a9a:	16 98       	mov	r8,r11
80005a9c:	18 97       	mov	r7,r12
80005a9e:	10 9c       	mov	r12,r8
80005aa0:	30 08       	mov	r8,0
80005aa2:	14 9b       	mov	r11,r10
80005aa4:	48 66       	lddpc	r6,80005abc <_read_r+0x24>
80005aa6:	12 9a       	mov	r10,r9
80005aa8:	8d 08       	st.w	r6[0x0],r8
80005aaa:	f0 1f 00 06 	mcall	80005ac0 <_read_r+0x28>
80005aae:	5b fc       	cp.w	r12,-1
80005ab0:	c0 51       	brne	80005aba <_read_r+0x22>
80005ab2:	6c 08       	ld.w	r8,r6[0x0]
80005ab4:	58 08       	cp.w	r8,0
80005ab6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005aba:	d8 22       	popm	r4-r7,pc
80005abc:	00 00       	add	r0,r0
80005abe:	0a 2c       	rsub	r12,r5
80005ac0:	80 00       	ld.sh	r0,r0[0x0]
80005ac2:	3e dc       	mov	r12,-19

80005ac4 <__do_global_ctors_aux>:
80005ac4:	d4 21       	pushm	r4-r7,lr
80005ac6:	48 57       	lddpc	r7,80005ad8 <__do_global_ctors_aux+0x14>
80005ac8:	c0 28       	rjmp	80005acc <__do_global_ctors_aux+0x8>
80005aca:	5d 18       	icall	r8
80005acc:	20 47       	sub	r7,4
80005ace:	6e 08       	ld.w	r8,r7[0x0]
80005ad0:	5b f8       	cp.w	r8,-1
80005ad2:	cf c1       	brne	80005aca <__do_global_ctors_aux+0x6>
80005ad4:	d8 22       	popm	r4-r7,pc
80005ad6:	00 00       	add	r0,r0
80005ad8:	00 00       	add	r0,r0
80005ada:	00 0c       	add	r12,r0

Disassembly of section .exception:

80005c00 <_evba>:
80005c00:	c0 08       	rjmp	80005c00 <_evba>
	...

80005c04 <_handle_TLB_Multiple_Hit>:
80005c04:	c0 08       	rjmp	80005c04 <_handle_TLB_Multiple_Hit>
	...

80005c08 <_handle_Bus_Error_Data_Fetch>:
80005c08:	c0 08       	rjmp	80005c08 <_handle_Bus_Error_Data_Fetch>
	...

80005c0c <_handle_Bus_Error_Instruction_Fetch>:
80005c0c:	c0 08       	rjmp	80005c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005c10 <_handle_NMI>:
80005c10:	c0 08       	rjmp	80005c10 <_handle_NMI>
	...

80005c14 <_handle_Instruction_Address>:
80005c14:	c0 08       	rjmp	80005c14 <_handle_Instruction_Address>
	...

80005c18 <_handle_ITLB_Protection>:
80005c18:	c0 08       	rjmp	80005c18 <_handle_ITLB_Protection>
	...

80005c1c <_handle_Breakpoint>:
80005c1c:	c0 08       	rjmp	80005c1c <_handle_Breakpoint>
	...

80005c20 <_handle_Illegal_Opcode>:
80005c20:	c0 08       	rjmp	80005c20 <_handle_Illegal_Opcode>
	...

80005c24 <_handle_Unimplemented_Instruction>:
80005c24:	c0 08       	rjmp	80005c24 <_handle_Unimplemented_Instruction>
	...

80005c28 <_handle_Privilege_Violation>:
80005c28:	c0 08       	rjmp	80005c28 <_handle_Privilege_Violation>
	...

80005c2c <_handle_Floating_Point>:
80005c2c:	c0 08       	rjmp	80005c2c <_handle_Floating_Point>
	...

80005c30 <_handle_Coprocessor_Absent>:
80005c30:	c0 08       	rjmp	80005c30 <_handle_Coprocessor_Absent>
	...

80005c34 <_handle_Data_Address_Read>:
80005c34:	c0 08       	rjmp	80005c34 <_handle_Data_Address_Read>
	...

80005c38 <_handle_Data_Address_Write>:
80005c38:	c0 08       	rjmp	80005c38 <_handle_Data_Address_Write>
	...

80005c3c <_handle_DTLB_Protection_Read>:
80005c3c:	c0 08       	rjmp	80005c3c <_handle_DTLB_Protection_Read>
	...

80005c40 <_handle_DTLB_Protection_Write>:
80005c40:	c0 08       	rjmp	80005c40 <_handle_DTLB_Protection_Write>
	...

80005c44 <_handle_DTLB_Modified>:
80005c44:	c0 08       	rjmp	80005c44 <_handle_DTLB_Modified>
	...

80005c50 <_handle_ITLB_Miss>:
80005c50:	c0 08       	rjmp	80005c50 <_handle_ITLB_Miss>
	...

80005c60 <_handle_DTLB_Miss_Read>:
80005c60:	c0 08       	rjmp	80005c60 <_handle_DTLB_Miss_Read>
	...

80005c70 <_handle_DTLB_Miss_Write>:
80005c70:	c0 08       	rjmp	80005c70 <_handle_DTLB_Miss_Write>
	...

80005d00 <_handle_Supervisor_Call>:
80005d00:	49 3f       	lddpc	pc,80005d4c <ipr_val+0x10>
	...

80005d04 <_int0>:
80005d04:	30 0c       	mov	r12,0
80005d06:	f0 1f 00 13 	mcall	80005d50 <ipr_val+0x14>
80005d0a:	58 0c       	cp.w	r12,0
80005d0c:	f8 0f 17 10 	movne	pc,r12
80005d10:	d6 03       	rete

80005d12 <_int1>:
80005d12:	30 1c       	mov	r12,1
80005d14:	f0 1f 00 0f 	mcall	80005d50 <ipr_val+0x14>
80005d18:	58 0c       	cp.w	r12,0
80005d1a:	f8 0f 17 10 	movne	pc,r12
80005d1e:	d6 03       	rete

80005d20 <_int2>:
80005d20:	30 2c       	mov	r12,2
80005d22:	f0 1f 00 0c 	mcall	80005d50 <ipr_val+0x14>
80005d26:	58 0c       	cp.w	r12,0
80005d28:	f8 0f 17 10 	movne	pc,r12
80005d2c:	d6 03       	rete

80005d2e <_int3>:
80005d2e:	30 3c       	mov	r12,3
80005d30:	f0 1f 00 08 	mcall	80005d50 <ipr_val+0x14>
80005d34:	58 0c       	cp.w	r12,0
80005d36:	f8 0f 17 10 	movne	pc,r12
80005d3a:	d6 03       	rete

80005d3c <ipr_val>:
80005d3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80005d4c:	80 00 41 c8 80 00 22 c8 00 00 00 00 00 00 00 00     ..A...".........
	...

Disassembly of section .fini:

80005e00 <_fini>:
80005e00:	eb cd 40 40 	pushm	r6,lr
80005e04:	48 26       	lddpc	r6,80005e0c <_fini+0xc>
80005e06:	1e 26       	rsub	r6,pc
80005e08:	c0 48       	rjmp	80005e10 <_fini+0x10>
80005e0a:	00 00       	add	r0,r0
80005e0c:	80 00       	ld.sh	r0,r0[0x0]
80005e0e:	5d ea       	*unknown*
80005e10:	f0 16 00 02 	mcall	r6[8]
80005e14:	e3 cd 80 40 	ldm	sp++,r6,pc
